@page "/productos"
@using cliente.Dtos
@using cliente.Services
@inject ProductoService ProductoService
@inject CarritoService CarritoService

<h3>Productos</h3>

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p>No hay productos disponibles.</p>
}
else
{
    <div class="row">
        @foreach (var producto in productos)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img class="card-img-top" src="@producto.ImagenUrl" alt="@producto.Nombre" />
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p><strong>Precio:</strong> $@producto.Precio</p>
                        <button class="btn btn-primary" @onclick="() => Agregar(producto)">Agregar al carrito</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    List<ProductoDto>? productos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productos = await ProductoService.ObtenerProductos();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error al cargar productos: {ex.Message}");
            productos = new(); // evita null
        }
    }

    void Agregar(ProductoDto producto)
    {
        CarritoService.AgregarProducto(producto);
    }
}
