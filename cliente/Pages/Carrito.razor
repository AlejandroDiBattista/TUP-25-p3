@page "/carrito"
@using cliente.Dtos
@using cliente.Services
@inject CarritoService CarritoService
@inject NavigationManager nav

#nullable enable

<h1>Carrito</h1>

@if (items is null)
{
    <p>Cargando...</p>
}
else if (!items.Any())
{
    <p>No hay productos en el carrito.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in items)
            {
                <tr>
                    <td>@i.Producto?.Nombre</td>
                    <td>$@i.PrecioUnitario</td>
                    <td>
                        <button class="btn btn-sm btn-secondary" @onclick="() => Quitar(i.ProductoId)">-</button>
                        @i.Cantidad
                        <button class="btn btn-sm btn-secondary" @onclick="() => Agregar(i.ProductoId)">+</button>
                    </td>
                    <td>$@i.Importe</td>
                    <td><button class="btn btn-sm btn-danger" @onclick="() => QuitarTodo(i.ProductoId)">ðŸ—‘</button></td>
                </tr>
            }
        </tbody>
    </table>

    <h5>Total: $@items.Sum(x => x.Importe)</h5>
    <button class="btn btn-warning me-2" @onclick="Vaciar">Vaciar carrito</button>
    <button class="btn btn-success" @onclick="IrAConfirmacion">Confirmar compra</button>
}

@code {
    private List<ItemCompraDto>? items;

    protected override async Task OnInitializedAsync() => await Cargar();

    private async Task Cargar() =>
        items = await CarritoService.ObtenerCarrito();

    private async Task Agregar(int id)
    {
        await CarritoService.AgregarProducto(id);
        await Cargar();
    }

    private async Task Quitar(int id)
    {
        await CarritoService.QuitarProducto(id);
        await Cargar();
    }

    private async Task QuitarTodo(int id)
    {
        while (items!.Any(i => i.ProductoId == id))
            await Quitar(id);
    }

    private async Task Vaciar()
    {
        await CarritoService.VaciarCarrito();
        await Cargar();
    }

    private void IrAConfirmacion() => nav.NavigateTo("/confirmacion");
}
