@page "/carrito"
@inject CarritoService CarritoService
@inject NavigationManager Navigation

<h3>ðŸ›’ Carrito</h3>

@if (items is null) { <p>Cargando...</p> }
else if (!items.Any()) { <p>El carrito estÃ¡ vacÃ­o.</p> }
else
{
    <table class="table">
        <thead><tr><th>Producto</th><th>Precio</th><th>Cant.</th><th>Sub</th><th></th></tr></thead>
        <tbody>
        @foreach (var i in items)
        {
            <tr>
                <td>@i.Producto?.Nombre</td>
                <td>$@i.PrecioUnitario</td>
                <td>
                    <button class="btn btn-sm btn-secondary" @onclick="() => Quitar(i.ProductoId)">-</button>
                    @i.Cantidad
                    <button class="btn btn-sm btn-secondary" @onclick="() => Agregar(i.ProductoId)">+</button>
                </td>
                <td>$@i.Importe</td>
                <td><button class="btn btn-sm btn-danger" @onclick="() => QuitarTodo(i.ProductoId)">ðŸ—‘</button></td>
            </tr>
        }
        </tbody>
    </table>

    <h5>Total: $@items.Sum(x => x.Importe)</h5>
    <button class="btn btn-warning me-2" @onclick="Vaciar">Vaciar carrito</button>
    <button class="btn btn-success" @onclick="() => Navigation.NavigateTo(\"/confirmacion\")">Confirmar compra</button>
}

@code {
    private List<ItemCompraDto>? items;

    protected override async Task OnInitializedAsync() => items = await CarritoService.ObtenerCarrito();

    private async Task Agregar(int id) { await CarritoService.AgregarProducto(id); items = await CarritoService.ObtenerCarrito(); }
    private async Task Quitar(int id) { await CarritoService.QuitarProducto(id); items = await CarritoService.ObtenerCarrito(); }
    private async Task QuitarTodo(int id)
    {
        while (items!.Any(i => i.ProductoId == id))
            await Quitar(id);
    }
    private async Task Vaciar() { await CarritoService.VaciarCarrito(); items = await CarritoService.ObtenerCarrito(); }
}
