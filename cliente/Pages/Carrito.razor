#nullable enable
@page "/carrito"
@using cliente.Dtos
@inject cliente.Services.CarritoService CarritoService

<h3>Carrito</h3>

@if (carrito is null)
{
    <p>Cargando carrito...</p>
}
else if (!carrito.Any())
{
    <p>El carrito está vacío.</p>
}
else
{
    <ul>
        @foreach (var item in carrito)
        {
            <li>@item.Nombre - @item.Cantidad x $@item.Precio</li>
        }
    </ul>

    <input @bind="nombreCliente" placeholder="Tu nombre" />
    <button @onclick="ConfirmarCompra">Confirmar compra</button>
}

@code {
    private List<ProductoCarritoDto>? carrito;
    private string nombreCliente = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        carrito = await CarritoService.ObtenerCarrito();
    }

    private async Task ConfirmarCompra()
    {
        if (!string.IsNullOrWhiteSpace(nombreCliente))
        {
            await CarritoService.ConfirmarCompra(nombreCliente);
            carrito = await CarritoService.ObtenerCarrito(); // Limpia el carrito después de confirmar
        }
    }
}
