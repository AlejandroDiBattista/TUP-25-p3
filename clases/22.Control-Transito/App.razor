@using System.Timers
@using System.Linq
@using System

<div class="app">
    @if (pasos == 0) {
        <Ficha titulo="Configuración de contadores" accion="Siguiente" onClick="Configurar">
            <label for="count">Cantidad de tipos de vehículos:</label>
            <input id="count" type="number" @bind="contadores" min="1" />
        </Ficha>
    } else if (pasos == 1) {
        <Ficha titulo="Asignar Nombres a contadores" accion="Siguiente" onClick="AsignarNombres">
            @for (var i = 0; i < nombres.Length; i++) {
                var index = i;
                <div @key="index">
                    <label for="name_@index">Nombre del contador @(index + 1):</label>
                    <input id="name_@index" type="text" @bind="nombres[index]" />
                </div>
            }
        </Ficha>
    } else if (pasos == 2) {
        <Ficha titulo="Conteo Activo" accion="Terminar" onClick="Finalizar">
            <div class="timer">@TimeDisplay</div>
            <div class="counter-grid">
                @for (int i = 0; i < counters.Count; i++) {
                    int currentIndex = i;
                    <div @key="currentIndex" class="counter-card btn" @onclick="() => Incrementar(currentIndex)">
                        <h3>@counters[currentIndex].Nombre</h3>
                        <div class="counter-value">@counters[currentIndex].Cantidad</div>
                    </div>
                }
            </div>
        </Ficha>
    } else if (pasos == 3) {
        <Ficha titulo="Resultados" accion="Comenzar" onClick="Reiniciar">
            <div class="results">
                <table>
                    <thead>
                        <tr>
                            <th>Vehículo</th>
                            <th>Cantidad</th>
                            <th>Vehículos/hora</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var c in counters) {
                            <tr>
                                <td>@c.Nombre</td>
                                <td>@c.Cantidad</td>
                                <td>@Velocidad(c.Cantidad) v/h</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </Ficha>
    }
</div>


@code {
    private int pasos = 0;
    private int contadores = 1;
    private List<Contador> counters = new();
    private string[] nombres = Array.Empty<string>();

    private int segundos;
    private Timer? timer;

    private void Configurar() {
        nombres = new string[contadores];
        for (int i = 0; i < nombres.Length; i++) {
            nombres[i] = $"Vehiculo {i + 1}";
        }
        pasos = 1;
    }

    private void AsignarNombres() {
        var i = 0;
        counters = nombres.Select(nombre => new Contador { 
            Nombre = string.IsNullOrWhiteSpace(nombre) ? $"Sin nombre {++i}" : nombre 
        }).ToList();
        Contar();
        pasos = 2;
    }

    private void Contar() {
        segundos = 600;
        timer = new Timer(1000) { AutoReset = true };
        timer.Elapsed += (_, _) => {
            if (segundos > 0) {
                segundos--;
                InvokeAsync(StateHasChanged);
            } else {
                InvokeAsync(Finalizar);
            }
        };
        timer.Start();
    }

    private string TimeDisplay => TimeSpan.FromSeconds(segundos).ToString("mm\\:ss");
    
    private void Incrementar(int index) {
        if (index >= 0 && index < counters.Count) {
            counters[index].Incrementar();
            StateHasChanged();
        }
    }
    
    private void Finalizar() {
        timer?.Stop();
        pasos = 3;
    }
    
    private int Velocidad(int count) {
        // El tiempo transcurrido es 10 minutos o menos si terminó antes
        var minutos = (600 - segundos) / 60.0;
        if (minutos <= 0) minutos = 0.1; // Evitar división por cero
        
        // Proyectar el conteo a una hora completa
        return (int)Math.Round(count * (60 / minutos));
    }
    
    private void Reiniciar() {
        timer?.Dispose();
        pasos = 0;
        contadores = 1;
        counters.Clear();
        nombres = Array.Empty<string>();
    }

    public class Contador {
        public string Nombre { get; set; } = string.Empty;   
        public int Cantidad { get; set; }  

        public void Incrementar() => Cantidad++; // Método para Incrementar la cantidad del contador    
    }

}

