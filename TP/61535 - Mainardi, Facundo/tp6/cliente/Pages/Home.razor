@page "/"
@using Cliente.Services
@using Cliente.Modelos
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject CarritoFinal CarritoFinal
@implements IDisposable
@using Microsoft.AspNetCore.WebUtilities

<h2 style="text-align: center; font-size: 2rem; font-weight: bold; margin-bottom: 20px; color: #333;">
    Productos disponibles
</h2>
@if (productosFiltrados == null)
{
    <p>Cargando productos...</p>
}
else if (!productosFiltrados.Any())
{
    <p>No se encontraron productos.</p>
}
else
{
    <div class="productos">
        @foreach (var producto in productosFiltrados)
        {
            <div class="producto">
                <img src="@producto.ImagenUrl" alt="@producto.Nombre" class="img-fluid" />
                <h4>@producto.Nombre</h4>
                <p>@producto.Descripcion</p>
                <p><strong>Precio:</strong> $@producto.Precio</p>
                <p><strong>Stock:</strong> @producto.Stock</p>
                <button class="btn btn-primary" @onclick="@(() => AgregarProducto(producto))">
                    <i class="fa-solid fa-cart-plus"></i> Agregar al carrito
                </button>
            </div>
        }
    </div>
}

@code {
    [Inject] private NavigationManager NavigationManager { get; set; }

    private IDisposable locationChangedHandler;

    protected override void OnInitialized()
    {
        locationChangedHandler = NavigationManager.RegisterLocationChangingHandler(OnLocationChanged);
    }

    private List<Producto> productosFiltrados = new();
    private string search = "";

    protected override async Task OnParametersSetAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var query))
        {
            search = query;
        }
        else
        {
            search = "";
        }

        productosFiltrados = await ApiService.BuscarProductos(search);
    }
    private void CarritoActualizado()
    {
        InvokeAsync(StateHasChanged); 
    }

    public void Dispose()
    {
        CarritoFinal.OnChange -= CarritoActualizado; 
    }

 private async Task AgregarProducto(Producto producto)
{
    var existente = CarritoFinal.Items.FirstOrDefault(i => i.ProductoId == producto.Id);

    if (existente != null && existente.Cantidad >= producto.Stock)
    {
        Console.WriteLine($"⚠️ No se puede agregar más del stock disponible ({producto.Stock}).");
        return;
    }
    var item = new ItemCarrito
    {
        ProductoId = producto.Id,
        Nombre = producto.Nombre,
        Precio = producto.Precio,
        Cantidad = 1
    };

    await CarritoFinal.AgregarProductoAsync(item); 
}
  private async ValueTask OnLocationChanged(LocationChangingContext context)
{
    var uri = new Uri(context.TargetLocation);
    if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("search", out var nuevaBusqueda))
    {
        if (search != nuevaBusqueda)
        {
            search = nuevaBusqueda;
            productosFiltrados = await ApiService.BuscarProductos(search);
            StateHasChanged();
        }
    }
}
}