@page "/productos"
@using System.Web
@using cliente.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http
@inject NotificationService NotificationService

<div class="bg-tienda-orange tienda-content">

    @if (cargando)
    {
        <div class="alert alert-info text-center">Cargando productos...</div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger text-center">Error: @error</div>
    }
    else if (productos != null && productos.Count > 0)    {
        <div class="row justify-content-center fade-in">
            @foreach (var p in productos)
            {
                <div class="col-md-4 mb-4">
                    <div class="producto-box p-3 h-100">
                        <div class="product-card">
                            <img src="@p.imagen" class="product-card-img" alt="@p.nombre">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title text-primary">@p.nombre</h5>
                                <p class="product-card-desc">@p.descripcion</p>
                                <p class="card-text mb-1"><b>Precio:</b> <span class="text-success">$@p.precio</span></p>
                                <p class="card-text mb-2"><b>Stock:</b> <span class="text-dark">@p.stock</span></p>
                                <button class="btn btn-success mt-auto w-100" @onclick="() => AgregarAlCarrito(p.id)" disabled="@(p.stock < 1)">
                                    <span aria-hidden="true">🎯</span> Agregar al carrito
                                </button>
                            </div>
                        </div>
                        @if (errorProductoId == p.id && errorProductoMsg != null)
                        {
                            <div class="alert alert-danger mt-2">@errorProductoMsg</div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center">No hay productos disponibles.</div>
    }
</div>

@code {
    private List<ProductoDto> productos;
    private string error;
    private bool cargando = true;
    private Guid carritoId;
    private int? errorProductoId;
    private string errorProductoMsg;
    private string busquedaActual; // Variable interna para tracking
    
    [Parameter] 
    [SupplyParameterFromQuery(Name = "busqueda")]
    public string busqueda { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var carritoIdStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (string.IsNullOrEmpty(carritoIdStr) || !Guid.TryParse(carritoIdStr, out carritoId) || carritoId == Guid.Empty)
        {
            // No hay carrito, crear uno nuevo
            carritoId = await CrearNuevoCarrito();
            await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
        }

        await CargarProductos();
    }    protected override async Task OnParametersSetAsync()
    {
        // Este método se ejecuta cada vez que cambian los parámetros de la URL
        await CargarProductos();
        StateHasChanged(); // Forzar re-render
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setTimeout", "document.querySelector('input[type=search]').focus()", 100);
        }
    }    private async Task CargarProductos()
    {
        try
        {
            cargando = true;
            error = null;
            
            // Solo cargar si cambió la búsqueda o es la primera carga
            if (busquedaActual != busqueda || productos == null)
            {
                busquedaActual = busqueda;
                productos = await ApiService.ObtenerProductosAsync(busqueda);
                  if (productos == null || productos.Count == 0)
                {
                    // Notificación de "sin resultados" eliminada - es evidente en la UI
                }
                // Notificación de resultados encontrados eliminada - el usuario ve la lista inmediatamente
            }
        }        catch (Exception ex)
        {
            error = ex.Message;
            NotificationService.ShowConnectionError();
        }
        finally
        {
            cargando = false;
        }
    }    private async Task AgregarAlCarrito(int productoId)
    {
        errorProductoId = null;
        errorProductoMsg = null;
        
        var (ok, errorMsg) = await ApiService.AgregarProductoAsync(carritoId, productoId);        if (!ok && errorMsg.Contains("carrito no existe"))
        {
            // El carrito no existe, crear uno nuevo silenciosamente
            carritoId = await CrearNuevoCarrito();
            await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
            
            // Intentar agregar el producto nuevamente
            var (ok2, errorMsg2) = await ApiService.AgregarProductoAsync(carritoId, productoId);            if (ok2)
            {
                var producto = productos?.FirstOrDefault(p => p.id == productoId);
                var nombreProducto = producto?.nombre ?? "Producto";
                
                NotificationService.ShowProductAdded(nombreProducto);
                
                // Disparar evento de actualización del carrito
                await JS.InvokeVoidAsync("tiendaHelpers.triggerCartUpdate");
                
                await Task.Delay(1000);
                Navigation.NavigateTo("/carrito");
            }
            else
            {
                errorProductoId = productoId;
                errorProductoMsg = $"No se pudo agregar el producto: {errorMsg2}";
                NotificationService.ShowError(
                    errorMsg2 ?? "Error desconocido", 
                    "Error al agregar producto"
                );
            }
        }        else if (ok)
        {
            var producto = productos?.FirstOrDefault(p => p.id == productoId);
            var nombreProducto = producto?.nombre ?? "Producto";
            
            NotificationService.ShowProductAdded(nombreProducto);
            
            // Disparar evento de actualización del carrito
            await JS.InvokeVoidAsync("tiendaHelpers.triggerCartUpdate");
            
            await Task.Delay(1000);
            Navigation.NavigateTo("/carrito");
        }
        else
        {
            errorProductoId = productoId;
            errorProductoMsg = $"No se pudo agregar el producto: {errorMsg}";
            
            var producto = productos?.FirstOrDefault(p => p.id == productoId);
            var nombreProducto = producto?.nombre ?? "Producto";
              if (errorMsg?.Contains("stock") == true)
            {
                NotificationService.ShowOutOfStock(nombreProducto);
            }
            else
            {
                NotificationService.ShowError(
                    errorMsg ?? "Error desconocido", 
                    "Error al agregar producto"
                );
            }
        }
    }

    private async Task<Guid> CrearNuevoCarrito()
    {
        var response = await Http.PostAsync("http://localhost:5184/carritos", null);
        response.EnsureSuccessStatusCode();
        var json = await response.Content.ReadAsStringAsync();
        // El backend devuelve: { "id": "guid" }
        var obj = System.Text.Json.JsonDocument.Parse(json);
        return obj.RootElement.GetProperty("id").GetGuid();
    }
}
