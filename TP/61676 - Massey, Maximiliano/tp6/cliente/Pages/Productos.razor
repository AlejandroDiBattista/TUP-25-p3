@page "/productos"
@using cliente.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ApiService ApiService
@inject NavigationManager Navigation

<div class="bg-tienda-orange tienda-content">
    <h2 class="text-center mb-4">ðŸŽ® Productos disponibles</h2>

    @if (mensaje != null)
    {
        <div class="alert alert-info text-center">@mensaje</div>
    }
    else if (cargando)
    {
        <div class="alert alert-info text-center">Cargando productos...</div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger text-center">Error: @error</div>
    }
    else if (productos != null && productos.Count > 0)
    {
        <div class="row justify-content-center">
            @foreach (var p in productos)
            {
                <div class="col-md-4 mb-4">
                    <div class="producto-box p-3 h-100">
                        <div class="product-card">
                            <img src="@p.imagen" class="product-card-img" alt="@p.nombre">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title text-primary">@p.nombre</h5>
                                <p class="product-card-desc">@p.descripcion</p>
                                <p class="card-text mb-1"><b>Precio:</b> <span class="text-success">$@p.precio</span></p>
                                <p class="card-text mb-2"><b>Stock:</b> <span class="text-dark">@p.stock</span></p>
                                <button class="btn btn-success mt-auto w-100" @onclick="() => AgregarAlCarrito(p.id)" disabled="@(p.stock < 1)">
                                    <span aria-hidden="true">ðŸŽ¯</span> Agregar al carrito
                                </button>
                            </div>
                        </div>
                        @if (errorProductoId == p.id && errorProductoMsg != null)
                        {
                            <div class="alert alert-danger mt-2">@errorProductoMsg</div>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning text-center">No hay productos disponibles.</div>
    }
</div>

@code {
    private List<ProductoDto> productos;
    private string error;
    private bool cargando = true;
    private Guid carritoId;
    private bool creandoCarrito = false;
    private string mensaje;
    private int? errorProductoId = null;
    private string errorProductoMsg = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cargando = true;
            mensaje = null;
            // Intentar recuperar carritoId de localStorage (si existe)
            var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
            if (!Guid.TryParse(idStr, out carritoId) || carritoId == Guid.Empty)
            {
                creandoCarrito = true;
                carritoId = await ApiService.CrearCarritoAsync();
                await JS.InvokeAsync<object>("localStorage.setItem", "carritoId", carritoId.ToString());
                creandoCarrito = false;
            }
            productos = await ApiService.ObtenerProductosAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
        }
    }

    [Inject] IJSRuntime JS { get; set; }

    private async Task AgregarAlCarrito(int productoId)
    {
        mensaje = null;
        errorProductoId = null;
        errorProductoMsg = null;
        var (ok, errorMsg) = await ApiService.AgregarProductoAsync(carritoId, productoId);
        if (ok)
        {
            mensaje = "Producto agregado al carrito";
            Navigation.NavigateTo("/carrito");
        }
        else
        {
            errorProductoId = productoId;
            errorProductoMsg = $"No se pudo agregar el producto: {errorMsg}";
        }
    }
}
