@page "/"
@using cliente.Models
@using cliente.Services
@inject ApiService apiService
@inject CarritoService carrito

<div class="container mt-4">
    <div class="text-center py-4 mb-5" style="background-color: black; color: white;">
    <img src="imagenes/logotienda.png" alt="Logo RetroFutbolStore" style="max-width: 120px;" class="mb-3" />
    <h1 class="text-uppercase fw-bold" style="font-size: 2.5rem;">RetroFutbolStore</h1>
    <p class="fs-5 text-light mb-0">
        Reviví la historia del fútbol con camisetas icónicas de todos los tiempos.
    </p>
</div>



    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="text-center flex-grow-1">Catálogo de camisetas retro</h2>
        <a href="/Carrito" class="position-relative d-inline-block me-2">
            <img src="imagenes/carrito.png" alt="Carrito" style="width: 70px;" />
            @if (cantidadItems > 0)
            {
                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @cantidadItems
                </span>
            }
        </a>
    </div>

    <div class="row justify-content-center mb-4">
        <div class="col-md-6">
            <input type="text" class="form-control" placeholder="Buscar camisetas..." @bind="busqueda" @bind:event="oninput" />
        </div>
    </div>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div class="alert alert-success text-center" role="alert">@mensaje</div>
    }

    <div class="row justify-content-center">
        @foreach (var producto in productosFiltrados)
        {
            <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                <div class="card h-100 text-center card-hover">
                    <img src="@producto.ImagenUrl" class="card-img-top img-fluid" style="max-height: 200px; object-fit: contain;" />
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p><strong>Precio:</strong> $@producto.Precio</p>
                        <p><strong>Stock:</strong> @producto.Stock</p>
                        <button class="btn btn-primary mt-auto" @onclick="() => AgregarAlCarritoAsync(producto)"
                                disabled="@(producto.Stock <= 0)">
                            Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .card-hover:hover {
        transform: scale(1.05);
        transition: transform 0.2s;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }
</style>

@code {
    private List<Producto> productos = new();
    private string busqueda = "";
    private string mensaje = "";
    private int cantidadItems = 0;

    protected override async Task OnInitializedAsync()
    {
        carrito.OnChange += ActualizarContador;
        await carrito.ActualizarCantidad();
        cantidadItems = carrito.TotalItems;
        await CargarProductos();
    }

    void ActualizarContador()
    {
        cantidadItems = carrito.TotalItems;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnParametersSetAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        productos = await apiService.ObtenerProductosAsync();
    }

    private IEnumerable<Producto> productosFiltrados =>
        string.IsNullOrWhiteSpace(busqueda)
            ? productos
            : productos.Where(p => p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase));

    private async Task AgregarAlCarritoAsync(Producto producto)
    {
        await carrito.AgregarProducto(producto);
        mensaje = $"“{producto.Nombre}” agregado exitosamente.";
        StateHasChanged();
        await Task.Delay(3000);
        mensaje = "";
        StateHasChanged();
    }
}
