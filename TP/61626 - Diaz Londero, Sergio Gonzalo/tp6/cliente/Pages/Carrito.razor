@* --------------------------------------------------------------------------------------
   Carrito.razor - Página para ver y modificar el carrito de compras
   Explicación muy detallada, línea por línea, como para un niño de 5 años.
   -------------------------------------------------------------------------------------- *@

@page "/carrito"  
@using cliente.Services 
@inject CarritoService CarritoService 
@inject NavigationManager Navigation  
@inject ApiService ApiService
@inject IJSRuntime JS
@inject ProductoService ProductoService

<PageTitle>Carrito de Compras</PageTitle>  

<div class="container-fluid" style="margin-top: 50px;">  
 <nav class="navbar navbar-expand-lg bg-body-tertiary fixed-top"> 
  <div class="container-fluid">
    <a class="navbar-brand" href="#">NextGen</a> 
    <button
      class="navbar-toggler"
      type="button"
      data-bs-toggle="collapse"
      data-bs-target="#navbarSupportedContent"
      aria-controls="navbarSupportedContent"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <span class="navbar-toggler-icon"></span>
    </button>
     <a class="nav-link active mt-1" aria-current="page" href="#">Carrito de compras</a> 
    
    <div class="d-flex ms-auto align-items-center gap-3"> 
      <a class="nav-link" href="/confirmacion">
        <i class="bi bi-bag-fill fs-3"></i>  
      </a>
      <a class="btn btn-primary" href="/">Volver</a>  
    </div>
  </div>
</nav>

  <div class="container-fluid mt-4">  
    @if (CarritoService.Items.Count == 0) 
    {
        <p class="mt-2 mx-5">No hay productos en el carrito.</p> 
    }
    else  
    {
        <table class="table"> 
          <thead>
            <tr>
              <th>Producto</th>
              <th>Precio</th>
              <th>Cantidad</th>
              <th>Total</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            @foreach (var item in CarritoService.Items)  
            {
                <tr>
                  <td>@item.Producto.Nombre</td>  
                  <td>$@item.Producto.Precio</td> 
                  <td>
                    <button class="btn btn-secondary btn-sm me-1" @onclick="() => CambiarCantidad(item.Producto.Id, -1)">-</button> 
                    @item.Cantidad 
                    <button class="btn btn-secondary btn-sm ms-1" @onclick="() => CambiarCantidad(item.Producto.Id, 1)">+</button>  
                  </td>
                  <td>$@(item.Producto.Precio * item.Cantidad)</td> 
                  <td>
                    <button
                      class="btn btn-danger btn-sm"
                      @onclick="async () => await EliminarDelCarritoYActualizar(item.Producto.Id)"
                    >
                      Eliminar
                    </button> 
                  </td>
                </tr>
            }
          </tbody>
        </table>

        <h4>Total: $@CarritoService.CalcularTotal()</h4> 
        <button class="btn btn-warning me-2" @onclick="VaciarCarrito">
          Vaciar Carrito
        </button> 
        <button class="btn btn-success" @onclick="ConfirmarCompra">
          Confirmar compra
        </button>  
    }
  </div>
</div>

@code {
    // Función para eliminar un producto del carrito
    private void EliminarDelCarrito(int productoId)
    {
        CarritoService.EliminarProducto(productoId);  // Le decimos al servicio que lo saque
    }

    // Función para eliminar un producto del carrito y actualizar stock en el home
    private async Task EliminarDelCarritoYActualizar(int productoId)
    {
        // Llama primero al backend para eliminar el producto y regenerar el stock real
        await ApiService.EliminarProductoDelCarritoAsync(productoId);
        // Luego actualiza el carrito en memoria
        CarritoService.EliminarProducto(productoId);
        // Refresca productos desde la API para sincronizar stock real
        var productosApi = await ApiService.ObtenerProductosAsync();
        ProductoService.ActualizarProductos(productosApi);
        StateHasChanged();
    }

    private async Task ActualizarHomeStock()
    {
        // Llama al evento del Home para refrescar productos
        // Si el usuario está en Home, se actualizará automáticamente
        // Si no, no pasa nada
        await JS.InvokeVoidAsync("eval", "window.dispatchEvent(new Event('carrito-cambio'))");
    }

    // Función para vaciar todo el carrito
    private async Task VaciarCarrito()
    {
        // Vacía el carrito en el backend
        await ApiService.VaciarCarritoAsync();
        // Refresca productos desde la API para sincronizar stock real
        var productosApi = await ApiService.ObtenerProductosAsync();
        ProductoService.ActualizarProductos(productosApi);
        // Vacía el carrito en memoria y regenera el stock local
        CarritoService.VaciarCarrito();
        StateHasChanged();
    }

    // Función para sumar o restar cantidad de un producto
    private async Task CambiarCantidad(int productoId, int delta)
    {
        // Solo permitir cambios de +1 o -1
        if (delta != 1 && delta != -1) return;
        var item = CarritoService.Items.FirstOrDefault(i => i.Producto.Id == productoId);
        if (item == null) return;
        int nuevaCantidad = item.Cantidad + delta;
        if (nuevaCantidad < 1) return;
        // Llamar al backend para actualizar la cantidad
        bool ok = await ApiService.CambiarCantidadProductoAsync(productoId, delta);
        if (ok)
        {
            CarritoService.CambiarCantidad(productoId, delta);
        }
        else
        {
            // Opcional: mostrar mensaje de error
        }
    }

    // Función para ir a la página de confirmación de compra
    private void ConfirmarCompra()
    {
        Navigation.NavigateTo("/confirmacion");  // Cambiamos de página
    }

    protected override void OnInitialized()
    {
        CarritoService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CarritoService.OnChange -= StateHasChanged;
    }
}
