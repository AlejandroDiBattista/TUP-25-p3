@page "/catalogo"
@inject HttpClient Http
@inject CarritoService Carrito

<div class="contenedor">
    <h3>Catálogo de productos</h3>
    <div class="buscador">
        <label for="busqueda">Buscar producto:</label>
        <input id="busqueda" @bind="textoBusqueda" placeholder="Ej: celular, cargador..." />
        <button @onclick="Buscar" class="buscar">Buscar</button>
        <button @onclick="Limpiar" class="limpiar">Limpiar</button>
    </div>
</div>

@if (productos == null)
{
    <p class="mensaje-centrado">Cargando productos...</p>
}
else if (!productos.Any())
{
    <p class="mensaje-centrado mensaje-vacio">No se encontraron productos.</p>
}
else
{
    <div class="productos">
        @foreach (var p in productos)
        {
            <div class="producto">
                <img src="@p.imagenUrl" alt="@p.nombre" width="150" />
                <h4>@p.nombre</h4>
                <p>@p.descripcion</p>
                <p><strong>Precio:</strong> $@p.precio</p>
                <p><strong>Stock:</strong> @p.stock</p>
                <button @onclick="() => Agregar(p.id)" disabled="@(!PuedeAgregar(p))">Agregar al carrito</button>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="mensaje-exito">@mensaje</div>
}

@code {
    List<ProductoDTO>? productos;
    string mensaje = "";
    CancellationTokenSource? cts; // Para controlar los mensajes al cargar productos al carrito

    protected override async Task OnInitializedAsync()
    {
        await Carrito.InicializarCarritoAsync();
        await CargarProductos(textoBusqueda);
    }

    async Task Agregar(int id)
    {
        // Cancelar y borrar cualquier mensaje anterior
        cts?.Cancel();
        mensaje = "";
        StateHasChanged(); // Se fuerza el borrado del mensaje en pantalla
        await Task.Delay(50); // Pausa breve para que se haga visible el cambio

        // Se crea una nueva fuente de cancelación para el mensaje
        cts = new CancellationTokenSource();

        // Agregar producto
        var ok = await Carrito.AgregarProducto(id);
        mensaje = ok ? "Producto agregado al carrito." : "No se pudo agregar el producto.";

        StateHasChanged(); // Para mostrar el mensaje

        try
        {

            // Esperar 2 segundos antes de borrar mensaje, a menos que se cancele antes
            await Task.Delay(2000, cts.Token);
            mensaje = "";
            StateHasChanged();
        }
        catch (TaskCanceledException)
        {
            // No hace nada si fue cancelado por otro click
        }
    }

    bool PuedeAgregar(ProductoDTO p) => p.stock > 0;

    async Task CargarProductos(string valorBuscado)
    {
        string url = "http://localhost:5184/productos";

        if (!string.IsNullOrWhiteSpace(valorBuscado))
            url += $"?buscar={Uri.EscapeDataString(valorBuscado)}";

        productos = await Http.GetFromJsonAsync<List<ProductoDTO>>(url);
    }

    string textoBusqueda = "";

    async Task Buscar() => await CargarProductos(textoBusqueda);

    async Task Limpiar()
    {
        textoBusqueda = "";
        await CargarProductos("");
    }

    public class ProductoDTO
    {
        public int id { get; set; }
        public string nombre { get; set; } = "";
        public string descripcion { get; set; } = "";
        public decimal precio { get; set; }
        public int stock { get; set; }
        public string imagenUrl { get; set; } = "";
    }
}
