@page "/"

@inject HttpClient Http
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header>
    <h1 class="logo" style="cursor:pointer" @onclick='() => Nav.NavigateTo("/")'>ODISEOSTORE</h1>
    <input class="buscador" value="@busqueda" @oninput="BusquedaChanged" placeholder="Buscar productos..." />
    <div class="carrito-icono" style="float:right;cursor:pointer" @onclick='() => Nav.NavigateTo("/carrito")'>
        ðŸ›’ <span class="carrito-contador">@TotalCarrito</span>
    </div>
</header>

<div class="contenedor">
    <div class="productos">
        @if (productos == null)
        {
            <p>Cargando productos...</p>
        }
        else if (!productos.Any())
        {
            <p>No se encontraron productos.</p>
        }
        else
        {
            @foreach (var p in productos)
            {
                <div class="producto">
                    <img src="@p.ImagenUrl" alt="@p.Nombre" class="producto-img" />
                    <h3>@p.Nombre</h3>
                    <div class="producto-desc">@p.Descripcion</div>
                    <div class="precio">$@p.Precio</div>
                    <div class="stock">Stock: @p.Stock</div>
                    <button class="btn-agregar" @onclick='() => AgregarAlCarrito(p)' disabled="@(p.Stock == 0)">COMPRAR</button>
                </div>
            }
        }
    </div>
</div>

@code {
    string busqueda = "";
    List<ProductoDto> productos;
    string carritoId;
    int TotalCarrito = 0;

    protected override async Task OnInitializedAsync()
    {
        carritoId = await ObtenerOCrearCarrito();
        
        await CargarProductos();
        await CargarTotalCarrito();
    }

    async Task CargarProductos()
    {
        var url = "/productos" + (string.IsNullOrWhiteSpace(busqueda) ? "" : $"?q={Uri.EscapeDataString(busqueda)}");
        productos = await Http.GetFromJsonAsync<List<ProductoDto>>(url);
    }

    async Task BusquedaChanged(ChangeEventArgs e)
    {
        busqueda = e.Value?.ToString() ?? "";
        await CargarProductos();
    }

    async Task AgregarAlCarrito(ProductoDto p)
    {
        carritoId = await ObtenerOCrearCarrito();

        var resp = await Http.PutAsync($"/carritos/{carritoId}/{p.Id}", null);

        if (resp.IsSuccessStatusCode)
        {
        
            p.Stock = Math.Max(0, p.Stock - 1);
            await CargarTotalCarrito();
        }
    }

    async Task<string> ObtenerOCrearCarrito()
    {
        var id = await localStorage.GetItemAsync<string>("carritoId");
        if (!string.IsNullOrEmpty(id))
        {
            var resp = await Http.GetAsync($"/carritos/{id}");
            if (resp.IsSuccessStatusCode)
                return id;
            await localStorage.RemoveItemAsync("carritoId");
        }
        var resp2 = await Http.PostAsync("/carritos", null);
        var obj = await resp2.Content.ReadFromJsonAsync<CarritoIdDto>();
        id = obj?.carritoId;
        if (!string.IsNullOrEmpty(id))
            await localStorage.SetItemAsync("carritoId", id);
        return id;
    }

    async Task CargarTotalCarrito()
    {
        carritoId = await ObtenerOCrearCarrito();
        var items = await Http.GetFromJsonAsync<List<ItemCarritoDto>>($"/carritos/{carritoId}");
        TotalCarrito = items?.Sum(i => i.Cantidad) ?? 0;
    }

    class ProductoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public decimal Precio { get; set; }
        public int Stock { get; set; }
        public string ImagenUrl { get; set; }
    }
    class CarritoIdDto { public string carritoId { get; set; } }
    class ItemCarritoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public decimal Precio { get; set; }
        public int Stock { get; set; }
        public int Cantidad { get; set; }
        public string ImagenUrl { get; set; }
    }
}