@page "/confirmacion"
@inject HttpClient Http
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<header>
    <h1 class="logo" style="cursor:pointer" @onclick='() => Nav.NavigateTo("/")'>ODISEOSTORE</h1>
</header>

@if (items == null)
{
    <p>Cargando...</p>
}
else if (!items.Any())
{
    <p>El carrito está vacío.</p>
    <span class="volver" @onclick='() => Nav.NavigateTo("/")'>VOLVER A COMPRA</span>
}
else
{
    <div class="confirmacion">
        <h2>Confirmación de compra</h2>
        <div class="resumen">Total de ítems: <b>@TotalCarrito</b> | Importe total: <b>$@TotalCarritoImporte</b></div>
        <EditForm Model="@form" OnValidSubmit="ConfirmarCompra">
            <div class="formulario">
                <label>Nombre: <InputText @bind-Value="form.Nombre" required class="input-form" /></label>
                <label>Apellido: <InputText @bind-Value="form.Apellido" required class="input-form" /></label>
                <label>Email: <InputText @bind-Value="form.Email" type="email" required class="input-form" /></label>
                <button class="btn-confirmar" type="submit">Confirmar</button>
            </div>
        </EditForm>
        <span class="volver" @onclick='() => Nav.NavigateTo("/")'>VOLVER A COMPRA</span>
        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="mensaje">@mensaje</div>
        }
    </div>
}

@code {
    string carritoId;
    List<ItemCarritoDto> items;
    CompraForm form = new();
    string mensaje = "";

    int TotalCarrito => items?.Sum(i => i.Cantidad) ?? 0;
    decimal TotalCarritoImporte => items?.Sum(i => i.Precio * i.Cantidad) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        carritoId = await ObtenerOCrearCarrito();
        await CargarCarrito();
    }

    async Task CargarCarrito()
    {
        items = await Http.GetFromJsonAsync<List<ItemCarritoDto>>($"/carritos/{carritoId}");
    }

    async Task ConfirmarCompra()
    {
        var compra = new
        {
            nombre = form.Nombre,
            apellido = form.Apellido,
            email = form.Email,
            items = items.Select(i => new { productoId = i.Id, cantidad = i.Cantidad, precioUnitario = i.Precio }).ToList()
        };
        var resp = await Http.PutAsJsonAsync($"/carritos/{carritoId}/confirmar", compra);
        if (resp.IsSuccessStatusCode)
        {
            mensaje = "¡Compra confirmada! ¡Gracias por tu compra, " + form.Nombre + "!";
            await Http.DeleteAsync($"/carritos/{carritoId}");
           await Task.Delay(2000);
            Nav.NavigateTo("/");    
 
        }
        else
        {
            mensaje = "Error al confirmar compra: " + await resp.Content.ReadAsStringAsync();
        }
    }

    async Task<string> ObtenerOCrearCarrito()
    {
        var id = await localStorage.GetItemAsync<string>("carritoId");
        if (string.IsNullOrEmpty(id))
        {
            var resp = await Http.PostAsync("/carritos", null);
            var obj = await resp.Content.ReadFromJsonAsync<CarritoIdDto>();
            id = obj?.CarritoId;
            if (!string.IsNullOrEmpty(id))
                await localStorage.SetItemAsync("carritoId", id);
        }
        return id;
    }

    class ItemCarritoDto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public decimal Precio { get; set; }
        public int Stock { get; set; }
        public int Cantidad { get; set; }
        public string ImagenUrl { get; set; }
    }
    
    class CarritoIdDto { 
        public string CarritoId { get; set; } 
    }

    class CompraForm
    {
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public string Email { get; set; }
    }
}