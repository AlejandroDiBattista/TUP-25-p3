@page "/"
@using cliente
@using cliente.Services
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="catalogo-container">
    <div class="catalogo-header">
        <h1 class="catalogo-titulo">Catálogo de Productos</h1>
        @if (!string.IsNullOrEmpty(Query))
        {
            <p class="resultado-busqueda">Resultados para: "<strong>@Query</strong>"</p>
        }
    </div>

    @if (cargando)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Cargando productos...</p>
        </div>
    }
    else if (!productos.Any())
    {
        <div class="no-productos">
            <h3>No se encontraron productos</h3>
            <p>Intenta con otros términos de búsqueda</p>
        </div>
    }
    else
    {
        <div class="productos-grid">
            @foreach (var producto in productos)
            {
                <div class="producto-card">
                    <div class="producto-imagen">
                        <img src="@producto.ImagenUrl" alt="@producto.Nombre" 
                             onerror="this.src='https://via.placeholder.com/300x200?text=Sin+Imagen'" />
                        @if (producto.Stock <= 3 && producto.Stock > 0)
                        {
                            <div class="stock-badge stock-bajo">¡Últimas @producto.Stock unidades!</div>
                        }
                        else if (producto.Stock == 0)
                        {
                            <div class="stock-badge stock-agotado">Sin Stock</div>
                        }
                    </div>
                    
                    <div class="producto-info">
                        <h3 class="producto-nombre">@producto.Nombre</h3>
                        <p class="producto-descripcion">@producto.Descripcion</p>
                        
                        <div class="producto-detalles">
                            <div class="precio-stock">
                                <span class="producto-precio">$@producto.Precio.ToString("N0")</span>
                                <span class="producto-stock">Stock: @producto.Stock</span>
                            </div>
                        </div>
                        
                        <button class="btn-agregar @(producto.Stock == 0 ? "disabled" : "")" 
                                @onclick="() => AgregarAlCarrito(producto)"
                                disabled="@(producto.Stock == 0 || agregandoProducto == producto.Id)">
                            @if (agregandoProducto == producto.Id)
                            {
                                <span class="btn-loading">⏳</span>
                                <span>Agregando...</span>
                            }
                            else if (producto.Stock == 0)
                            {
                                <span>Sin Stock</span>
                            }
                            else
                            {
                                <span>🛒</span>
                                <span>Agregar al Carrito</span>
                            }
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .catalogo-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .catalogo-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .catalogo-titulo {
        font-size: 3rem;
        font-weight: bold;
        color: white;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }

    .resultado-busqueda {
        color: rgba(255, 255, 255, 0.9);
        font-size: 1.2rem;
        margin-bottom: 1rem;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 4rem;
        color: white;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .no-productos {
        text-align: center;
        color: white;
        padding: 4rem;
    }

    .productos-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        margin-top: 2rem;
    }

    .producto-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
        backdrop-filter: blur(10px);
    }

    .producto-card:hover {
        transform: translateY(-10px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    .producto-imagen {
        position: relative;
        height: 200px;
        overflow: hidden;
    }

    .producto-imagen img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .producto-card:hover .producto-imagen img {
        transform: scale(1.1);
    }

    .stock-badge {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        color: white;
    }

    .stock-bajo {
        background: linear-gradient(45deg, #ff6b35, #f7931e);
        animation: pulse 2s infinite;
    }

    .stock-agotado {
        background: linear-gradient(45deg, #ff4757, #c44569);
    }

    .producto-info {
        padding: 1.5rem;
    }

    .producto-nombre {
        font-size: 1.3rem;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .producto-descripcion {
        color: #7f8c8d;
        margin-bottom: 1rem;
        line-height: 1.4;
    }

    .producto-detalles {
        margin-bottom: 1.5rem;
    }

    .precio-stock {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .producto-precio {
        font-size: 1.5rem;
        font-weight: bold;
        background: linear-gradient(45deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .producto-stock {
        background: rgba(102, 126, 234, 0.1);
        color: #667eea;
        padding: 0.3rem 0.8rem;
        border-radius: 15px;
        font-size: 0.9rem;
        font-weight: 600;
    }

    .btn-agregar {
        width: 100%;
        padding: 1rem;
        border: none;
        border-radius: 15px;
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-agregar:hover:not(.disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }

    .btn-agregar.disabled {
        background: #bdc3c7;
        cursor: not-allowed;
        transform: none;
    }

    .btn-loading {
        animation: spin 1s linear infinite;
    }

    @@media (max-width: 768px) {
        .catalogo-container {
            padding: 1rem;
        }

        .catalogo-titulo {
            font-size: 2rem;
        }

        .productos-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
    }
</style>

@code {
#nullable enable
    [Parameter]
    [SupplyParameterFromQuery(Name = "query")]
    public string? Query { get; set; }

    private List<Producto> productos = new();
    private bool cargando = true;
    private int? agregandoProducto = null;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    protected override async Task OnParametersSetAsync()
    {
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        cargando = true;
        StateHasChanged();

        try
        {
            productos = await ApiService.ObtenerProductosAsync(Query);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error al cargar productos: {ex.Message}");
            productos = new List<Producto>();
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task AgregarAlCarrito(Producto producto)
    {
        if (producto.Stock == 0 || agregandoProducto == producto.Id)
            return;

        agregandoProducto = producto.Id;
        StateHasChanged();

        try
        {
            var exito = await ApiService.AgregarProductoAsync(producto.Id);
            
            if (exito)
            {
                // La alerta puede ser molesta, considera una notificación menos intrusiva
                // await JSRuntime.InvokeVoidAsync("alert", $"¡{producto.Nombre} agregado al carrito!");
                
                Navigation.NavigateTo("/carrito");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al agregar el producto al carrito");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al agregar el producto al carrito");
        }
        finally
        {
            agregandoProducto = null;
            StateHasChanged();
        }
    }
}