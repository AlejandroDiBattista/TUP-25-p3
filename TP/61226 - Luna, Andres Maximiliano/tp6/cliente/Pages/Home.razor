@page "/"
@using cliente.Services
@using cliente.Models
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation
@inject ApiService ApiService
@inject CarritoService CarritoService
 

<PageTitle>Productos</PageTitle>



<header>
    <h2>Productos</h2>
<div class="contenedor-principal">
    <div class="header-barra">
        <input type="text" placeholder="Buscar productos..." @bind="busqueda" class="form-control" style="max-width: 300px;" />
        <button class="btn btn-primary" @onclick="BuscarProductos">Buscar</button>
        <button class="btn btn-light" @onclick="IrAlCarrito">
            🛒 Total en carrito: @CarritoService.ObtenerCantidadTotalEnCarrito() productos
        </button>
    </div>
</div>
</header>

<body>
<div class="productos-grid">
    @foreach (var producto in productosFiltrados)
    {
        <div class="producto-card">
            <strong>@producto.Nombre</strong>
            <p>Precio: $@producto.Precio</p>
            <p>Descripción: @producto.Descripcion</p>
            <p>Stock: @producto.Stock</p>


            
            <img src="@producto.ImagenUrl" alt="imagen de @producto.Nombre" style="max-width: 100%; height: auto;" />
            

            <div class="controles-cantidad">
                <button @onclick="() => DisminuirCantidad(producto)">-</button>
                <span>@producto.Cantidad</span>
                <button @onclick="() => AumentarCantidad(producto)">+</button>
            </div>

            <button class="btn btn-success mt-2" @onclick="() => AgregarProducto(producto)">
            Agregar al carrito
            </button>
        </div>
    }
</div>
</body>

@code {
    
    private List<Producto> productos = new(); 
    private List<Producto> productosFiltrados = new();
    private string busqueda = "";
    private string error;
    private bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cargando = true;
            productos = await ApiService.ObtenerProductosAsync();
            productosFiltrados = productos;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
        }
    }
 
     void AumentarCantidad(Producto producto)
    {
        producto.Cantidad++;
    }

        void DisminuirCantidad(Producto producto)
    {
        if (producto.Cantidad > 0)
            producto.Cantidad--;
    }

     void IrAlCarrito()
    {
        NavigationManager.NavigateTo("/carrito");
    }

    void AgregarProducto(Producto producto)
    {
        for (int i = 0; i < producto.Cantidad; i++)
        {
            CarritoService.AgregarAlCarrito(producto);
        }
        producto.Cantidad = 0;
    }

    private void BuscarProductos()
    {
        productosFiltrados = productos
            .Where(p => p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void CompraYRedirigir()
    {
        CarritoService.VaciarCarrito();
        Navigation.NavigateTo("/", true);
    }
}