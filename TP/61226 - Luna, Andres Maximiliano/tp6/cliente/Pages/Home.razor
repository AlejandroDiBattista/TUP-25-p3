@page "/"
@using cliente.Services
@using cliente.Models
@inject ApiService ApiService
@inject CarritoService CarritoService
 

<PageTitle>Productos</PageTitle>


<h2>Productos</h2>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">
        Error : @error
    </div>
}

<div class="input-group mb-3">
    <input class="form-control" placeholder="Buscar productos..." @bind="busqueda" @bind:event="oninput" />
    <button class="btn btn-outline-secondary" type="button" @onclick="BuscarProductos">
        Buscar
    </button>
</div>


@if (cargando)
{
    <p>Cargando productos...</p>
}
else if (productosFiltrados.Count == 0)
{
    <p>No se encontraron productos.</p>
}
else
{
    <div class="row">
        @foreach (var producto in productosFiltrados)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" />
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p class="card-text text-muted">Stock disponible: @producto.Stock</p>
                        <p class="card-text fw-bold">$@producto.Precio</p>
                        <button class="btn btn-primary" @onclick="() => AgregarProducto(producto)">Agregar al carrito</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    
    private List<Producto> productos = new(); 
    private List<Producto> productosFiltrados = new();
    private string busqueda = string.Empty;
    private string error;
    private bool cargando = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cargando = true;
            productos = await ApiService.ObtenerProductosAsync();
            productosFiltrados = productos;
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
        }
    }
 

    void AgregarProducto(Producto producto)
    {
        CarritoService.AgregarAlCarrito(producto);
    }

    private void BuscarProductos()
    {
        productosFiltrados = productos
            .Where(p => p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

}