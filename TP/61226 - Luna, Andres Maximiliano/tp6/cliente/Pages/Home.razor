@page "/"
@using cliente.Services
@using cliente.Models
@inject NavigationManager NavigationManager
@inject NavigationManager Navigation
@inject ApiService ApiService
@inject CarritoService CarritoService
@inject ProductoService ProductoService
 

<PageTitle>Tienda online</PageTitle>




<header class="top-header"
    <h2 class="titulo">Productos</h2>
    <div class="barra-busqueda">
    <input type="text" placeholder="Buscar productos..." @bind="busqueda" class="form-control" style="max-width: 300px;" />
        <button class="btn btn-primary" @onclick="BuscarProductos">Buscar</button>
    </div>
    <button class="btn-carrito" @onclick="IrAlCarrito">
            🛒 Total en carrito: @CarritoService.ObtenerCantidadTotalEnCarrito() productos
        </button>
</header>

<main class="productos-grid">
    @foreach (var producto in productosFiltrados)
    {
        <div class="producto-card">
            <img src="@producto.ImagenUrl" alt="imagen de @producto.Nombre" style="max-width: 100%; height: auto;" />
            <strong>@producto.Nombre</strong>
            <p>Precio: $@producto.Precio</p>
            <p>Descripción: @producto.Descripcion</p>
            <p>Stock: @producto.StockDisponible</p>
          
            

            <button class="btn btn-success mt-2" 
                @onclick="() => AgregarAlCarrito(producto)" 
                disabled="@(!PuedeAgregar(producto))">
                Agregar al carrito
            </button>
        </div>
    }
</main>

@code {
    
    private List<Producto> productos = new(); 
    private List<Producto> productosFiltrados = new();
    private string busqueda = "";
    private string error;
    private bool cargando = false;

    protected override async Task OnInitializedAsync()
{
    try
    {
        cargando = true;
        productos = await ApiService.ObtenerProductosAsync();

        foreach (var producto in productos)
        {
            if (CarritoService.ObtenerStock(producto.Id) == 0)
            {
                CarritoService.EstablecerStock(producto.Id, producto.Stock);
            }

            producto.StockDisponible = CarritoService.ObtenerStock(producto.Id);
        }


        productosFiltrados = productos;
    }
    catch (Exception ex)
    {
        error = ex.Message;
    }
    finally
    {
        cargando = false;
    }
}

 
     void AumentarCantidad(Producto producto)
    {
        if (producto.Cantidad < producto.Stock)
        {
            producto.Cantidad++;
        }
    }


        void DisminuirCantidad(Producto producto)
    {
        if (producto.Cantidad > 0)
            producto.Cantidad--;
    }

     void IrAlCarrito()
    {
        NavigationManager.NavigateTo("/carrito");
    }

    void AgregarAlCarrito(Producto producto)
    {
        if (CarritoService.ObtenerStock(producto.Id) > 0)
        {
            CarritoService.AgregarAlCarrito(producto);
            CarritoService.RestarStock(producto.Id, 1);
            producto.StockDisponible = CarritoService.ObtenerStock(producto.Id);
        }
    }

    private void BuscarProductos()
    {
        productosFiltrados = productos
            .Where(p => p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void CompraYRedirigir()
    {
        CarritoService.VaciarCarrito();
        Navigation.NavigateTo("/", true);
    }

    bool PuedeAgregar(Producto producto)
    {
        return producto.StockDisponible > 0;
    }
    
}