// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using servidor;

#nullable disable

namespace servidor.Migrations
{
    [DbContext(typeof(TiendaDbContext))]
    [Migration("20250614052723_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("servidor.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailCliente")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("servidor.Models.ItemCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompraId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemsCompra");
                });

            modelBuilder.Entity("servidor.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Smartphone 6.5''",
                            ImagenUrl = "/img/celularx.jpg",
                            Nombre = "Celular X",
                            Precio = 150000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Bluetooth, cancelación de ruido",
                            ImagenUrl = "/img/auricularespro.jpg",
                            Nombre = "Auriculares Pro",
                            Precio = 35000m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Intel i7, 16GB RAM",
                            ImagenUrl = "/img/notebookultra.jpg",
                            Nombre = "Notebook Ultra",
                            Precio = 420000m,
                            Stock = 5
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "RGB, 12000 DPI",
                            ImagenUrl = "/img/mousegamer.jpg",
                            Nombre = "Mouse Gamer",
                            Precio = 12000m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Switch Blue, retroiluminado",
                            ImagenUrl = "/img/tecladomecanico.jpg",
                            Nombre = "Teclado Mecánico",
                            Precio = 18000m,
                            Stock = 12
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Full HD, IPS",
                            ImagenUrl = "/img/monitor24.jpg",
                            Nombre = "Monitor 24''",
                            Precio = 65000m,
                            Stock = 8
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "USB-C, 30W",
                            ImagenUrl = "/img/cargador.jpg",
                            Nombre = "Cargador Rápido",
                            Precio = 7000m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Tipo C, 1m",
                            ImagenUrl = "/img/cableusb.jpg",
                            Nombre = "Cable USB",
                            Precio = 2500m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Bebida cola",
                            ImagenUrl = "/img/gaseosa.jpg",
                            Nombre = "Gaseosa 1.5L",
                            Precio = 1200m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Cableados, 3.5mm",
                            ImagenUrl = "/img/auricularesinear.jpg",
                            Nombre = "Auriculares In-ear",
                            Precio = 4000m,
                            Stock = 18
                        });
                });

            modelBuilder.Entity("servidor.Models.ItemCompra", b =>
                {
                    b.HasOne("servidor.Models.Compra", "Compra")
                        .WithMany("Items")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("servidor.Models.Producto", "Producto")
                        .WithMany("ItemsCompra")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("servidor.Models.Compra", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("servidor.Models.Producto", b =>
                {
                    b.Navigation("ItemsCompra");
                });
#pragma warning restore 612, 618
        }
    }
}
