@page "/"
@inject ProductoService ProductoService
@inject CarritoService CarritoService
@inject NavigationManager NavigationManager
@using cliente.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Routing

<h3>Cat√°logo de Productos</h3>

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p>No se encontraron productos.</p>
}
else
{
    <div class="row">
        @foreach (var prod in productos)
        {
            <div class="col-md-4 col-lg-3 mb-4">
                <div class="card h-100">
                    <img src="@prod.ImagenUrl" class="card-img-top" alt="@prod.Nombre" style="height: 180px; object-fit: cover;" />
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@prod.Nombre</h5>
                        <p class="card-text">@prod.Descripcion</p>
                        <p class="mb-1"><b>Precio:</b> $ @prod.Precio.ToString()</p>
                        <p class="mb-2"><b>Stock:</b> @prod.Stock</p>
                        <button class="btn btn-primary mt-auto" disabled="@(@prod.Stock == 0)" @onclick="() => AgregarAlCarrito(prod.Id)">
                            Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    List<Producto>? productos;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? q { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        productos = await ProductoService.GetProductosAsync(q);
    }

    async Task AgregarAlCarrito(int productoId)
    {
        await CarritoService.AgregarProductoAsync(productoId, 1);
        NavigationManager.NavigateTo("/carrito");
    }
}
