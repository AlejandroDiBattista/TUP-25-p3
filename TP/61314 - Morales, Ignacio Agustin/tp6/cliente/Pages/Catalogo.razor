@using cliente.Models
@using cliente.shared
@using cliente.Services

@page "/"
@page "/home"
@inject ApiService Api
@inject CarritoService Carrito
@implements IDisposable

<h1 class="titulo-catalogo">Catálogo de Productos Apple</h1>

<input type="text" value="@filtro" @oninput="FiltrarProductos" placeholder="Buscar productos..." class="input-busqueda" />

@if (!string.IsNullOrEmpty(mensajeAlerta))
{
    <div class="alerta-exito">
        @mensajeAlerta
    </div>
}

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (productosFiltrados.Count == 0)
{
    <p>No se encontraron productos para "<strong>@filtro</strong>".</p>
}
else
{
    <div class="grid-productos">
        @foreach (var Producto in productosFiltrados)
        {
            <div class="justify-content-center card-producto">

                <img class="justify-content-center card-producto" src="@Producto.ImagenUrl" alt="@Producto.Nombre" width="200" />
                <h3 class="justify-content-center card-producto"> @Producto.Nombre</h3>
                <p class="justify-content-center card-producto">@Producto.Descripcion</p>
                <p class="justify-content-center card-producto"><strong>Precio:</strong> $@Producto.Precio</p>
                <p class="justify-content-center card-producto"><strong>Stock:</strong> @Producto.Stock unidades</p>
                <button @onclick="@(async () => await AgregarAlCarrito(Producto))"
                        disabled="@(!PuedeAgregar(Producto))"
                        class="boton-agregar">
                    Agregar al carrito
                </button>
                @if (mensajeAlerta != null && mensajeAlerta.Contains(Producto.Nombre))
                {
                    <p class="mensaje-agregado">@mensajeAlerta</p>
                }
            </div>
        }
    </div>
}

@code {
    List<Producto> productos = new();
    List<Producto> productosFiltrados = new();
    string mensajeAlerta;
    string filtro = "";

    protected override async Task OnInitializedAsync()
    {
        Carrito.ObtenerStockDisponible = (id) =>
       {
         var prod = productos.FirstOrDefault(p => p.Id == id);
         return prod?.Stock ?? 0;
      };
        productos = await Api.ObtenerProductos();
        productosFiltrados = productos.ToList();

        Carrito.CarritoActualizado -= OnCarritoActualizado;
        Carrito.CarritoActualizado += OnCarritoActualizado;
    }

    private async Task FiltrarProductos(ChangeEventArgs e)
    {
        filtro = e.Value?.ToString() ?? "";
        productosFiltrados = string.IsNullOrWhiteSpace(filtro)
            ? productos
            : productos.Where(p =>
                (!string.IsNullOrEmpty(p.Nombre) && p.Nombre.Contains(filtro, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(p.Descripcion) && p.Descripcion.Contains(filtro, StringComparison.OrdinalIgnoreCase))
            ).ToList();

        await InvokeAsync(StateHasChanged);
    }

    async Task AgregarAlCarrito(Producto producto)
    {
        bool pudoAgregar = Carrito.AgregarProducto(producto);
        if (pudoAgregar)
        {
            bool exito = await Api.RestarStockProducto(producto.Id);
            if (exito)
            {
                mensajeAlerta = $"{producto.Nombre} agregado al carrito ✅";
            }
            else
            {
                mensajeAlerta = $"❌ No se pudo actualizar el stock para {producto.Nombre}.";
            }
        }
        else
        {
            mensajeAlerta = $"⚠️ No se pudo agregar {producto.Nombre}. Stock insuficiente.";
        }

        StateHasChanged();
        await Task.Delay(3000);
        mensajeAlerta = null;
        StateHasChanged();
    }

    bool PuedeAgregar(Producto p) => p.Stock > 0;

    private async void OnCarritoActualizado(int productoId, int cambioCantidad)
    {
    var productoActual = productos.FirstOrDefault(p => p.Id == productoId);
    if (productoActual != null)
    {
        productoActual.Stock += cambioCantidad;
        await Api.SumarStockProducto(productoId, cambioCantidad); 
        await InvokeAsync(StateHasChanged);
    }
}

    public void Dispose()
    {
        Carrito.CarritoActualizado -= OnCarritoActualizado;
    }
}
