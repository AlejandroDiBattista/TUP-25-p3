@page "/carrito"
@using cliente.Modelos
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Nav

<h3 class="mt-3 mb-4">Carrito de compras</h3>

@if (carrito == null || !carrito.Any())
{
    <p>Tu carrito está vacío.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in carrito)
            {
                <tr>
                    <td>@item.Nombre</td>
                    <td>$@item.Precio</td>
                    <td>
                        <button class="btn btn-outline-secondary btn-sm me-1" @onclick="() => Restar(item)">–</button>
                        @item.Cantidad
                        <button class="btn btn-outline-secondary btn-sm ms-1" @onclick="() => Sumar(item)">+</button>
                    </td>
                    <td>$@(item.Precio * item.Cantidad)</td>
                    <td>
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => Eliminar(item)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <p class="fw-bold">Total: $@carrito.Sum(p => p.Precio * p.Cantidad)</p>

    <button class="btn btn-success" @onclick="ConfirmarCompra">Confirmar compra</button>
}

@code {
    private List<Producto> carrito = new();

    protected override async Task OnInitializedAsync()
    {
        carrito = await LocalStorage.GetItemAsync<List<Producto>>("carrito") ?? new();
    }

    private async Task Sumar(Producto item)
    {
        if (item.Cantidad < 10)
        {
            item.Cantidad++;
            await LocalStorage.SetItemAsync("carrito", carrito);
        }
    }

    private async Task Restar(Producto item)
    {
        if (item.Cantidad > 1)
        {
            item.Cantidad--;
        }
        else
        {
            carrito.Remove(item);
        }

        await LocalStorage.SetItemAsync("carrito", carrito);
    }

    private async Task Eliminar(Producto item)
    {
        carrito.Remove(item);
        await LocalStorage.SetItemAsync("carrito", carrito);
    }

    private async Task ConfirmarCompra()
    {
        carrito.Clear();
        await LocalStorage.RemoveItemAsync("carrito");
        Nav.NavigateTo("/productos", true);
    }
}