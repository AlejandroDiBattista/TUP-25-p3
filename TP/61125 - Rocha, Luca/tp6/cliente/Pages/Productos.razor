@page "/productos"
@inject HttpClient Http
@using cliente.Modelos

<h3 class="mb-3">Agregar producto</h3>

<div class="mb-4">
    <input @bind="nuevoProducto.Nombre" placeholder="Nombre" class="form-control mb-2" />
    <input @bind="nuevoProducto.Descripcion" placeholder="Descripci√≥n" class="form-control mb-2" />
    <input type="number" @bind="nuevoProducto.Precio" placeholder="Precio" class="form-control mb-2" />
    <input type="number" @bind="nuevoProducto.Stock" placeholder="Stock" class="form-control mb-2" />
    <input @bind="nuevoProducto.ImagenUrl" placeholder="URL Imagen" class="form-control mb-2" />
    <button class="btn btn-success" @onclick="AgregarProducto">Agregar</button>
</div>

<h4>üìã Lista de productos</h4>
@if (productos is null)
{
    <p><em>Cargando productos...</em></p>
}
else if (!productos.Any())
{
    <p>No hay productos disponibles.</p>
}
else
{
    <ul class="list-group">
        @foreach (var p in productos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <strong>@p.Nombre</strong> ‚Äì $@p.Precio<br />
                    <em>@p.Descripcion</em> ‚Äì Stock: @p.Stock
                </div>
                <div>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditarProducto(p)">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(p.Id)">Eliminar</button>
                </div>
            </li>
        }
    </ul>
}

@if (productoEditando != null)
{
    <h4>üìù Editar producto</h4>

    <div class="mb-4">
        <input @bind="productoEditando.Nombre" placeholder="Nombre" class="form-control mb-2" />
        <input @bind="productoEditando.Descripcion" placeholder="Descripci√≥n" class="form-control mb-2" />
        <input type="number" @bind="productoEditando.Precio" placeholder="Precio" class="form-control mb-2" />
        <input type="number" @bind="productoEditando.Stock" placeholder="Stock" class="form-control mb-2" />
        <input @bind="productoEditando.ImagenUrl" placeholder="URL Imagen" class="form-control mb-2" />
        <button class="btn btn-success" @onclick="GuardarEdicion">Guardar cambios</button>
        <button class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
    </div>
}

@code {
    private List<Producto> productos;
    private Producto nuevoProducto = new();
    private Producto productoEditando;

    protected override async Task OnInitializedAsync()
    {
        productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
    }

    private async Task AgregarProducto()
    {
        var response = await Http.PostAsJsonAsync("api/productos", nuevoProducto);
        if (response.IsSuccessStatusCode)
        {
            productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
            nuevoProducto = new(); // resetea el formulario
        }
    }

    private async Task EliminarProducto(int id)
    {
        var respuesta = await Http.DeleteAsync($"api/productos/{id}");
        if (respuesta.IsSuccessStatusCode)
        {
            productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
        }
    }

    private void EditarProducto(Producto producto)
    {
        productoEditando = new Producto
        {
            Id = producto.Id,
            Nombre = producto.Nombre,
            Descripcion = producto.Descripcion,
            Precio = producto.Precio,
            Stock = producto.Stock,
            ImagenUrl = producto.ImagenUrl
        };
    }

    private async Task GuardarEdicion()
    {
        var respuesta = await Http.PutAsJsonAsync($"api/productos/{productoEditando.Id}", productoEditando);
        if (respuesta.IsSuccessStatusCode)
        {
            productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
            productoEditando = null; // Cierra el formulario de edici√≥n
        }
    }

    private void CancelarEdicion()
    {
        productoEditando = null;
    }
}