@page "/productos"
@using cliente.Modelos

@inject HttpClient http

<h3 class="text-center mt-3">Gestión de Productos</h3>

@if (productoEditando != null)
{
    <EditForm Model="@productoEditando" OnValidSubmit="GuardarProducto">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="productoEditando.Nombre" />
        </div>

        <div class="mb-3">
            <label class="form-label">Descripción</label>
            <InputTextArea class="form-control" @bind-Value="productoEditando.Descripcion" />
        </div>

        <div class="mb-3">
            <label class="form-label">Precio</label>
            <InputNumber class="form-control" @bind-Value="productoEditando.Precio" />
        </div>

        <div class="mb-3">
            <label class="form-label">Stock</label>
            <InputNumber class="form-control" @bind-Value="productoEditando.Stock" />
        </div>

        <div class="mb-3">
            <label class="form-label">Imagen (URL)</label>
            <InputText class="form-control" @bind-Value="productoEditando.ImagenUrl" />
        </div>

        @if (!string.IsNullOrWhiteSpace(productoEditando.ImagenUrl))
        {
            <img src="@productoEditando.ImagenUrl" alt="Vista previa" class="img-thumbnail mb-3" style="max-height: 120px;" />
        }

        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-success me-2">Guardar</button>
            <button type="button" class="btn btn-secondary" @onclick="CancelarEdicion">Cancelar</button>
        </div>
    </EditForm>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="NuevoProducto">Agregar nuevo producto</button>

    <ul class="list-group">
        @foreach (var p in productos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <img src="@p.ImagenUrl" alt="@p.Nombre" class="img-thumbnail me-3" style="width: 60px; height: 60px; object-fit: cover;" />
                    <div>
                        <strong>@p.Nombre</strong> – $@p.Precio<br />
                        <em>@p.Descripcion</em> – Stock: @p.Stock
                    </div>
                </div>
                <div>
                    <button class="btn btn-warning btn-sm me-1" @onclick="() => EditarProducto(p)">Editar</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarProducto(p.Id)">Eliminar</button>
                </div>
            </li>
        }
    </ul>
}

<div class="mt-4 text-center">
    <a class="btn btn-outline-secondary" href="/">Volver al inicio</a>
</div>

@code {
    private List<Producto> productos = new();
    private Producto? productoEditando;

    protected override async Task OnInitializedAsync()
    {
        productos = await http.GetFromJsonAsync<List<Producto>>("api/productos") ?? new();
    }

    private void NuevoProducto()
    {
        productoEditando = new Producto();
    }

    private async Task GuardarProducto()
    {
        if (productoEditando!.Id == 0)
        {
            var resp = await http.PostAsJsonAsync("api/productos", productoEditando);
            var creado = await resp.Content.ReadFromJsonAsync<Producto>();
            if (creado != null) productos.Add(creado);
        }
        else
        {
            await http.PutAsJsonAsync($"api/productos/{productoEditando.Id}", productoEditando);
            var index = productos.FindIndex(p => p.Id == productoEditando.Id);
            if (index != -1) productos[index] = productoEditando;
        }

        productoEditando = null;
    }

    private void EditarProducto(Producto producto)
    {
        productoEditando = new Producto
        {
            Id = producto.Id,
            Nombre = producto.Nombre,
            Descripcion = producto.Descripcion,
            Precio = producto.Precio,
            Stock = producto.Stock,
            ImagenUrl = producto.ImagenUrl
        };
    }

    private void CancelarEdicion()
    {
        productoEditando = null;
    }

    private async Task EliminarProducto(int id)
    {
        await http.DeleteAsync($"api/productos/{id}");
        productos.RemoveAll(p => p.Id == id);
    }
}