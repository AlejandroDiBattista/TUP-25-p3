@page "/productos"
@inject HttpClient Http
@using cliente.Modelos

<h3 class="mb-3">Agregar producto</h3>

<div class="mb-4">
    <input @bind="nuevoProducto.Nombre" placeholder="Nombre" class="form-control mb-2" />
    <input @bind="nuevoProducto.Descripcion" placeholder="DescripciÃ³n" class="form-control mb-2" />
    <input type="number" @bind="nuevoProducto.Precio" placeholder="Precio" class="form-control mb-2" />
    <input type="number" @bind="nuevoProducto.Stock" placeholder="Stock" class="form-control mb-2" />
    <input @bind="nuevoProducto.ImagenUrl" placeholder="URL Imagen" class="form-control mb-2" />
    <button class="btn btn-success" @onclick="AgregarProducto">Agregar</button>
</div>

<h4>ðŸ“‹ Lista de productos</h4>
@if (productos is null)
{
    <p><em>Cargando productos...</em></p>
}
else if (!productos.Any())
{
    <p>No hay productos disponibles.</p>
}
else
{
    <ul class="list-group">
        @foreach (var p in productos)
        {
            <li class="list-group-item">
                <strong>@p.Nombre</strong> â€“ $@p.Precio <br />
                <em>@p.Descripcion</em> â€“ Stock: @p.Stock
            </li>
        }
    </ul>
}

@code {
    private List<Producto> productos;
    private Producto nuevoProducto = new();

    protected override async Task OnInitializedAsync()
    {
        productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
    }

    private async Task AgregarProducto()
    {
        var response = await Http.PostAsJsonAsync("api/productos", nuevoProducto);
        if (response.IsSuccessStatusCode)
        {
            productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
            nuevoProducto = new(); // resetea el formulario
        }
    }
}