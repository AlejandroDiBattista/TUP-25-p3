@page "/productos"
@using cliente.Modelos
@inject cliente.Services.ProductoService ProductoService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1>Cat√°logo de productos</h1>

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var producto in productos)
        {
            <div class="col">
                <div class="card h-100">
                    <img src="@(producto.Id == 1
                                ? "/images/matraz2.jpg"
                                : producto.Id == 2
                                    ? "/images/balanza2.jpg"
                                    : producto.Id == 3
                                        ? "/images/manta2.jpg"
                                        : producto.Id == 4
                                            ? "/images/pipeta_graduada.jpg"
                                            : producto.Id == 6
                                                ? "/images/termometroanalogico.jpg"
                                                : producto.ImagenUrl?.StartsWith("http") == true
                                                    ? producto.ImagenUrl
                                                    : $"/images/{producto.ImagenUrl ?? "placeholder.png"}")"
                         class="card-img-top"
                         alt="@producto.Nombre"
                         style="height: 180px; object-fit: contain;" />
                    <div class="card-body">
                        <h5 class="card-title">
                            @(producto.Id == 1 ? "Matraz Erlenmeyer" :
                              producto.Id == 2 ? "Balanza digital" :
                              producto.Id == 3 ? "Manta calefactora triple" :
                              producto.Id == 4 ? "Pipeta graduada" :
                              producto.Id == 5 ? "Vaso medidor" :
                              producto.Id == 6 ? "Term√≥metro anal√≥gico" :
                              producto.Id == 7 ? "Tubos de ensayo" :
                              producto.Id == 8 ? "Probeta de vidrio" :
                              producto.Id == 9 ? "Cron√≥metro digital" :
                              producto.Id == 10 ? "Term√≥metro digital" :
                              producto.Nombre)
                        </h5>

                        <p class="card-text">
                            @(producto.Id == 1 ? "Frasco c√≥nico de vidrio resistente al calor para mezclas" :
                              producto.Id == 2 ? "Precisi√≥n de ¬±0.01‚ÄØg, ideal para mediciones exactas" :
                              producto.Id == 3 ? "Dispositivo para calentar soluciones de forma uniforme" :
                              producto.Id == 4 ? "Instrumento graduado para dosificaci√≥n controlada" :
                              producto.Id == 5 ? "Recipiente cil√≠ndrico con marcas de volumen" :
                              producto.Id == 6 ? "Mide temperatura mediante escala anal√≥gica" :
                              producto.Id == 7 ? "Para realizar peque√±as reacciones qu√≠micas" :
                              producto.Id == 8 ? "Cilindro de vidrio con escala para medir l√≠quidos" :
                              producto.Id == 9 ? "Reloj digital para registrar tiempos de reacci√≥n" :
                              producto.Id == 10 ? "Medici√≥n r√°pida y precisa de temperatura ambiente o de sustancias" :
                              producto.Descripcion)
                        </p>

                        <p class="fw-bold">Stock: @(producto.Stock < 0 ? 0 : producto.Stock)</p>
                        <p class="fw-bold">$@producto.Precio</p>
                        <button class="btn btn-primary w-100"
                                @onclick="() => A√±adirAlCarrito(producto)"
                                disabled="@(producto.Stock <= 0)">
                            üõí Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Producto>? productos;
    private List<Producto> carrito = new();

    // Mapeo: Producto visible ‚Üí Producto real que se debe agregar
    private Dictionary<int, int> Reemplazos = new()
    {
        { 10, 11 }, // Term√≥metro digital ‚ûú Bal√≥n de destilaci√≥n
        { 9, 12 },  // Cron√≥metro ‚ûú Bureta graduada
        { 8, 13 },  // Probeta ‚ûú Pipeta volum√©trica
        { 6, 14 },  // Term√≥metro anal√≥gico ‚ûú Agitador magn√©tico
        { 4, 1 },   // Pipeta graduada ‚ûú Matraz Erlenmeyer
        { 3, 15 },  // Manta calefactora triple ‚ûú Manta calefactora
        { 2, 15 },  // Balanza digital ‚ûú Manta calefactora
        { 1, 5 }    // Matraz Erlenmeyer ‚ûú Vaso medidor
    };

    protected override async Task OnInitializedAsync()
    {
        productos = await ProductoService.ObtenerProductosAsync();
        carrito = await LocalStorage.GetItemAsync<List<Producto>>("carrito") ?? new();

        foreach (var item in carrito)
        {
            var original = productos.FirstOrDefault(p => p.Id == item.Id);
            if (original != null)
            {
                original.Stock -= item.Cantidad;
                if (original.Stock < 0)
                    original.Stock = 0;
            }
        }
    }

    private async Task A√±adirAlCarrito(Producto productoVisible)
    {
        // Buscar si este producto tiene un reemplazo definido
        int productoFinalId = Reemplazos.ContainsKey(productoVisible.Id) 
            ? Reemplazos[productoVisible.Id] 
            : productoVisible.Id;

        var productoReal = productos.FirstOrDefault(p => p.Id == productoFinalId);
        if (productoReal == null || productoReal.Stock <= 0)
            return;

        var existente = carrito.FirstOrDefault(p => p.Id == productoReal.Id);
        if (existente != null)
        {
            existente.Cantidad++;
        }
        else
        {
            carrito.Add(new Producto
            {
                Id = productoReal.Id,
                Nombre = productoReal.Nombre,
                Descripcion = productoReal.Descripcion,
                Precio = productoReal.Precio,
                ImagenUrl = productoReal.ImagenUrl,
                Cantidad = 1
            });
        }

        productoReal.Stock--;
        await LocalStorage.SetItemAsync("carrito", carrito);
    }
}