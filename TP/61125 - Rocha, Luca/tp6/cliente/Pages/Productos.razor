@page "/productos"
@using cliente.Modelos
@inject cliente.Services.ProductoService ProductoService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h1>Catálogo de productos</h1>

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else if (!productos.Any())
{
    <p>No hay productos disponibles.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var producto in productos.Where(p =>
            !string.IsNullOrWhiteSpace(p.Nombre) &&
            !string.IsNullOrWhiteSpace(p.ImagenUrl)))
        {
            <div class="col">
                <div class="card h-100">
                    <img src="@(producto.Id == 1
                                ? "/images/matraz2.jpg"
                                : producto.Id == 2
                                    ? "/images/balanza2.jpg"
                                    : producto.Id == 3
                                        ? "/images/manta2.jpg"
                                        : producto.Id == 4
                                            ? "/images/pipeta_graduada.jpg"
                                            : producto.Id == 6
                                                ? "/images/termometroanalogico.jpg"
                                                : producto.ImagenUrl?.StartsWith("http") == true
                                                    ? producto.ImagenUrl
                                                    : $"/images/{producto.ImagenUrl ?? "placeholder.png"}")"
                         class="card-img-top"
                         alt="@producto.Nombre"
                         style="height: 180px; object-fit: contain;" />
                    <div class="card-body">
                        <h5 class="card-title">
                            @(producto.Id == 1 ? "Matraz Erlenmeyer" :
                              producto.Id == 2 ? "Balanza digital" :
                              producto.Id == 3 ? "Manta calefactora triple" :
                              producto.Id == 4 ? "Pipeta graduada" :
                              producto.Id == 5 ? "Balanza" :
                              producto.Id == 6 ? "Termómetro analógico" :
                              producto.Id == 7 ? "Tubos de ensayo" :
                              producto.Id == 8 ? "Probeta de vidrio" :
                              producto.Id == 9 ? "Cronómetro de laboratorio" :
                              producto.Id == 10 ? "Termómetro Digital" :
                              producto.Nombre)
                        </h5>

                        <p class="card-text">
                            @(producto.Id == 1 ? "Vidrio resistente al calor para mezclas" :
                              producto.Id == 2 ? "Precisión de ±0.01 g, ideal para laboratorio" :
                              producto.Id == 3 ? "Dispositivo para calentar soluciones" :
                              producto.Id == 4 ? "Instrumento de vidrio para dosificación precisa" :
                              producto.Id == 5 ? "Pesar alimentos, productos y reactivos" :
                              producto.Id == 6 ? "Mide temperatura en líquidos y gases" :
                              producto.Id == 7 ? "Utilizado para medir el volumen de líquidos con alta precisión" :
                              producto.Id == 8 ? "Para reacciones químicas en el laboratorio" :
                              producto.Id == 9 ? "Temporizador para ensayos precisos" :
                              producto.Id == 10 ? "Mide temperatura con precisión digital" :
                              producto.Descripcion)
                        </p>

                        <p class="fw-bold">$@producto.Precio</p>
                        <button class="btn btn-primary w-100" @onclick="() => AñadirAlCarrito(producto)">
                            🛒 Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Producto>? productos;
    private List<Producto> carrito = new();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("📍 OnInitializedAsync ejecutado");
        productos = await ProductoService.ObtenerProductosAsync();
        carrito = await LocalStorage.GetItemAsync<List<Producto>>("carrito") ?? new();
        Console.WriteLine($"Productos cargados correctamente: {productos?.Count}");
    }

    private async Task AñadirAlCarrito(Producto producto)
    {
        var existente = carrito.FirstOrDefault(p => p.Id == producto.Id);
        if (existente != null)
        {
            existente.Cantidad++;
        }
        else
        {
            carrito.Add(new Producto
            {
                Id = producto.Id,
                Nombre = producto.Nombre,
                Descripcion = producto.Descripcion,
                Precio = producto.Precio,
                ImagenUrl = producto.ImagenUrl,
                Cantidad = 1
            });
        }

        await LocalStorage.SetItemAsync("carrito", carrito);
    }
}