@page "/carrito"
@inject cliente.Services.ApiService ApiService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Nav

<h3>Carrito de compras</h3>

@if (mensajeError is not null)
{
    <div class="alert alert-danger">@mensajeError</div>
}
else if (items is null || productos is null)
{
    <p>Cargando carrito...</p>
}
else if (!items.Any())
{
    <div class="alert alert-info">El carrito está vacío.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Imagen</th>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio unitario</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                var producto = productos.FirstOrDefault(p => p.Id == item.ProductoId);
                if (producto is not null)
                {
                    <tr>
                        <td>
                            <img src="@producto.ImagenUrl" alt="@producto.Nombre" style="height:50px;width:50px;object-fit:cover;" />
                        </td>
                        <td>@producto.Nombre</td>
                        <td>
                            <button class="btn btn-sm btn-secondary" @onclick="() => Quitar(item.ProductoId)">-</button>
                            @item.Cantidad
                            <button class="btn btn-sm btn-secondary" @onclick="() => Agregar(item.ProductoId)">+</button>
                        </td>
                        <td>$@producto.Precio</td>
                        <td>$@(producto.Precio * item.Cantidad)</td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => Quitar(item.ProductoId)">Eliminar</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <div>
        <b>Total: $@items.Sum(i => {
            var prod = productos.FirstOrDefault(p => p.Id == i.ProductoId);
            return prod is not null ? prod.Precio * i.Cantidad : 0;
        })</b>
    </div>
    <button class="btn btn-warning" @onclick="Vaciar">Vaciar carrito</button>
    <button class="btn btn-success" @onclick="ConfirmarCompra">Confirmar compra</button>
}

@code {
    List<cliente.Models.ItemCarrito>? items;
    List<cliente.Models.Producto>? productos;
    string? mensajeError;

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        mensajeError = null;
        var carritoId = await LocalStorage.GetItemAsync<Guid?>("carritoId");
        productos = await ApiService.GetProductosAsync();
        try
        {
            if (carritoId != null && carritoId != Guid.Empty)
            {
                items = await ApiService.ObtenerCarritoAsync(carritoId.Value);
            }
            else
            {
                // Si no hay carritoId, crear uno nuevo
                var nuevoId = await ApiService.CrearCarritoAsync();
                await LocalStorage.SetItemAsync("carritoId", nuevoId.ToString());
                items = await ApiService.ObtenerCarritoAsync(nuevoId);
            }
        }
        catch (HttpRequestException)
        {
            // Si el carrito no existe (404), crear uno nuevo
            var nuevoId = await ApiService.CrearCarritoAsync();
            await LocalStorage.SetItemAsync("carritoId", nuevoId.ToString());
            items = await ApiService.ObtenerCarritoAsync(nuevoId);
        }
        catch (Exception ex)
        {
            mensajeError = "No se pudo cargar el carrito.";
        }
    }

    private async Task Agregar(int productoId)
    {
        var carritoId = await LocalStorage.GetItemAsync<Guid>("carritoId");
        await ApiService.AgregarAlCarritoAsync(carritoId, productoId);
        await CargarDatos();
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private async Task Quitar(int productoId)
    {
        var carritoId = await LocalStorage.GetItemAsync<Guid>("carritoId");
        await ApiService.QuitarDelCarritoAsync(carritoId, productoId);
        await CargarDatos();
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private async Task Vaciar()
    {
        var carritoId = await LocalStorage.GetItemAsync<Guid>("carritoId");
        await ApiService.VaciarCarritoAsync(carritoId);
        await CargarDatos();
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private void ConfirmarCompra()
    {
        Nav.NavigateTo("/confirmar");
    }
}