@page "/productos"
@inject cliente.Services.ApiService ApiService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Nav

@using Microsoft.AspNetCore.Components

<h3>Cat√°logo de Productos</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success">@mensaje</div>
}

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else if (!productos.Any())
{
    <div class="alert alert-warning text-center">Producto no encontrado</div>
}
else
{
    <div class="row">
        @foreach (var producto in productos)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" style="height:200px;object-fit:cover;">
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p>Precio: $@producto.Precio</p>
                        <p>Stock: @producto.Stock</p>
                        <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto.Id)" disabled="@((producto.Stock < 1))">
                            Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    string mensaje = "";
    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? q { get; set; }

    List<cliente.Models.Producto>? productos;

    protected override async Task OnParametersSetAsync()
    {
        productos = await ApiService.GetProductosAsync(q);
    }

    private async Task<Guid> ObtenerOCrearCarritoIdAsync()
    {
        var carritoId = await LocalStorage.GetItemAsync<Guid?>("carritoId");
        if (carritoId == null || carritoId == Guid.Empty)
        {
            var nuevoId = await ApiService.CrearCarritoAsync();
            await LocalStorage.SetItemAsync("carritoId", nuevoId);
            return nuevoId;
        }
        return carritoId.Value;
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        var carritoId = await ObtenerOCrearCarritoIdAsync();
        await ApiService.AgregarAlCarritoAsync(carritoId, productoId);
        mensaje = "Producto agregado al carrito";
        StateHasChanged();
        await Task.Delay(1500);
        mensaje = "";
        StateHasChanged();

        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }
}