@page "/productos"
@inject cliente.Services.ApiService ApiService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Nav

@using Microsoft.AspNetCore.Components

<h3>Cat√°logo de Productos</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success">@mensaje</div>
}

@if (!string.IsNullOrEmpty(errorStock))
{
    <div class="alert alert-danger">@errorStock</div>
}

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else if (!productos.Any())
{
    <div class="alert alert-warning text-center">Producto no encontrado</div>
}
else
{
    <div class="row">
        @foreach (var producto in productos)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" style="height:200px;object-fit:cover;">
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p>Precio: $@producto.Precio</p>
                        <p>Stock: @producto.Stock</p>
                        <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto.Id)" disabled="@((producto.Stock < 1))">
                            Agregar al carrito
                        </button>
                        <button class="btn btn-info btn-sm mt-2" @onclick="() => MostrarDialogoStock(producto.Id)">
                            Agregar stock
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (mostrarDialogoStock)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Agregar stock</h5>
                    <button type="button" class="btn-close" @onclick="CerrarDialogoStock"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-2">
                        <label>Palabra clave:</label>
                        <input type="password" class="form-control" @bind="claveStock" />
                    </div>
                    <div class="mb-2">
                        <label>Cantidad a agregar:</label>
                        <input type="number" class="form-control" @bind="cantidadStock" min="1" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorStock))
                    {
                        <div class="alert alert-danger">@errorStock</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarDialogoStock">Cancelar</button>
                    <button class="btn btn-success" @onclick="ConfirmarAgregarStock">Agregar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    string mensaje = "";
    string errorStock = "";
    bool mostrarDialogoStock = false;
    int productoIdStock = 0;
    int cantidadStock = 1;
    string claveStock = "";

    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? q { get; set; }

    List<cliente.Models.Producto>? productos;

    protected override async Task OnParametersSetAsync()
    {
        productos = await ApiService.GetProductosAsync(q);
    }

    private async Task<Guid> ObtenerOCrearCarritoIdAsync()
    {
        var carritoId = await LocalStorage.GetItemAsync<Guid?>("carritoId");
        if (carritoId == null || carritoId == Guid.Empty)
        {
            var nuevoId = await ApiService.CrearCarritoAsync();
            await LocalStorage.SetItemAsync("carritoId", nuevoId);
            return nuevoId;
        }
        return carritoId.Value;
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        var carritoId = await ObtenerOCrearCarritoIdAsync();
        await ApiService.AgregarAlCarritoAsync(carritoId, productoId);
        mensaje = "Producto agregado al carrito";
        StateHasChanged();
        await Task.Delay(1500);
        mensaje = "";
        StateHasChanged();

        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private void MostrarDialogoStock(int productoId)
    {
        productoIdStock = productoId;
        cantidadStock = 1;
        claveStock = "";
        errorStock = "";
        mostrarDialogoStock = true;
    }

    private void CerrarDialogoStock()
    {
        mostrarDialogoStock = false;
        errorStock = "";
    }

    private async Task ConfirmarAgregarStock()
    {
        if (claveStock != "jefedelprograma")
        {
            errorStock = "Palabra clave incorrecta.";
            return;
        }
        if (cantidadStock < 1)
        {
            errorStock = "La cantidad debe ser mayor a 0.";
            return;
        }
        await ApiService.AgregarStockAsync(productoIdStock, cantidadStock);
        mostrarDialogoStock = false;
        errorStock = "";
        productos = await ApiService.GetProductosAsync(q);
        StateHasChanged();
    }
}