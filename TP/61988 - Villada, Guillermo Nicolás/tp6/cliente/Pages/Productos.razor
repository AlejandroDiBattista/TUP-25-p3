@page "/"
@inject cliente.Services.ApiService ApiService

<h3>Catálogo de Productos</h3>

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else
{
    <div class="row">
        @foreach (var producto in productos)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" style="height:200px;object-fit:cover;">
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p>Precio: $@producto.Precio</p>
                        <p>Stock: @producto.Stock</p>
                        <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto.Id)" disabled="@((producto.Stock < 1))">
                            Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    List<cliente.Models.Producto>? productos;

    protected override async Task OnInitializedAsync()
    {
        productos = await ApiService.GetProductosAsync();
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        // Aquí deberías obtener o crear el carritoId (puede ser desde localStorage o una variable)
        // Por ahora, solo muestra un mensaje
        await Task.Yield();
        // Ejemplo: await ApiService.AgregarAlCarritoAsync(carritoId, productoId);
        Console.WriteLine($"Producto {productoId} agregado al carrito (falta implementar lógica de carrito)");
    }
}