@page "/confirmacion"
@using System.ComponentModel.DataAnnotations
@using cliente.Services
@using cliente.Modelos
@inject NavigationManager Navigation
@inject ApiService ApiService
@inject CarritoService CarritoService

<PageTitle>Confirmar compra</PageTitle>

<div class="container mt-5">
    @if (compraFinalizada)
    {
        <div class="alert alert-success text-center" role="alert">
            <h3>¡Compra finalizada!</h3>
            <p>Gracias por tu compra.</p>
            <button class="btn btn-primary mt-3" @onclick="VolverAProductos">Volver al catálogo</button>
        </div>
    }
    else
    {
        <h2>Resumen de tu compra</h2>
        <ul>
            @foreach (var item in CarritoService.Items)
            {
                <li>@item.Producto.Nombre x @item.Cantidad - $@(item.Producto.Precio * item.Cantidad)</li>
            }
        </ul>
        <p><strong>Total de ítems:</strong> @CarritoService.Items.Sum(i => i.Cantidad)</p>
        <p><strong>Importe total:</strong> $@CarritoService.Total</p>

        <EditForm Model="@formData" OnValidSubmit="ConfirmarCompra">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label>Nombre</label>
                <InputText class="form-control" @bind-Value="formData.Nombre" />
                <ValidationMessage For="@(() => formData.Nombre)" />
            </div>
            <div class="mb-3">
                <label>Apellido</label>
                <InputText class="form-control" @bind-Value="formData.Apellido" />
                <ValidationMessage For="@(() => formData.Apellido)" />
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText class="form-control" @bind-Value="formData.Email" />
                <ValidationMessage For="@(() => formData.Email)" />
            </div>

            <button class="btn btn-success" type="submit">Confirmar compra</button>
        </EditForm>
    }
</div>

@code {
    private FormData formData = new();
    private bool compraFinalizada = false;

    private async Task ConfirmarCompra()
    {
        var itemsDto = CarritoService.Items.Select(i => new CarritoItemDTO
        {
            ProductoId = i.Producto.Id,
            Cantidad = i.Cantidad
        }).ToList();

        var exito = await ApiService.ConfirmarCompraAsync(itemsDto);

        if (exito)
        {
            CarritoService.VaciarCarrito();
            compraFinalizada = true;
        }
    }

    private void VolverAProductos()
    {
        Navigation.NavigateTo("/productos", true);
    }

    public class FormData
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; }
        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; }
    }
}