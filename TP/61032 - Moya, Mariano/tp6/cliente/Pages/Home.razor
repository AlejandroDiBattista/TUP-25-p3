@page "/"
@using cliente.Services
@inject ApiService ApiService
@inject Cliente.Services.ProductoService ProductoService
@inject Cliente.Services.CarritoService CarritoService

<PageTitle>Inicio</PageTitle>

<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            <h1>Comunicación Cliente-Servidor</h1>
        </div>
    </div>
    
    <div class="row mb-4">
        <div class="col-12">
            <button class="btn btn-primary" @onclick="ObtenerDatosDelServidor">Obtener datos del servidor</button>
        </div>
    </div>

    <div class="row">
        <div class="col-12">            
            @if (cargando) {
                <div class="alert alert-info">Cargando datos...</div>
            } else if (datos != null) {                <div class="card" style="width: 300px;">
                    <div class="card-header">
                        Respuesta del servidor
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@datos.Mensaje</h5>
                        <p class="card-text">Fecha: @datos.Fecha.ToString("dd/MM/yyyy HH:mm:ss")</p>
                    </div>
                </div>
            } else if (error != null) {
                <div class="alert alert-danger">
                    Error: @error
                </div>
            }
        </div>
    </div>

    <div style="background: #e0f7fa; padding: 1.5rem; border-radius: 8px; margin-bottom: 1.5rem;">
        <h2 style="color: #00796b;">¡Bienvenido a la Tienda Online!</h2>
        <p>Este frontend Blazor está funcionando correctamente.</p>
    </div>

    <div style="margin-bottom:1.5rem;">
        <input type="text" @bind="busqueda" @bind:event="oninput" placeholder="Buscar productos..." style="padding:0.5rem; width:250px; border-radius:4px; border:1px solid #ccc;" />
        <button @onclick="Buscar" style="margin-left:0.5rem; padding:0.5rem 1rem; border-radius:4px; background:#00796b; color:#fff; border:none;">Buscar</button>
        <button @onclick="Limpiar" style="margin-left:0.5rem; padding:0.5rem 1rem; border-radius:4px; background:#bdbdbd; color:#333; border:none;">Limpiar</button>
    </div>

    <div class="row">
        @if (productos is null)
        {
            <p>Cargando productos...</p>
        }
        else if (productos.Count == 0)
        {
            <p>No hay productos disponibles.</p>
        }
        else
        {
            @foreach (var prod in productos)
            {
                <div class="col-md-4 mb-3">
                    <div class="card h-100">
                        <img src="@prod.ImagenUrl" class="card-img-top" alt="@prod.Nombre" style="max-height:180px;object-fit:contain;">
                        <div class="card-body">
                            <h5 class="card-title">@prod.Nombre</h5>
                            <p class="card-text">@prod.Descripcion</p>
                            <p><b>Precio:</b> $@prod.Precio</p>
                            <p><b>Stock:</b> @prod.Stock</p>
                            <button @onclick="() => AgregarAlCarrito(prod.Id)" style="margin-top:0.5rem; padding:0.5rem 1rem; border-radius:4px; background:#388e3c; color:#fff; border:none;">Agregar al carrito</button>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <div style="margin-top:1rem; color:green; font-weight:bold;">@mensaje</div>
    }
</div>

@code {
    private DatosRespuesta datos;
    private string error;
    private bool cargando = false;
    List<Cliente.Services.ProductoDto>? productos;
    string busqueda = string.Empty;
    string mensaje = string.Empty;

    private async Task ObtenerDatosDelServidor() {
        try {
            cargando = true;
            error = null;
            datos = await ApiService.ObtenerDatosAsync();
        } catch (Exception ex) {
            error = ex.Message;
            datos = null;
        } finally {
            cargando = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        productos = await ProductoService.GetProductosAsync();
    }

    async Task Buscar()
    {
        productos = await ProductoService.GetProductosAsync(busqueda);
    }

    async Task Limpiar()
    {
        busqueda = string.Empty;
        productos = await ProductoService.GetProductosAsync();
    }

    async Task AgregarAlCarrito(int productoId)
    {
        var ok = await CarritoService.AgregarProductoAsync(productoId, 1);
        mensaje = ok ? "Producto agregado al carrito" : "No se pudo agregar el producto";
        StateHasChanged();
        await Task.Delay(1500);
        mensaje = string.Empty;
        StateHasChanged();
    }
}
