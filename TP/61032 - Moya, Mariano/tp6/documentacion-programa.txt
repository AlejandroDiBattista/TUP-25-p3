DOCUMENTACIÓN DEL PROGRAMA: TIENDA ONLINE (TP6)

---

1. DESCRIPCIÓN GENERAL
----------------------
Este programa es una aplicación web full-stack de una tienda online, desarrollada con backend en C# (.NET Minimal API + EF Core/SQLite) y frontend en Blazor WebAssembly. Permite a los usuarios navegar un catálogo de productos, agregar productos a un carrito, modificar cantidades, vaciar el carrito y confirmar la compra. El sistema es moderno, responsivo y visualmente atractivo, con animaciones y detalles profesionales.

2. FUNCIONAMIENTO GENERAL
-------------------------
- El usuario accede a la página principal y visualiza el catálogo de productos.
- Puede buscar productos, ver detalles básicos y agregar productos al carrito.
- En la página del carrito, puede aumentar/disminuir cantidades, vaciar el carrito o confirmar la compra.
- Al confirmar la compra, se validan los datos del cliente y se registra la compra en el backend, descontando stock.
- El backend expone endpoints REST para todas las operaciones y persiste los datos en SQLite.

3. FUNCIONES Y MÉTODOS UTILIZADOS
---------------------------------

FRONTEND (Blazor WebAssembly)
----------------------------

- **CarritoService.cs**
  - `VaciarCarritoAsync()`: Vacía completamente el carrito actual, eliminando todos los productos. Llama al endpoint DELETE del backend para borrar el carrito.
  - `CrearCarritoAsync()`: Crea un nuevo carrito en el backend (si no existe uno activo) y guarda el Id para futuras operaciones.
  - `AgregarProductoAsync(int productoId, int cantidad)`: Agrega una cantidad específica de un producto al carrito. Si el producto ya existe, suma la cantidad; si no, lo agrega. Llama al endpoint PUT del backend.
  - `ObtenerItemsAsync()`: Recupera la lista de productos y cantidades actuales en el carrito desde el backend, útil para mostrar el estado actualizado en la UI.
  - `QuitarUnidadProductoAsync(int productoId)`: Resta una unidad de un producto del carrito. Si la cantidad llega a 0, elimina el producto. Usa PUT para restar y DELETE para eliminar.
  - `ConfirmarCompraAsync(DatosClienteDto datos)`: Envía los datos del cliente al backend para registrar la compra, descontar stock y limpiar el carrito. Llama al endpoint POST de confirmación.

- **Home.razor**
  - `AgregarAlCarrito(int productoId)`: Permite al usuario agregar un producto al carrito desde el catálogo. Llama a `AgregarProductoAsync` y muestra feedback visual.
  - `ActualizarCantidadCarrito()`: Refresca la cantidad total de productos en el carrito, animando el badge si hay cambios.
  - `Buscar()`, `Limpiar()`: Permiten filtrar productos por nombre o restaurar el listado completo.

- **Carrito.razor**
  - `CargarCarrito()`: Carga los productos actuales del carrito desde el backend y actualiza la vista.
  - `CambiarCantidad(item, delta)`: Suma o resta unidades de un producto usando los métodos del servicio. Si la cantidad llega a 0, elimina el producto.
  - `VaciarCarrito()`: Vacía el carrito completamente, eliminando todos los productos.
  - `OnConfirmarCompra()`: Valida los datos del cliente (nombre, apellido, email) y confirma la compra llamando al backend. Muestra mensajes de éxito o error.

BACKEND (Minimal API)
---------------------

- **Program.cs**
  - `POST /carritos`: Crea un nuevo carrito vacío en la base de datos y devuelve su Id. Permite que cada usuario tenga un carrito propio.
  - `GET /carritos/{carritoId}`: Devuelve los productos y cantidades actuales del carrito indicado, para mostrar en la UI.
  - `PUT /carritos/{carritoId}/{productoId}?cantidad=X`: Suma o resta X unidades de un producto en el carrito. Si la cantidad final es 0 o menos, elimina el producto del carrito.
  - `DELETE /carritos/{carritoId}`: Vacía el carrito completamente, eliminando todos los productos asociados.
  - `DELETE /carritos/{carritoId}/{productoId}`: Elimina un producto específico del carrito, sin afectar los demás.
  - `POST /carritos/{carritoId}/confirmar`: Confirma la compra, valida stock, descuenta las unidades compradas y limpia el carrito. Registra los datos del cliente y la compra en la base de datos.

4. DETALLES DE FUNCIONAMIENTO
-----------------------------
- El frontend utiliza servicios inyectados para comunicarse con la API REST del backend.
- El backend valida stock, datos del cliente y maneja la persistencia con Entity Framework Core y SQLite.
- El sistema es responsivo, con animaciones en botones, cards y feedback visual en todas las acciones.
- El código está documentado y estructurado para facilitar la defensa y el mantenimiento.

5. VALIDACIONES Y SEGURIDAD
---------------------------
- Validación de nombre y apellido (no pueden contener números).
- Validación de email en el formulario de compra.
- Validación de stock antes de confirmar la compra.
- Manejo de errores y mensajes claros al usuario.

6. EXPERIENCIA DE USUARIO
-------------------------
- Interfaz moderna, con paleta de colores personalizada y tipografía Roboto.
- Navbar y footer fijos, cards de productos con animaciones y botones destacados.
- Loader animado y feedback visual en todas las operaciones.

---

Esta documentación cubre el funcionamiento, las funciones principales y los detalles técnicos del sistema de tienda online desarrollado en TP6. Si necesitás un documento en otro formato o más detalles sobre alguna función, avisame.
