@page "/catalogo"
@using System.Net.Http.Json
@using cliente.Modelos
@inject HttpClient Http

<h3>Cat√°logo de Productos F1</h3>

<input placeholder="Buscar producto" @bind="busqueda" @bind:event="oninput" />
<button @onclick="BuscarProducto">Buscar</button>

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p>No se encontraron productos.</p>
}
else
{
    <div class="row">
        @foreach (var producto in productos)
        {
            <div class="col-md-4">
                <div class="card m-2">
                    <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" />
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p><strong>Stock</strong>: @producto.Stock</p>
                        <p><strong>Precio</strong>: $@producto.Precio</p>
                        <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto.Id)">
                            Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private string busqueda = "";
    private List<Producto> productos;
    // Variable para almacenar el ID del carrito. Idealmente se gestiona en un servicio compartido.
    private Guid carritoId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        productos = await Http.GetFromJsonAsync<List<Producto>>("api/productos");
    }

    private async Task BuscarProducto()
    {
        productos = await Http.GetFromJsonAsync<List<Producto>>($"api/productos?query={busqueda}");
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        // Verifica si ya existe un carrito; de lo contrario, lo crea.
        if (carritoId == Guid.Empty)
        {
            var response = await Http.PostAsJsonAsync("api/carritos", new { });
            carritoId = await response.Content.ReadFromJsonAsync<Guid>();
        }
        // Llama al endpoint PUT para agregar el producto al carrito.
        var result = await Http.PutAsJsonAsync($"api/carritos/{carritoId}/{productoId}", new { });
        // Opcionalmente, procesa la respuesta para actualizar el estado (por ejemplo, mostrar notificaciones).
    }
}