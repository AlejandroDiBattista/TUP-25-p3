@page "/carrito"
@using cliente.Models
@using System.ComponentModel.DataAnnotations
@inject ICarritoService CarritoService
@inject IJSRuntime JS

<h3>Carrito</h3>

@if (items == null)
{
    <p>Cargando...</p>
}
else if (!items.Any())
{
    <p>El carrito est√° vac√≠o.</p>
}
else
{
    <ul class="list-group">
        @foreach (var item in items)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>
                    @item.Nombre (@item.Cantidad @((item.Cantidad == 1) ? "unidad" : "unidades"))
                    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="@(() => CambiarCantidad(item.ProductoId, item.Cantidad - 1))" disabled="@(item.Cantidad <= 1)">-</button>
                    <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="@(() => CambiarCantidad(item.ProductoId, item.Cantidad + 1))">+</button>
                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="@(() => EliminarProducto(item.ProductoId))">üóëÔ∏è</button>
                </span>
                <span>$@item.Subtotal.ToString("N2")</span>
            </li>
        }
    </ul>

    <p class="mt-3 fw-bold">Total: $@items.Sum(i => i.Subtotal).ToString("N2")</p>

    <button class="btn btn-danger me-2" @onclick="VaciarCarrito">üóëÔ∏è Vaciar carrito</button>
}

@if (mostrarFormulario)
{
    <EditForm Model="datosCliente" OnValidSubmit="ConfirmarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <input class="form-control mb-2" @bind="datosCliente.Nombre" placeholder="Nombre" />
        <input class="form-control mb-2" @bind="datosCliente.Apellido" placeholder="Apellido" />
        <input class="form-control mb-2" @bind="datosCliente.Email" placeholder="Email" />

        <button class="btn btn-primary" type="submit">Confirmar compra</button>
    </EditForm>
}
else if (items?.Any() == true)
{
    <button class="btn btn-success mt-2" @onclick="MostrarFormulario">Finalizar compra</button>
}

@code {
    private bool mostrarFormulario = false;
    private DatosCliente datosCliente = new();
    private List<ItemCarritoResponse>? items;

    protected override async Task OnInitializedAsync()
    {
        items = await CarritoService.ObtenerItemsCarritoAsync();
    }

    private void MostrarFormulario() => mostrarFormulario = true;

    private async Task ConfirmarCompra()
    {
        await VaciarCarrito();
        await JS.InvokeVoidAsync("alert", $"¬°Gracias por tu compra, {datosCliente.Nombre}!");
        mostrarFormulario = false;
        datosCliente = new();
    }

    private async Task CambiarCantidad(int productoId, int nuevaCantidad)
    {
        if (nuevaCantidad < 1)
            return;

        await CarritoService.ActualizarCantidadAsync(productoId, nuevaCantidad);
        items = await CarritoService.ObtenerItemsCarritoAsync();
        StateHasChanged();
    }

    private async Task EliminarProducto(int productoId)
    {
        await CarritoService.EliminarProductoAsync(productoId);
        items = await CarritoService.ObtenerItemsCarritoAsync();
    }

    private async Task VaciarCarrito()
    {
        await CarritoService.VaciarCarritoAsync();
        items = await CarritoService.ObtenerItemsCarritoAsync();
    }

    public class DatosCliente
    {
        [Required] public string Nombre { get; set; } = "";
        [Required] public string Apellido { get; set; } = "";
        [Required, EmailAddress] public string Email { get; set; } = "";
    }
}


