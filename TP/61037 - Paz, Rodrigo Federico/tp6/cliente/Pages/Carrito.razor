@page "/carrito"
@inject ICarritoService CarritoService
@using cliente.Models

<h3>Carrito</h3>

@if (items == null)
{
    <p>Cargando...</p>
}
else if (!items.Any())
{
    <p>El carrito está vacío.</p>
}
else
{
    <ul class="list-group">
        @foreach (var item in items)
{
    <li class="list-group-item d-flex justify-content-between align-items-center">
        <span>
    @item.Nombre (@item.Cantidad @((item.Cantidad == 1) ? "unidad" : "unidades"))

    <button class="btn btn-sm btn-outline-secondary ms-2" @onclick="@(() => CambiarCantidad(item.ProductoId, item.Cantidad - 1))" disabled="@(item.Cantidad <= 1)">
        -
    </button>
    <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="@(() => CambiarCantidad(item.ProductoId, item.Cantidad + 1))">
        +
    </button>
</span>
        <span>$@item.Subtotal.ToString("N2")</span>
    </li>
}
    </ul>

    <p class="mt-3 fw-bold">
    Total: $@items.Sum(i => i.Subtotal).ToString("N2")
</p>
}

@code {
    private List<ItemCarritoResponse>? items;

    protected override async Task OnInitializedAsync()
    {
        items = await CarritoService.ObtenerItemsCarritoAsync();
    }
    
    private async Task CambiarCantidad(int productoId, int nuevaCantidad)
{
    if (nuevaCantidad < 1)
        return;

    await CarritoService.ActualizarCantidadAsync(productoId, nuevaCantidad);
    items = await CarritoService.ObtenerItemsCarritoAsync();
    StateHasChanged();
}
    
}