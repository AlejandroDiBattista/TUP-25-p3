@page "/"
@using cliente.Models
@using cliente.Services
@inject ProductoService MiServicioDeProductos
@inject ICarritoService CarritoService
@inject NavigationManager NavigationManager

<PageTitle>Catálogo de Productos</PageTitle>

<input class="form-control mb-4" @bind="busqueda" @bind:event="oninput" placeholder="Buscar productos...">

@if (listaProductos == null)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Cargando productos...</span>
        </div>
        <p class="mt-2">Cargando productos...</p>
    </div>
}
else if (!ProductosFiltrados.Any())
{
    <div class="alert alert-info">No se encontraron productos.</div>
}
else
{
    <div class="row">
        @foreach (var producto in ProductosFiltrados)
        {
            <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                <div class="card h-100 shadow-sm">
                    <img src="@($"/imagenes/{System.IO.Path.GetFileName(producto.ImagenUrl)}")" class="card-img-top" alt="@producto.Nombre">

                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text flex-grow-1">@producto.Descripcion</p>
                        <p class="card-text fs-5"><strong>$@producto.Precio.ToString("N2")</strong></p>
                        <p class="card-text"><small class="text-muted">Stock: @producto.Stock</small></p>

                        <button class="btn btn-primary mt-auto" @onclick="() => AgregarProductoAlCarrito(producto)" disabled="@(producto.Stock == 0)">
                            @(producto.Stock == 0 ? "Sin Stock" : "Agregar al carrito")
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Producto>? listaProductos;
    private string busqueda = "";

    protected override async Task OnInitializedAsync()
    {
        listaProductos = await MiServicioDeProductos.ObtenerProductosAsync();
    }

    private async Task AgregarProductoAlCarrito(Producto producto)
    {
        if (producto.Stock > 0)
        {
            await CarritoService.AgregarAlCarritoAsync(producto.Id);
            producto.Stock--; // 🔔 DESCUENTO el stock localmente
            StateHasChanged(); // 🔔 Fuerza refresco de UI
        }
    }

    private IEnumerable<Producto> ProductosFiltrados =>
        string.IsNullOrWhiteSpace(busqueda)
            ? listaProductos ?? Enumerable.Empty<Producto>()
            : listaProductos!.Where(p =>
                p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ||
                p.Descripcion.Contains(busqueda, StringComparison.OrdinalIgnoreCase)
            );
}
