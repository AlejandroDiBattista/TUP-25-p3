// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using servidor.Data;

#nullable disable

namespace servidor.Migrations
{
    [DbContext(typeof(TiendaContext))]
    partial class TiendaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("servidor.Models.Carrito", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("servidor.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailCliente")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("servidor.Models.ItemCarrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CarritoId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("servidor.Models.ItemCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompraId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemsCompra");
                });

            modelBuilder.Entity("servidor.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Botella 1.5L",
                            ImagenUrl = "https://example.com/coca.jpg",
                            Nombre = "Coca Cola",
                            Precio = 900m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Botella 1.5L",
                            ImagenUrl = "https://example.com/pepsi.jpg",
                            Nombre = "Pepsi",
                            Precio = 850m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "8GB RAM, 512GB SSD",
                            ImagenUrl = "https://example.com/hp.jpg",
                            Nombre = "Notebook HP",
                            Precio = 420000m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Inalámbrico",
                            ImagenUrl = "https://example.com/mouse.jpg",
                            Nombre = "Mouse Logitech",
                            Precio = 12000m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Bluetooth",
                            ImagenUrl = "https://example.com/sony.jpg",
                            Nombre = "Auriculares Sony",
                            Precio = 25000m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Mecánico",
                            ImagenUrl = "https://example.com/teclado.jpg",
                            Nombre = "Teclado Redragon",
                            Precio = 18000m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Botella 2L",
                            ImagenUrl = "https://example.com/fanta.jpg",
                            Nombre = "Fanta",
                            Precio = 870m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "No Frost",
                            ImagenUrl = "https://example.com/heladera.jpg",
                            Nombre = "Heladera Samsung",
                            Precio = 720000m,
                            Stock = 5
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Samsung 25W",
                            ImagenUrl = "https://example.com/cargador.jpg",
                            Nombre = "Cargador Tipo-C",
                            Precio = 7500m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "50 pulgadas 4K",
                            ImagenUrl = "https://example.com/tv.jpg",
                            Nombre = "Smart TV LG",
                            Precio = 580000m,
                            Stock = 7
                        });
                });

            modelBuilder.Entity("servidor.Models.ItemCarrito", b =>
                {
                    b.HasOne("servidor.Models.Carrito", "Carrito")
                        .WithMany("Items")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("servidor.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("servidor.Models.ItemCompra", b =>
                {
                    b.HasOne("servidor.Models.Compra", "Compra")
                        .WithMany("Items")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("servidor.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("servidor.Models.Carrito", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("servidor.Models.Compra", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
