@page "/confirmar-compra/{IdCarrito}"

@using cliente.DTOs
@using cliente.Models
@inject cliente.Services.ApiService ApiService
@inject NavigationManager NavManager

<h3>Confirmar Compra</h3>

@if (cargando)
{
    <p>Cargando carrito...</p>
}
else if (carrito == null || carrito.Count == 0)
{
    <p>El carrito está vacío.</p>
    <button @onclick="VolverAlCatalogo">Volver al catálogo</button>
}
else
{
    <p><b>Total ítems:</b> @TotalItems</p>
    <p><b>Importe total:</b> $@TotalImporte.ToString("F2")</p>

    <EditForm Model="datosCliente" OnValidSubmit="ProcesarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Nombre:</label><br />
            <InputText @bind-Value="datosCliente.NombreSolicitante" />
            <ValidationMessage For="@(() => datosCliente.NombreSolicitante)" />
        </div>
        <div>
            <label>Apellido:</label><br />
            <InputText @bind-Value="datosCliente.ApellidoSolicitante" />
            <ValidationMessage For="@(() => datosCliente.ApellidoSolicitante)" />
        </div>
        <div>
            <label>Email:</label><br />
            <InputText @bind-Value="datosCliente.CorreoElectronicoContacto" type="email" />
            <ValidationMessage For="@(() => datosCliente.CorreoElectronicoContacto)" />
        </div>

        <br />

        <button type="submit">Confirmar compra</button>
        <button type="button" @onclick="VaciarCarrito" style="margin-left:10px;">Vaciar carrito</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <p style="color:red">@mensajeError</p>
    }
}

@code {
    [Parameter] public string IdCarrito { get; set; }

    bool cargando = true;
    List<DetalleCarritoMemoria> carrito;
    string mensajeError;

    DatosClienteDTO datosCliente = new DatosClienteDTO();

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    async Task CargarCarrito()
    {
        try
        {
            carrito = await ApiService.GetCarritoItemsAsync(IdCarrito);
            if (carrito == null)
                carrito = new List<DetalleCarritoMemoria>();
        }
        catch
        {
            carrito = new List<DetalleCarritoMemoria>();
        }
        cargando = false;
        StateHasChanged();
    }

    int TotalItems => carrito?.Sum(i => i.Unidades) ?? 0;
    double TotalImporte => carrito?.Sum(i => i.Unidades * i.ValorPorUnidad) ?? 0;

    async Task ProcesarCompra()
    {
        mensajeError = null;
        bool exito = await ApiService.ConfirmCompraAsync(IdCarrito, datosCliente);
        if (exito)
        {
            NavManager.NavigateTo("/compra-confirmada");
        }
        else
        {
            mensajeError = "Error al confirmar compra. Revisa que los datos estén completos y sean válidos.";
        }
    }

    async Task VaciarCarrito()
    {
        await ApiService.ClearCarritoAsync(IdCarrito);
        carrito.Clear();
        NavManager.NavigateTo("/");
    }

    void VolverAlCatalogo()
    {
        NavManager.NavigateTo("/");
    }
}
