@using Microsoft.AspNetCore.Components.Web
@using Cliente.Services
@inject ToastService ToastService
@inject IJSRuntime JSRuntime
@implements IDisposable

<!-- Contenedor de toasts en la parte superior central -->
<div class="toast-container position-fixed top-0 start-50 translate-middle-x p-3" style="z-index: 1055; min-width: 350px; margin-top: 20px;">
    @foreach (var toast in toasts)
    {        <div id="toast-@toast.Id" class="toast align-items-center text-white border-0 @GetToastClass(toast.Type) mb-2" 
             role="alert" aria-live="assertive" aria-atomic="true" 
             data-bs-autohide="true" data-bs-delay="@toast.Duration" 
             style="width: 100%; min-width: 300px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));">
            <div class="d-flex">
                <div class="toast-body d-flex align-items-center">
                    <i class="@GetIconClass(toast.Type) me-2"></i>
                    <span>@toast.Message</span>
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" 
                        @onclick="() => RemoveToast(toast.Id)"></button>
            </div>
        </div>
    }
</div>

@code {
    private List<ToastModel> toasts = new();
    
    protected override void OnInitialized()
    {
        ToastService.OnToastRequested += ShowToast;
    }
    
    public void Dispose()
    {
        ToastService.OnToastRequested -= ShowToast;
    }
      public class ToastModel
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Message { get; set; } = "";
        public ToastType Type { get; set; }
        public int Duration { get; set; } = 4000;
    }
      private async void ShowToast(string message, ToastType type, int duration)
    {
        var toast = new ToastModel
        {
            Message = message,
            Type = type,
            Duration = duration
        };
        
        toasts.Add(toast);
        await InvokeAsync(StateHasChanged);
        
        // Mostrar el toast usando Bootstrap JS
        await JSRuntime.InvokeVoidAsync("showToast", toast.Id);
        
        // Auto-remover despuÃ©s del tiempo especificado
        _ = Task.Run(async () =>
        {
            await Task.Delay(duration);
            await InvokeAsync(() =>
            {
                RemoveToast(toast.Id);
            });
        });
    }
      private async void RemoveToast(string id)
    {
        toasts.RemoveAll(t => t.Id == id);
        await InvokeAsync(StateHasChanged);
    }
      private string GetToastClass(ToastType type) => type switch
    {
        ToastType.Success => "bg-success",
        ToastType.Error => "bg-danger",
        ToastType.Warning => "bg-warning",
        ToastType.Info => "bg-primary",
        _ => "bg-primary"
    };
    
    private string GetIconClass(ToastType type) => type switch
    {
        ToastType.Success => "bi bi-check-circle-fill",
        ToastType.Error => "bi bi-exclamation-triangle-fill",
        ToastType.Warning => "bi bi-exclamation-circle-fill",
        ToastType.Info => "bi bi-info-circle-fill",
        _ => "bi bi-info-circle-fill"
    };
}
