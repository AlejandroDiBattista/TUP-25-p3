@page "/"
@using cliente.Models
@inject ApiService ApiService
@inject CarritoService CarritoService
@inject IJSRuntime JS

<div class="catalogo-container">
    <h1 class="text-center mb-4">Catálogo de Productos</h1>
    
    <div class="mb-4">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" 
                   class="form-control form-control-lg" 
                   placeholder="Buscar productos..." 
                   @bind="busqueda" 
                   @bind:event="oninput" />
        </div>
    </div>

    @if (cargando)
    {
        <div class="d-flex justify-content-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (productos != null && productos.Any())
    {
        <div class="productos-grid">
            @foreach (var producto in productos.Where(p => 
                string.IsNullOrWhiteSpace(busqueda) || 
                p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase)))
            {
                <div class="producto-card">
                    <img src="@($"http://localhost:5184{producto.ImagenUrl}")" 
                         class="producto-imagen" 
                         alt="@producto.Nombre">
                    <div class="producto-detalles">
                        <h4 class="mb-2">@producto.Nombre</h4>
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">USD @producto.Precio.ToString("N2")</h5>
                            <span class="@(producto.Stock <= 3 ? "badge bg-danger" : "text-muted")">
                                @(producto.Stock <= 3 ? $"¡Últimas {producto.Stock} unidades!" : $"Stock: {producto.Stock}")
                            </span>
                        </div>
                        <div class="d-grid gap-2 mt-auto">
                            <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto)">
                                <i class="bi bi-cart-plus me-2"></i>Agregar al carrito
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="() => MostrarModal(producto)">
                                <i class="bi bi-info-circle me-2"></i>Ver detalles
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (mostrarToast)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 11">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <i class="bi bi-cart-check me-2"></i>
                <strong class="me-auto">Producto agregado</strong>
                <button type="button" class="btn-close" @onclick="() => mostrarToast = false"></button>
            </div>
            <div class="toast-body">
                @toastMensaje
            </div>
        </div>
    </div>
}

@if (productoSeleccionado != null)
{
    <div class="modal fade show d-block" style="background-color: rgba(0,0,0,0.5)">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@productoSeleccionado.Nombre</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <img src="@($"http://localhost:5184{productoSeleccionado.ImagenUrl}")" 
                         class="img-fluid mb-3" 
                         alt="@productoSeleccionado.Nombre">
                    <p>@productoSeleccionado.Descripcion</p>
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">USD @productoSeleccionado.Precio.ToString("N2")</h5>
                        <span class="@(productoSeleccionado.Stock <= 3 ? "badge bg-danger" : "text-muted")">
                            Stock: @productoSeleccionado.Stock
                        </span>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                    <button type="button" class="btn btn-primary" @onclick="() => AgregarAlCarrito(productoSeleccionado)">
                        <i class="bi bi-cart-plus me-2"></i>Agregar al carrito
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Producto> productos;
    private string error;
    private bool cargando = true;
    private bool mostrarToast = false;
    private string toastMensaje = "";
    private Producto productoSeleccionado;
    private string busqueda = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productos = await ApiService.ObtenerProductosAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
        }
    }

    private void AgregarAlCarrito(Producto producto)
    {
        CarritoService.AgregarAlCarrito(producto, 1);
        toastMensaje = $"{producto.Nombre} agregado al carrito";
        mostrarToast = true;
        InvokeAsync(async () =>
        {
            await Task.Delay(3000);
            mostrarToast = false;
            StateHasChanged();
        });
    }

    private void MostrarModal(Producto producto)
    {
        productoSeleccionado = producto;
    }

    private void CerrarModal()
    {
        productoSeleccionado = null;
    }
}
