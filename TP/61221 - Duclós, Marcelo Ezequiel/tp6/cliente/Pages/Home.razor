@page "/"
@using cliente.Models
@inject ApiService ApiService
@inject CarritoService CarritoService

<PageTitle>Productos</PageTitle>

@if (mostrarToast)
{
    <div class="toast align-items-center text-bg-success border-0 show position-fixed bottom-0 end-0 m-4" style="z-index:9999; min-width:220px;">
        <div class="d-flex">
            <div class="toast-body">
                <span class="bi bi-check-circle me-2"></span>@toastMensaje
            </div>
        </div>
    </div>
}

@if (productoSeleccionado != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);" @onclick="CerrarModal">
        <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation>
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@productoSeleccionado.Nombre</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body text-center">
                    <img src="@($"http://localhost:5184{productoSeleccionado.ImagenUrl}")"
                         alt="@productoSeleccionado.Nombre"
                         style="max-width: 250px; max-height: 250px; object-fit: contain; margin-bottom: 1rem;" />
                    <p class="mt-2">@productoSeleccionado.Descripcion</p>
                    <p><strong>Precio:</strong> USD @productoSeleccionado.Precio.ToString("F2")</p>
                    <p><strong>Stock:</strong> @productoSeleccionado.Stock</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="container">
    <h2 class="my-4 text-center">Catálogo de Productos</h2>
    <input class="form-control mb-4" placeholder="Buscar producto..." @bind="busqueda" />
    @if (cargando)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (productos != null && productos.Any())
    {
        <div class="row justify-content-center">
            @foreach (var producto in productos.Where(p => string.IsNullOrWhiteSpace(busqueda) || p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase)))
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4 d-flex align-items-stretch">
                    <div class="card shadow-sm w-100">
                        <img src="@($"http://localhost:5184{producto.ImagenUrl}")" class="card-img-top" alt="@producto.Nombre" style="max-height:200px;object-fit:contain;">
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@producto.Nombre</h5>
                            <p><strong>Precio:</strong> USD @producto.Precio.ToString("F2")</p>
                            @if (producto.Stock <= 3)
                            {
                                <p><span class="badge bg-danger">¡Últimas unidades!</span></p>
                            }
                            else
                            {
                                <p><strong>Stock:</strong> @producto.Stock</p>
                            }
                            <button class="btn btn-primary mt-auto mb-2 d-flex align-items-center justify-content-center gap-2"
                                    @onclick="() => AgregarAlCarrito(producto)">
                                <span class="bi bi-cart-plus"></span> Agregar al carrito
                            </button>
                            <button class="btn btn-outline-secondary mb-2 d-flex align-items-center justify-content-center gap-2"
                                    @onclick="() => MostrarModal(producto)">
                                <span class="bi bi-info-circle"></span> Ver detalles
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger">@error</div>
    }
    else
    {
        <div>No hay productos disponibles.</div>
    }
</div>

@code {
    private List<Producto> productos;
    private string error;
    private bool cargando = true;
    private bool mostrarToast = false;
    private string toastMensaje = "";

    private Producto productoSeleccionado;
    private string busqueda = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productos = await ApiService.ObtenerProductosAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
        }
    }

    private void AgregarAlCarrito(Producto producto)
    {
        CarritoService.AgregarAlCarrito(producto, 1);
        toastMensaje = $"{producto.Nombre} agregado al carrito";
        mostrarToast = true;
        _ = OcultarToast();
    }

    private async Task OcultarToast()
    {
        await Task.Delay(1800);
        mostrarToast = false;
        StateHasChanged();
    }

    private void MostrarModal(Producto producto)
    {
        productoSeleccionado = producto;
    }

    private void CerrarModal()
    {
        productoSeleccionado = null;
    }
}
