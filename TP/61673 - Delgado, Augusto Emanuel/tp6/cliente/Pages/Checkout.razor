@page "/checkout"
@using modelos_compartidos // Asegúrate de que tus modelos de Producto y StockUpdateDto estén aquí
@inject cliente.Services.CarritoService CarritoService
@inject cliente.Services.ApiService ApiService
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<PageTitle>Finalizar Compra</PageTitle>

<div class="checkout-container">
    <h3>Finalizar Compra</h3>

    @if (CarritoService.Items.Any())
    {
        <div class="row">
            <div class="col-md-8">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h5>Resumen del Pedido</h5>
                    </div>
                    <ul class="list-group list-group-flush">
                        @foreach (var item in CarritoService.Items)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <img src="@item.Producto.ImagenUrl" alt="@item.Producto.Nombre" class="img-thumbnail me-3" style="width: 50px; height: 50px; object-fit: cover;">
                                    <div>
                                        <strong>@item.Producto.Nombre</strong>
                                        <small class="text-muted d-block">@item.Cantidad x $@item.Producto.Precio</small>
                                    </div>
                                </div>
                                <span>$@(item.Producto.Precio * item.Cantidad)</span>
                            </li>
                        }
                        <li class="list-group-item d-flex justify-content-between align-items-center fw-bold fs-5">
                            Total a Pagar:
                            <span>$@CarritoService.TotalCarrito</span>
                        </li>
                    </ul>
                </div>

                <div class="card mb-4">
                    <div class="card-header bg-info text-white">
                        <h5>Información de Contacto y Envío</h5>
                    </div>
                    <div class="card-body">
                        <EditForm Model="checkoutForm" OnValidSubmit="ProcesarCheckout" class="checkout-form">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <fieldset class="form-section">
                                <legend class="form-section-title"><i class="bi bi-person-fill"></i> Datos Personales</legend>
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="nombre" class="form-label">Nombre</label>
                                        <InputText id="nombre" class="form-control" @bind-Value="checkoutForm.Nombre" placeholder="Tu nombre"></InputText>
                                        <ValidationMessage For="@(() => checkoutForm.Nombre)" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="apellido" class="form-label">Apellido</label>
                                        <InputText id="apellido" class="form-control" @bind-Value="checkoutForm.Apellido" placeholder="Tu apellido"></InputText>
                                        <ValidationMessage For="@(() => checkoutForm.Apellido)" class="text-danger" />
                                    </div>
                                    <div class="col-12">
                                        <label for="email" class="form-label">Email</label>
                                        <InputText id="email" type="email" class="form-control" @bind-Value="checkoutForm.Email" placeholder="correo@ejemplo.com"></InputText>
                                        <ValidationMessage For="@(() => checkoutForm.Email)" class="text-danger" />
                                    </div>
                                </div>
                            </fieldset>

                            <fieldset class="form-section mt-4">
                                <legend class="form-section-title"><i class="bi bi-geo-alt-fill"></i> Dirección de Envío</legend>
                                <div class="row g-3">
                                    <div class="col-12">
                                        <label for="direccion" class="form-label">Dirección</label>
                                        <InputText id="direccion" class="form-control" @bind-Value="checkoutForm.Direccion" placeholder="123 Calle Principal"></InputText>
                                        <ValidationMessage For="@(() => checkoutForm.Direccion)" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="ciudad" class="form-label">Ciudad</label>
                                        <InputText id="ciudad" class="form-control" @bind-Value="checkoutForm.Ciudad" placeholder="Tu ciudad"></InputText>
                                        <ValidationMessage For="@(() => checkoutForm.Ciudad)" class="text-danger" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="codigoPostal" class="form-label">Código Postal</label>
                                        <InputText id="codigoPostal" class="form-control" @bind-Value="checkoutForm.CodigoPostal" placeholder="C.P."></InputText>
                                        <ValidationMessage For="@(() => checkoutForm.CodigoPostal)" class="text-danger" />
                                    </div>
                                </div>
                            </fieldset>

                            <div class="col-12 text-end mt-4">
                                <button type="submit" class="btn btn-success btn-lg">Confirmar Compra ($@CarritoService.TotalCarrito)</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card p-3 sticky-top" style="top: 80px;">
                    <h4 class="mb-3">Tu Pedido Final</h4>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Subtotal Productos:
                            <span>$@CarritoService.TotalCarrito</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Envío:
                            <span>$0.00</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center fw-bold fs-4 text-success">
                            Total Final:
                            <span>$@CarritoService.TotalCarrito</span>
                        </li>
                    </ul>
                    <p class="mt-3 text-muted small text-center">Al confirmar, se simulará el proceso de pago y se vaciará tu carrito.</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-cart-x display-1 text-muted"></i>
            <p class="lead mt-3">Tu carrito está vacío. No puedes finalizar la compra.</p>
            <a href="/" class="btn btn-primary mt-3">Volver a la Tienda</a>
        </div>
    }
</div>

@if (compraExitosa)
{
    <div class="alert alert-success mt-4 text-center" role="alert">
        <h4 class="alert-heading">¡Compra Exitosa!</h4>
        <p>Gracias por tu compra. Tu pedido ha sido procesado.</p>
        <hr>
        <p class="mb-0">Pronto recibirás un correo electrónico con los detalles de tu pedido.</p>
        <button class="btn btn-primary mt-3" @onclick="VolverAlInicio">Volver al Inicio</button>
    </div>
}
else if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger mt-4 text-center" role="alert">
        <h4 class="alert-heading">Error al finalizar la compra</h4>
        <p>@mensajeError</p>
        <hr>
        <p class="mb-0">Por favor, inténtalo de nuevo o contacta con soporte.</p>
    </div>
}

@code {
    #nullable enable

    public class CheckoutFormModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La dirección es obligatoria")]
        public string Direccion { get; set; } = string.Empty;

        [Required(ErrorMessage = "La ciudad es obligatoria")]
        public string Ciudad { get; set; } = string.Empty;

        [Required(ErrorMessage = "El código postal es obligatorio")]
        public string CodigoPostal { get; set; } = string.Empty;
    }

    private CheckoutFormModel checkoutForm = new CheckoutFormModel();
    private bool compraExitosa = false;
    private string mensajeError = string.Empty;

    protected override void OnInitialized()
    {
        CarritoService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        CarritoService.OnChange -= StateHasChanged;
    }

    private async Task ProcesarCheckout()
    {
        Console.WriteLine("--> DEBUG: ProcesarCheckout ha sido llamado.");
        mensajeError = string.Empty;

        var stockUpdates = new List<StockUpdateDto>();
        foreach (var item in CarritoService.Items)
        {
            stockUpdates.Add(new StockUpdateDto
            {
                ProductoId = item.Producto.Id,
                CantidadVendida = item.Cantidad
            });
        }

        bool stockActualizado = await ApiService.UpdateStock(stockUpdates);

        if (stockActualizado)
        {
            Console.WriteLine("--> DEBUG: Stock actualizado en el servidor.");
            CarritoService.VaciarCarrito();
            compraExitosa = true;
        }
        else
        {
            Console.WriteLine("--> ERROR: Fallo al actualizar stock en el servidor.");
            mensajeError = "No se pudo finalizar la compra. Por favor, inténtalo de nuevo.";
        }

        StateHasChanged();
    }

    private async Task VolverAlInicio()
    {
        Console.WriteLine("--> DEBUG: Botón 'Volver al Inicio' clickeado. Esperando un momento antes de navegar...");
        await Task.Delay(50);
        Navigation.NavigateTo("/");
        Console.WriteLine("--> DEBUG: Navegación a / iniciada.");
    }
}
