@page "/carrito"
@using cliente.Modelos
@using cliente.Services
@inject ServicioCarrito Carritoo
@inject HttpClient Http
@inject NavigationManager Nav
@inject IJSRuntime JS


<h3>Carrito de compras</h3>

@if (Carritoo.Items.Count == 0)
{
    <p>El carrito está vacío.</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Carritoo.Items)
            {
                <tr>
                    <td>@item.Producto.Nombre</td>
                    <td>@item.Cantidad</td>
                    <td>$@item.Producto.Precio</td>
                    <td>$@(item.Producto.Precio * item.Cantidad)</td>
                    <td>
                        <button @onclick="() => QuitarDelCarrito(item.Producto)">Quitar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <p><b>Total: $@Carritoo.Items.Sum(i => i.Producto.Precio * i.Cantidad)</b></p>
    <h3>Productos</h3>
    <p>Productos: @Carritoo.Items.Sum(i => i.Cantidad)</p>
    <button @onclick="VaciarCarrito">Vaciar carrito</button> 
    <button @onclick="ConfirmarCompra" disabled="@(!Carritoo.Items.Any())">Confirmar compra</button>
}

@if (mensajeCompra != null)
{
    <p>@mensajeCompra</p>
    <button @onclick="PreguntarRedireccion">Volver a productos</button>
}

@if (mensajeVaciado != null)
{
    <p>@mensajeVaciado</p>
    <button @onclick="RedireccionarAProductos">Volver a productos</button>
}

@code {
    string mensajeCompra = null;
    string mensajeVaciado = null;

    protected override void OnInitialized()
    {
        Carritoo.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        Carritoo.OnChange -= StateHasChanged;
    }

    void QuitarDelCarrito(Producto producto)
    {
        Carritoo.QuitarDelCarrito(producto);
    }

    void VaciarCarrito()
    {
        Carritoo.VaciarCarrito();
        mensajeVaciado = "El carrito fue vaciado correctamente.";
    }

    async Task ConfirmarCompra()
    {
        var compra = new
        {
            Items = Carritoo.Items.Select(i => new {
                productoId = i.Producto.Id,
                cantidad = i.Cantidad
            }).ToList()
        };

        var respuesta = await Http.PostAsJsonAsync("compras", compra); 

        if (respuesta.IsSuccessStatusCode)
        {
            mensajeCompra = "¡Compra realizada con éxito!";
            Carritoo.VaciarCarrito();
        }
        else
        {
            mensajeCompra = "Hubo un error al procesar la compra.";
        }
    }

    async Task PreguntarRedireccion()
    {
        bool ok = await JS.InvokeAsync<bool>("confirm", "¿Desea volver al menú principal de productos?");
        if (ok)
        {
            Nav.NavigateTo("/productos");
        }
    }

    void RedireccionarAProductos()
    {
        Nav.NavigateTo("/productos");
    }
}