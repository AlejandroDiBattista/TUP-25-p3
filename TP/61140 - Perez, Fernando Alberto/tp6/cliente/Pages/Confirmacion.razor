@page "/confirmacion"

<h1>Confirmaci√≥n de Compra</h1>

@if (carrito.Count == 0)
{
    <p>No hay productos en el carrito para confirmar la compra.</p>
}
else
{
    <div>
        <h3>Resumen de la Compra</h3>
        <ul>
            @foreach (var item in carrito)
            {
                <li>@item.Cantidad x @item.Producto.Nombre (@item.Producto.Precio c/u)</li>
            }
        </ul>
        <p><strong>Total: $@carrito.Sum(i => i.Cantidad * i.Producto.Precio)</strong></p>
    </div>

    <div>
        <h3>Datos del Cliente</h3>
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <input id="nombre" class="form-control" @bind="nombre" />
        </div>
        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido</label>
            <input id="apellido" class="form-control" @bind="apellido" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input id="email" type="email" class="form-control" @bind="email" />
        </div>
        <button class="btn btn-success" @onclick="ConfirmarCompra">Confirmar Compra</button>
    </div>
}

@code {
    @inject cliente.Services.ApiService ApiService

    private List<ItemCarrito> carrito = new();
    private string nombre = string.Empty;
    private string apellido = string.Empty;
    private string email = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carrito = await ApiService.ObtenerCarritoAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar el carrito: {ex.Message}");
        }
    }

    private async Task ConfirmarCompra()
    {
        if (string.IsNullOrWhiteSpace(nombre) || string.IsNullOrWhiteSpace(apellido) || string.IsNullOrWhiteSpace(email))
        {
            Console.WriteLine("Por favor, complete todos los campos.");
            return;
        }

        try
        {
            await ApiService.ConfirmarCompraAsync(new Cliente { Nombre = nombre, Apellido = apellido, Email = email });
            Console.WriteLine("Compra confirmada");
            carrito.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al confirmar la compra: {ex.Message}");
        }
    }

    private class ItemCarrito
    {
        public Producto Producto { get; set; } = null!;
        public int Cantidad { get; set; }
    }

    private class Producto
    {
        public string Nombre { get; set; } = string.Empty;
        public decimal Precio { get; set; }
    }

    private class Cliente
    {
        public string Nombre { get; set; } = string.Empty;
        public string Apellido { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
    }
}