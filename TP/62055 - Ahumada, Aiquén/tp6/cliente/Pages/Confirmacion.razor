@page "/confirmacion"
@inject cliente.Services.CarritoService CarritoService
@inject NavigationManager Navigation
@inject cliente.Services.ApiService ApiService
@using System.ComponentModel.DataAnnotations
@using cliente.Models
@using cliente.Services

<div class="contenido-con-margen">
<div class="inicio">
<nav class="navbar navbar-expand-lg bg-body-tertiary fixed-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="img/logo2.jpeg" alt="Logo" width="100" height="55" class="d-inline-block align-text-top">
      </a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Inicio</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/productos">Productos</a>
          </li>
          <li class="nav-item">
            <a class="nav-link d-flex align-items-center position-relative" href="/carrito">
              <span class="bi bi-cart" style="font-size: 1.3em; margin-right: 0.3em;"></span>
              <span style="margin-right: 0.3em;">Carrito</span>
              <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                @CarritoService.Items.Sum(i => i.Cantidad)
              </span>
            </a>
          </li>
        </ul>
      </div>
    </div>
</nav>
</div>

<h3>Confirmación de compra</h3>
@if (!compraConfirmada)
{
   

    <div class="mb-3">
        <strong>Total ítems:</strong> @CarritoService.TotalItems() <br />
        <strong>Importe total:</strong> $@CarritoService.Total()
    </div>
    <EditForm Model="@form" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="@form.Nombre" />
        </div>
        <div class="mb-2">
            <label>Apellido:</label>
            <InputText class="form-control" @bind-Value="@form.Apellido" />
        </div>
        <div class="mb-2">
            <label>Email:</label>
            <InputText class="form-control" @bind-Value="@form.Email" />
        </div>
        <button class="btn btn-success" type="submit">Confirmar compra</button>
    </EditForm>
   
    
}

else
{
    <div class="confirmacion-centro">
        <div class="alert alert-success mt-4 text-center">
            <h2>¡Gracias por su compra!</h2>
            <p><strong>Nombre:</strong> @form.Nombre</p>
            <p><strong>Apellido:</strong> @form.Apellido</p>
            <p><strong>Email:</strong> @form.Email</p>
            <hr />
            <h4>Detalle de la compra:</h4>
            <ul class="list-group mb-3">
                @foreach (var item in itemsComprados)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @item.Producto.Nombre
                        <span>x @item.Cantidad - $@(item.Producto.Precio * item.Cantidad)</span>
                    </li>
                }
            </ul>
            <h5 class="mt-3">Importe total pagado: <span class="text-success">$@ImporteTotal()</span></h5>
        </div>
    </div>
    <button class="btn btn-primary mt-3" @onclick="VolverAlCatalogo">Volver al catálogo</button>
}

</div>

@code {
    private CompraForm form = new();
    private bool compraConfirmada = false;
    private List<ItemCarrito> itemsComprados = new();

    private async Task OnSubmit()
    {
        var compra = new CompraDTO
        {
            Nombre = form.Nombre,
            Apellido = form.Apellido,
            Email = form.Email,
            Items = CarritoService.Items.Select(i => new ItemCompraDTO
            {
                ProductoId = i.Producto.Id,
                NombreProducto = i.Producto.Nombre,
                PrecioUnitario = i.Producto.Precio,
                Cantidad = i.Cantidad
            }).ToList()
        };

        // Guarda los items antes de vaciar el carrito
        itemsComprados = CarritoService.Items.Select(i => new ItemCarrito
        {
            Producto = i.Producto,
            Cantidad = i.Cantidad
        }).ToList();

        await ApiService.RegistrarCompraAsync(compra);
        compraConfirmada = true;
        CarritoService.Vaciar();
    }

    private decimal ImporteTotal()
    {
        return itemsComprados.Sum(i => i.Producto.Precio * i.Cantidad);
    }

    private void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/catalogo");
    }

    public class CompraForm
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }
        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; }
        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; }
    }
}