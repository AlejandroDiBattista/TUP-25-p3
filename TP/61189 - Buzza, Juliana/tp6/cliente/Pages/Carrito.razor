@page "/carrito"
@inject cliente.Services.ApiService ApiService
@inject cliente.Services.ApiService.CartStateService CartStateService
@inject NavigationManager Navigation

<PageTitle>CalzadoEstilo - Carrito</PageTitle>

<h1 class="text-4xl font-extrabold text-center text-brown mb-8" style="font-family: 'Inter', sans-serif;">Tu Carrito de Compras</h1>

@if (Loading)
{
    <p class="text-center text-gray-600">Cargando carrito...</p>
    <div class="flex justify-center items-center h-64">
        <div class="loader ease-linear rounded-full border-8 border-t-8 border-gray-200 h-24 w-24"></div>
    </div>
}
else if (CartItems.Any())
{
    <div class="bg-white rounded-lg shadow-lg p-6 mb-8 border border-gray-200">
        <div class="grid grid-cols-5 gap-4 font-semibold text-brown border-b pb-3 mb-4">
            <div class="col-span-2">Producto</div>
            <div>Cantidad</div>
            <div>Precio Unitario</div>
            <div>Importe</div>
        </div>
        @foreach (var item in CartItems)
        {
            <div class="grid grid-cols-5 gap-4 items-center py-4 border-b border-gray-100 last:border-b-0">
                <div class="col-span-2 flex items-center space-x-4">
                    <img src="@item.ProductoImagenUrl" alt="@item.ProductoNombre" class="w-20 h-20 object-cover rounded-lg shadow-sm">
                    <span class="text-gray-800 font-medium">@item.ProductoNombre</span>
                </div>
                <div class="flex items-center space-x-2">
                    <button @onclick="() => UpdateQuantity(item, item.Cantidad - 1)"
                            class="bg-gray-200 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 transition-colors duration-200 flex items-center justify-center"
                            disabled="@(item.Cantidad <= 1)">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4"></path></svg>
                    </button>
                    <span class="font-bold text-lg text-brown">@item.Cantidad</span>
                    <button @onclick="() => UpdateQuantity(item, item.Cantidad + 1)"
                            class="bg-gray-200 text-gray-700 px-3 py-1 rounded-full hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 transition-colors duration-200 flex items-center justify-center"
                            disabled="@(item.Cantidad >= item.ProductoStock)">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                    </button>
                </div>
                <div class="text-gray-700">€@item.PrecioUnitario</div>
                <div class="text-gray-900 font-bold">€@(item.Cantidad * item.PrecioUnitario)</div>
            </div>
        }
        <div class="flex justify-end items-center mt-6 pt-4 border-t border-gray-200">
            <span class="text-2xl font-bold text-brown mr-4">Total: €@TotalPrice</span>
        </div>
    </div>

    <div class="flex justify-between space-x-4">
        <button @onclick="ClearCart"
                class="flex-1 bg-red-500 text-white py-3 px-6 rounded-full font-semibold hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 transition-all duration-300 shadow-md">
            Vaciar Carrito
        </button>
        <button @onclick="ConfirmPurchase"
                class="flex-1 bg-accent text-white py-3 px-6 rounded-full font-semibold hover:bg-darkbrown focus:outline-none focus:ring-2 focus:ring-brown-light focus:ring-opacity-75 transition-all duration-300 shadow-md">
            Confirmar Compra
        </button>
    </div>
}
else
{
    <p class="text-center text-gray-600 text-lg">Tu carrito está vacío.</p>
    <div class="flex justify-center mt-6">
        <a href="/" class="bg-brown text-white py-3 px-6 rounded-full font-semibold hover:bg-darkbrown transition-all duration-300 shadow-md">
            Volver al Catálogo
        </a>
    </div>
}

@if (!string.IsNullOrEmpty(Message))
{
    <div class="fixed top-24 right-4 bg-red-500 text-white p-4 rounded-lg shadow-lg transform transition-transform duration-300 @(ShowMessage ? "translate-x-0 opacity-100" : "translate-x-full opacity-0")" role="alert">
        @Message
    </div>
}

@code {
    private List<cliente.Models.CarritoItemDto> CartItems = new(); 
    private bool Loading = true;
    private int? CartId; 
    private decimal TotalPrice => CartItems.Sum(item => item.Cantidad * item.PrecioUnitario);
    private string? Message; 
    private bool ShowMessage = false;
    private System.Timers.Timer? messageTimer; 

    protected override async Task OnInitializedAsync()
    {
        CartId = CartStateService.CartId;
        if (CartId == null)
        {
            Loading = false;
            return;
        }
        await LoadCartItems();
    }

    private async Task LoadCartItems()
    {
        Loading = true;
        try
        {
            if (CartId.HasValue)
            {
                CartItems = await ApiService.GetCartItems(CartId.Value);
            }
            else
            {
                CartItems = new();
            }
        }
        catch (HttpRequestException ex)
        {
            ShowNotification($"Error al cargar los ítems del carrito: {ex.Message}");
            CartItems = new(); 
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task UpdateQuantity(cliente.Models.CarritoItemDto item, int newQuantity)
    {
        if (CartId == null) return;

        if (newQuantity <= 0)
        {
            await RemoveItem(item);
        }
        else if (newQuantity > item.ProductoStock)
        {
            ShowNotification($"No hay suficiente stock para {item.ProductoNombre}. Stock disponible: {item.ProductoStock}");
        }
        else
        {
            try
            {
                await ApiService.AddOrUpdateProductInCart(CartId.Value, item.ProductoId, newQuantity);
                await LoadCartItems(); 
            }
            catch (HttpRequestException ex)
            {
                ShowNotification($"Error al actualizar la cantidad de {item.ProductoNombre}: {ex.Message}");
            }
        }
    }

    private async Task RemoveItem(cliente.Models.CarritoItemDto item)
    {
        if (CartId == null) return;
        try
        {
            await ApiService.RemoveProductFromCart(CartId.Value, item.ProductoId);
            await LoadCartItems(); 
        }
        catch (HttpRequestException ex)
        {
            ShowNotification($"Error al eliminar {item.ProductoNombre} del carrito: {ex.Message}");
        }
    }

    private async Task ClearCart()
    {
        if (CartId == null) return;
        try
        {
            await ApiService.ClearCart(CartId.Value);
            CartItems.Clear();
            CartStateService.SetCartId(null);
            ShowNotification("Carrito vaciado correctamente.");
        }
        catch (HttpRequestException ex)
        {
            ShowNotification($"Error al vaciar el carrito: {ex.Message}");
        }
    }

    private void ConfirmPurchase()
    {
        if (CartId == null || !CartItems.Any())
        {
            ShowNotification("El carrito está vacío. No se puede confirmar la compra.");
            return;
        }
        Navigation.NavigateTo($"/confirmacion/{CartId.Value}");
    }

    private void ShowNotification(string message)
    {
        Message = message;
        ShowMessage = true;

        if (messageTimer != null)
        {
            messageTimer.Dispose();
        }

        messageTimer = new System.Timers.Timer(3000); 
        messageTimer.Elapsed += (sender, e) =>
        {
            ShowMessage = false;
            InvokeAsync(StateHasChanged);
            messageTimer?.Dispose();
        };
        messageTimer.AutoReset = false;
        messageTimer.Start();
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (messageTimer != null)
        {
            messageTimer.Dispose();
        }
    }
}
