@page "/confirmacion/{CartId:int}"
@inject cliente.Services.ApiService ApiService
@inject cliente.Services.CartStateService CartStateService 
@inject NavigationManager Navigation 

<PageTitle>Paris Shoes - Confirmación</PageTitle>

<h1 class="text-4xl font-extrabold text-center text-black-text mb-8" style="font-family: 'Inter', sans-serif;">Confirmar Compra</h1>

@if (Loading)
{
    <p class="text-center text-dark-gray">Cargando resumen de la compra...</p>
    <div class="flex justify-center items-center h-64">
        <div class="loader ease-linear rounded-full border-8 border-t-8 border-medium-gray h-24 w-24"></div>
    </div>
}
else if (!CartItems.Any())
{
    <p class="text-center text-dark-gray text-lg">No hay ítems en el carrito para confirmar.</p>
    <div class="flex justify-center mt-6">
        <a href="/" class="bg-black-accent text-white-bg py-3 px-6 rounded-full font-semibold hover:bg-dark-gray transition-all duration-300 shadow-md">
            Volver al Catálogo
        </a>
    </div>
}
else
{
    <div class="bg-white-bg rounded-lg shadow-lg p-8 mb-8 border border-medium-gray">
        <h2 class="text-2xl font-bold text-black-text mb-6 border-b pb-3 border-medium-gray">Resumen de la Compra</h2>
        <div class="space-y-4">
            @foreach (var item in CartItems)
            {
                <div class="flex justify-between items-center text-dark-gray">
                    <span>@item.ProductoNombre x @item.Cantidad</span>
                    <span class="font-semibold">@string.Format(new System.Globalization.CultureInfo("es-AR"), "$ {0:N0}", item.Cantidad * item.PrecioUnitario)</span>
                </div>
            }
        </div>
        <div class="flex justify-between items-center font-bold text-2xl text-black-text mt-6 pt-4 border-t border-medium-gray">
            <span>Total:</span>
            <span>@string.Format(new System.Globalization.CultureInfo("es-AR"), "$ {0:N0}", TotalPrice)</span>
        </div>
    </div>

    <div class="bg-white-bg rounded-lg shadow-lg p-8 border border-medium-gray">
        <h2 class="text-2xl font-bold text-black-text mb-6 border-b pb-3 border-medium-gray">Datos del Cliente</h2>
        <EditForm Model="ConfirmationData" OnValidSubmit="HandleConfirmPurchase" class="space-y-6">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="nombre" class="block text-dark-gray text-sm font-bold mb-2">Nombre:</label>
                <InputText id="nombre" @bind-Value="ConfirmationData.NombreCliente" class="shadow appearance-none border border-medium-gray rounded-lg w-full py-3 px-4 text-black-text leading-tight focus:outline-none focus:ring-2 focus:ring-dark-gray focus:border-transparent transition-all duration-200" />
                <ValidationMessage For="@(() => ConfirmationData.NombreCliente)" class="text-red-500 text-xs mt-1" />
            </div>
            <div class="form-group">
                <label for="apellido" class="block text-dark-gray text-sm font-bold mb-2">Apellido:</label>
                <InputText id="apellido" @bind-Value="ConfirmationData.ApellidoCliente" class="shadow appearance-none border border-medium-gray rounded-lg w-full py-3 px-4 text-black-text leading-tight focus:outline-none focus:ring-2 focus:ring-dark-gray focus:border-transparent transition-all duration-200" />
                <ValidationMessage For="@(() => ConfirmationData.ApellidoCliente)" class="text-red-500 text-xs mt-1" />
            </div>
            <div class="form-group">
                <label for="email" class="block text-dark-gray text-sm font-bold mb-2">Email:</label>
                <InputText id="email" @bind-Value="ConfirmationData.EmailCliente" type="email" class="shadow appearance-none border border-medium-gray rounded-lg w-full py-3 px-4 text-black-text leading-tight focus:outline-none focus:ring-2 focus:ring-dark-gray focus:border-transparent transition-all duration-200" />
                <ValidationMessage For="@(() => ConfirmationData.EmailCliente)" class="text-red-500 text-xs mt-1" />
            </div>

            <div class="flex flex-wrap justify-between gap-4 mt-6">
                <button type="button" @onclick="HandleCancelPurchase"
                        class="flex-1 bg-dark-gray text-white-bg py-3 px-6 rounded-full font-semibold hover:bg-black-accent focus:outline-none focus:ring-2 focus:ring-medium-gray transition-all duration-300 shadow-md">
                    Cancelar Compra
                </button>
                <button type="submit"
                        class="flex-1 bg-black-accent text-white-bg py-3 px-6 rounded-full font-semibold hover:bg-dark-gray focus:outline-none focus:ring-2 focus:ring-medium-gray focus:ring-opacity-75 transition-all duration-300 shadow-md flex items-center justify-center space-x-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                    <span>Confirmar Compra</span>
                </button>
            </div>
        </EditForm>
    </div>
}

@if (!string.IsNullOrEmpty(Message))
{
    <div class="fixed top-24 right-4 text-white-bg p-4 rounded-lg shadow-lg transform transition-transform duration-300 @(ShowMessage ? "translate-x-0 opacity-100" : "translate-x-full opacity-0") @(isError ? "bg-red-500" : "bg-green-500")" role="alert">
        @Message
    </div>
}

@code {
    [Parameter]
    public int CartId { get; set; }

    private List<cliente.Models.CarritoItemDto> CartItems = new();
    private cliente.Models.CompraConfirmationDto ConfirmationData = new();
    private bool Loading = true;
    private decimal TotalPrice => CartItems.Sum(item => item.Cantidad * item.PrecioUnitario);
    private string? Message;
    private bool ShowMessage = false;
    private bool isError = false; 
    private System.Timers.Timer? messageTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCartSummary();
    }

    private async Task LoadCartSummary()
    {
        Loading = true;
        try
        {
            CartItems = await ApiService.GetCartItems(CartId);
        }
        catch (Exception ex) 
        {
            ShowNotification($"Error al cargar el resumen del carrito: {ex.Message}", true); 
            CartItems = new();
        }
        finally
        {
            Loading = false;
        }
    }

    private async Task HandleConfirmPurchase()
    {
        ShowNotification(null, false); 

        try
        {
            var result = await ApiService.ConfirmPurchase(CartId, ConfirmationData);
            cliente.Models.Compra? confirmedCompra = result.Item1;
            string? errorMessage = result.Item2;

            if (errorMessage != null)
            {
                ShowNotification(errorMessage, true);
            }
            else if (confirmedCompra != null)
            {
                CartStateService.SetCartId(null); 
                ShowNotification("¡Compra confirmada con éxito! Volviendo al catálogo en 3 segundos...", false); 
                await Task.Delay(3000);
                Navigation.NavigateTo("/");
            }
            else
            {
                ShowNotification("Error inesperado al confirmar la compra. Intente nuevamente.", true);
            }
        }
        catch (Exception ex) 
        {
            ShowNotification($"Error inesperado al confirmar la compra: {ex.Message}", true);
        }
    }

    private void HandleCancelPurchase()
    {
        ShowNotification(null, false); 
        Navigation.NavigateTo("/carrito"); 
    }

    private void ShowNotification(string? message, bool isError) 
    {
        Message = message;
        this.isError = isError; 
        ShowMessage = !string.IsNullOrEmpty(message); 

        if (messageTimer != null)
        {
            messageTimer.Dispose();
        }

        if (ShowMessage) 
        {
            messageTimer = new System.Timers.Timer(3000); 
            messageTimer.Elapsed += (sender, e) =>
            {
                ShowMessage = false;
                this.isError = false; 
                InvokeAsync(StateHasChanged);
                messageTimer?.Dispose();
            };
            messageTimer.AutoReset = false;
            messageTimer.Start();
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (messageTimer != null)
        {
            messageTimer.Dispose();
        }
    }
}
