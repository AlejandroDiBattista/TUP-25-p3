@page "/"
@using Microsoft.AspNetCore.Components
@inject cliente.Services.ApiService ApiService
@inject NavigationManager Nav
@inject IJSRuntime JS

<div style="width: 100%; display: flex; flex-direction: column; align-items: center;">
    <h2 style="color: rgb(216, 214, 214)">Catálogo de Productos</h2>
    <div class="productos-grid" style="display: flex; flex-wrap: wrap; justify-content: center; gap: 2rem;">
        @if (productos is null)
        {
            <p>Cargando...</p>
        }
        else
        {
            @foreach (var p in productos)
            {
                <div class="producto-card" style="background: rgb(175, 173, 173); border-radius: 8px; box-shadow: 0 2px 8px #bbbbbb; padding: 1rem; width: 220px; display: flex; flex-direction: column; align-items: center;">
                    <img src="@p.ImagenUrl" alt="@p.Nombre" width="120" />
                    <h4>@p.Nombre</h4>
                    <p>@p.Descripcion</p>
                    <p>Precio: $@p.Precio</p>
                    <p>Stock: @p.Stock</p>
                    <button @onclick="() => AgregarAlCarrito(p.Id)" class="boton-oscuro">
                    Agregar al carrito
                </button>
                </div>
            }
        }
    </div>
</div>

@code {
    #nullable enable
    [Parameter]
    [SupplyParameterFromQuery]
    public string? busqueda { get; set; }  
    List<cliente.models.Producto>? productos;

    protected override async Task OnParametersSetAsync()
    {
        await CargarProductos();
    }

    async Task CargarProductos()
    {
        productos = await ApiService.GetProductos(busqueda);
    }

    async Task AgregarAlCarrito(int productoId)
    {
        try
        {
            var storage = new cliente.Services.ApiService.CarritoStorage(JS);
            int carritoId = await ObtenerOCrearCarrito(storage);

            // 1. Agregar o actualizar producto
            await ApiService.AgregarOActualizarProducto(carritoId, productoId, 1);

            // 2. Obtener el carrito actualizado
            var items = await ApiService.GetCarrito(carritoId);

            // 3. Actualizar el contador
            await ApiService.ActualizarContadorCarrito(carritoId);
        }
        catch (Exception ex)
        {
            // Opcional: mostrar el error en pantalla o consola
            Console.WriteLine($"Error al agregar al carrito: {ex.Message}");
        }
    }

    async Task<int> ObtenerOCrearCarrito(cliente.Services.ApiService.CarritoStorage storage)
    {
        var id = await storage.ObtenerCarritoId();
        if (id.HasValue) return id.Value;
        var nuevoId = await ApiService.CrearCarrito();
        await storage.GuardarCarritoId(nuevoId);
        return nuevoId;
    }
}
