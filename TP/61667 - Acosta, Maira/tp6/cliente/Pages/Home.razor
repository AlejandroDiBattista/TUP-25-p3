@page "/"
@using Microsoft.AspNetCore.Components.Web
@using cliente.Services
@using cliente.Models
@using Microsoft.AspNetCore.Components
@inject ApiService ApiService

<style>
.card.producto-hover {
    transition: box-shadow 0.3s, border-color 0.3s;
    border: 2px solid transparent; /* Sin borde visible normalmente */
}
.card.producto-hover:hover {
    border-color: #05467a; /* Borde azul al pasar el mouse */
    box-shadow: 0 0 24px 4px #2196f3aa; /* Luz azul suave */
    cursor: pointer;
}
</style>

<div class="container">
    @if (!mostrarProductos)
    {
        <div class="row mb-4">
            <div class="col-12 text-center">
                <h1>Bienvenido a ElectroHogar</h1>
                <div class="d-flex justify-content-center align-items-center mt-3 gap-3">
                    <button class="btn btn-primary" @onclick="MostrarProductos">Ver productos</button>
                    <button class="btn btn-outline-primary position-relative ms-2" @onclick="AbrirCarrito">
                        🛒 Carrito
                        <span class="badge bg-danger position-absolute top-0 start-100 translate-middle">@cantidadCarrito</span>
                    </button>
                </div>
            </div>
        </div>
    }

    @if (mostrarProductos)
    {
        <div class="d-flex justify-content-end mb-3">
            <button class="btn btn-outline-primary position-relative" @onclick="AbrirCarrito">
                🛒 Carrito
                <span class="badge bg-danger position-absolute top-0 start-100 translate-middle">@cantidadCarrito</span>
            </button>
        </div>

        <hr />

        <!-- Título y buscador alineados -->
        <div class="d-flex align-items-center mb-4">
            <h2 class="mb-0 me-3">Catalogo Productos</h2>
            <div class="input-group w-auto" style="min-width:250px;">
                <input class="form-control"
                       placeholder="Buscar producto..."
                       @bind="textoBusqueda"
                       @bind:event="oninput" />
            </div>
        </div>

        <div class="row mb-2">
            <div class="col-12">
                <h3>Elegí lo mejor para tu hogar!</h3>
            </div>
        </div>

        <div class="row">
            @if (cargandoProductos)
            {
                <div class="col-12">
                    <div class="alert alert-info">Cargando productos...</div>
                </div>
            }
            else if (!string.IsNullOrEmpty(errorProductos))
            {
                <div class="col-12">
                    <div class="alert alert-danger">Error al obtener productos: @errorProductos</div>
                </div>
            }
            else
            {
                @foreach (var producto in ProductosFiltrados)
                {
                    <div class="col-md-4 mb-4">
                        <div class="card h-100 shadow-sm producto-hover">
                            <img src="@producto.ImagenUrl" class="card-img-top" style="width: 100%; height: 220px; object-fit: contain; background: #fff; padding: 10px;" />
                            <div class="card-body">
                                <h5 class="card-title">@producto.Nombre</h5>
                                <p class="card-text">@producto.Descripcion</p>
                                <p><strong>Precio:</strong> $@producto.Precio.ToString("N0")</p>
                                <p><strong>Stock:</strong> @producto.Stock</p>
                            </div>
                            <div class="card-footer bg-transparent">
                                <button class="btn btn-primary w-100" disabled="@(!PuedeAgregar(producto))"
                                        @onclick="() => AgregarAlCarrito(producto.Id)">
                                    Agregar al carrito
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    }

    @if (mostrarCarrito)
    {
        <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Carrito de compras</h5>
                        <button type="button" class="btn-close" @onclick="() => mostrarCarrito = false"></button>
                    </div>
                    <div class="modal-body">
                        @if (!string.IsNullOrEmpty(mensajeCompra))
                        {
                            <div class="alert alert-success">@mensajeCompra</div>
                        }
                        else if (carritoItems.Count == 0)
                        {
                            <p>El carrito está vacío.</p>
                        }
                        else
                        {
                            <ul class="list-group mb-3">
                                @foreach (var item in carritoItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>
                                            <img src="@item.ProductoImagenUrl" width="40" class="me-2" />
                                            @($"{item.ProductoNombre} (x{item.Cantidad})")
                                        </span>
                                        <span>
                                            $@( (item.ProductoPrecio * item.Cantidad).ToString("N0") )
                                            <button class="btn btn-sm btn-danger ms-2" @onclick="() => QuitarDelCarrito(item.ProductoId)">Quitar</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                            <div class="mb-3">
                                <b>Total: $@carritoItems.Sum(i => i.ProductoPrecio * i.Cantidad).ToString("N0")</b>
                            </div>
                            @if (confirmando)
                            {
                                <EditForm Model="this" OnValidSubmit="ConfirmarCompra">
                                    <div class="mb-2">
                                        <input class="form-control mb-2" placeholder="Nombre" @bind="nombreCliente" required />
                                        <input class="form-control mb-2" placeholder="Apellido" @bind="apellidoCliente" required />
                                        <input class="form-control mb-2" placeholder="Email" @bind="emailCliente" type="email" required />
                                    </div>
                                    <button class="btn btn-success" type="submit">Confirmar compra</button>
                                    <button class="btn btn-link" type="button" @onclick="() => confirmando = false">Cancelar</button>
                                </EditForm>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="() => confirmando = true">Confirmar compra</button>
                            }
                        }
                    </div>
                    <div class="modal-footer">
                        @if (carritoItems.Count == 0)
                        {
                            <button class="btn btn-primary" @onclick="() => mostrarCarrito = false">Aceptar</button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="VaciarCarrito">Vaciar carrito</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool mostrarProductos = false;

    private void MostrarProductos()
    {
        mostrarProductos = true;
    }

    private DatosRespuesta datos;
    private string error;
    private bool cargando = false;

    private List<Producto> productos = new();
    private bool cargandoProductos = false;
    private string errorProductos;

    private string carritoId;
    private int cantidadCarrito = 0;
    private List<CarritoItemDto> carritoItems = new();
    private bool mostrarCarrito = false;

    private string nombreCliente = "";
    private string apellidoCliente = "";
    private string emailCliente = "";
    private string mensajeCompra = "";
    private bool confirmando = false;

    // Buscador
    private string textoBusqueda = "";

    private IEnumerable<Producto> ProductosFiltrados =>
        string.IsNullOrWhiteSpace(textoBusqueda)
            ? productos
            : productos.Where(p =>
                (p.Nombre != null && p.Nombre.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase)) ||
                (p.Descripcion != null && p.Descripcion.Contains(textoBusqueda, StringComparison.OrdinalIgnoreCase))
            );

    protected override async Task OnInitializedAsync()
    {
        await ObtenerOCrearCarritoIdAsync();
        await ObtenerProductos();
        await CargarCarritoAsync();
    }

    private async Task ObtenerDatosDelServidor()
    {
        try
        {
            cargando = true;
            error = null;
            datos = await ApiService.ObtenerDatosAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;
            datos = null;
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task ObtenerProductos()
    {
        try
        {
            cargandoProductos = true;
            errorProductos = null;
            productos = await ApiService.ObtenerProductosAsync();
        }
        catch (Exception ex)
        {
            errorProductos = ex.Message;
            productos = new List<Producto>();
        }
        finally
        {
            cargandoProductos = false;
        }
    }

    private async Task ObtenerOCrearCarritoIdAsync()
    {
        if (string.IsNullOrEmpty(carritoId))
        {
            carritoId = await ApiService.CrearCarritoAsync();
        }
    }

    private async Task CargarCarritoAsync()
    {
        carritoItems = await ApiService.ObtenerCarritoAsync(carritoId) ?? new();
        cantidadCarrito = carritoItems.Sum(i => i.Cantidad);
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        mensajeCompra = ""; // Limpia el mensaje al agregar productos
        await ApiService.AgregarAlCarritoAsync(carritoId, productoId);
        await CargarCarritoAsync();
    }

    private async Task QuitarDelCarrito(int productoId)
    {
        mensajeCompra = ""; // Limpia el mensaje al quitar productos
        await ApiService.QuitarDelCarritoAsync(carritoId, productoId);
        await CargarCarritoAsync();
    }

    private async Task VaciarCarrito()
    {
        mensajeCompra = ""; // Limpia el mensaje al vaciar carrito
        await ApiService.VaciarCarritoAsync(carritoId);
        await CargarCarritoAsync();
    }

    private void AbrirCarrito()
    {
        mensajeCompra = "";
        mostrarCarrito = true;
    }

    private async Task ConfirmarCompra()
    {
        if (string.IsNullOrWhiteSpace(nombreCliente) || string.IsNullOrWhiteSpace(apellidoCliente) || string.IsNullOrWhiteSpace(emailCliente))
            return;

        var compra = new
        {
            NombreCliente = nombreCliente,
            ApellidoCliente = apellidoCliente,
            EmailCliente = emailCliente
        };
        var exito = await ApiService.ConfirmarCompraAsync(carritoId, compra);
        if (exito)
        {
            mensajeCompra = "¡Compra confirmada!";
            await CargarCarritoAsync();
            await ObtenerProductos();
            nombreCliente = apellidoCliente = emailCliente = "";
            confirmando = false;
        }
        else
        {
            mensajeCompra = "Error al confirmar la compra.";
        }
    }

    private bool PuedeAgregar(Producto p) => p.Stock > 0;
}