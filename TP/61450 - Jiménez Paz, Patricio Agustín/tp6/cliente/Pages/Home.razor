@page "/"
@using cliente.Services
@using cliente.Models
@inject ApiService ApiService
@inject CarritoService CarritoService
@inject NotificationService NotificationService
@inject NavigationManager Router
@implements IDisposable

<PageTitle>Tienda Online | Blazor</PageTitle>

<h1 class="text-2xl font-bold mb-4">Productos</h1>
@if (cargando) {
    <div class="text-center">
        <p>
            <i class="fas fa-spinner fa-spin mr-2"></i>
            Cargando productos...
        </p>
    </div>
} else {
    <div class="mb-4 grid gap-4 md:grid-cols-2 md:mb-8">
        @if (datos != null) {
            @foreach (var producto in datos) {
                <div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm flex flex-col lg:flex-row gap-4 lg:gap-0 items-stretch justify-between">
                    <div class="flex my-auto flex-col items-center min-w-fit">
                        <div class="h-56">
                            <img class="mx-auto h-full" src="@($"{ApiService.GetApiBaseUrl()}/{producto.ImagenUrl}")" alt="@producto.Nombre" />
                        </div>
                        @if (producto.Stock <= 3) {
                            <div class="flex items-center justify-between gap-4">
                                @if (producto.Stock == 0) {
                                    <span class="me-2 rounded bg-red-100 px-2.5 py-0.5 text-xs font-medium text-red-800"> Sin stock </span>
                                } else {
                                    <span class="me-2 rounded bg-yellow-100 px-2.5 py-0.5 text-xs font-medium text-yellow-800">@(producto.Stock == 1 ? "Último disponible" : $"Quedan {producto.Stock} unidades")! </span>
                                }
                            </div>
                        }
                    </div>
                    <div class="flex flex-col gap-4">
                        <div class="flex flex-col">
                            <h4 class="text-lg text-center mb-2 font-semibold leading-tight text-gray-900">@producto.Nombre</h4>
                            <p class="text-sm hidden lg:block text-gray-900">@producto.Descripcion</p>
                        </div>
                        <div class="flex flex-col items-center mt-auto gap-4">
                            <p class="font-bold leading-tight text-gray-900">@($"${producto.Precio:N2}")</p>

                            <button class="inline-flex items-center rounded-lg bg-violet-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-violet-800 focus:outline-none focus:ring-4  focus:ring-violet-300 whitespace-nowrap" @onclick="() => AgregarItemACarrito(producto.Id)">
                                <i class="fas fa-cart-plus"></i>
                                Añadir al carrito
                            </button>
                        </div>
                    </div>
                </div>
            }
        } else if (error != null) {
            <div class="alert alert-danger">
                Error: @error
            </div>
        }
    </div>
}

@code {
    private List<Producto> datos;
    private string error;
    private bool cargando = true;
    private string terminoBusqueda;

    protected override async Task OnInitializedAsync() {
        Router.LocationChanged += OnLocationChanged;
        terminoBusqueda = ObtenerBusquedaDeUrl();
        await ObtenerDatosDelServidor();
        if (CarritoService.Carrito == null)
        {
            await CarritoService.InicializarCarritoAsync();
        }
    }

    private string ObtenerBusquedaDeUrl()
    {
        var uri = new Uri(Router.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        return query["search"];
    }

    private async void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        terminoBusqueda = ObtenerBusquedaDeUrl();
        StateHasChanged();
        await ObtenerDatosDelServidor();
        StateHasChanged();
    }

    public void Dispose()
    {
        Router.LocationChanged -= OnLocationChanged;
    }

    private async Task ObtenerDatosDelServidor() {
        try {
            cargando = true;
            error = null;
            datos = await ApiService.ObtenerDatosAsync(terminoBusqueda);
        } catch (Exception ex) {
            error = ex.Message;
            datos = null;
        } finally {
            cargando = false;
        }
    }

    private async Task AgregarItemACarrito(int productoId)
    {
        await CarritoService.AgregarItemACarritoAsync(productoId);
        Router.NavigateTo("/carrito");
    }
}
