@inject NavigationManager Nav
@inject ApiService Api
@inject CartStorage Storage

<nav class="navbar navbar-expand-lg" style="background-color: #121212;">
    <div class="container-fluid">
        <a class="navbar-brand text-white" href="/" @onclick="GoHome">
            <img src="images/logo-placeholder.png" alt="Logo" style="height: 60px;" />
        </a>

        <h3>MegaStore</h3>

        <form class="d-flex ms-auto" @onsubmit="DoSearch">
            <input class="form-control me-2" type="search" placeholder="Search..." @bind="SearchTerm" />
            <button class="btn btn-outline-light" type="submit">Search</button>
        </form>

        <button class="btn btn-outline-light position-relative ms-3" @onclick="@(() => Nav.NavigateTo("/cart"))">
            <span class="me-1">üõçÔ∏è</span>
            <span class="badge bg-danger position-absolute top-0 start-100 translate-middle">@CartCount</span>
        </button>
    </div>
</nav>

@code {
    private string SearchTerm = "";
    private int CartCount = 0;
    private string CartId = "";

    protected override async Task OnInitializedAsync()
    {
        CartId = await GetOrCreateCartId();
        await LoadCartCount();
    }

    private void GoHome()
    {
        Nav.NavigateTo("/", forceLoad: true);
    }

    private async Task LoadCartCount()
    {
        var cart = await Api.GetCartAsync(CartId);
        CartCount = cart.Values.Sum();
    }

    private async Task<string> GetOrCreateCartId()
    {
        var existing = await Storage.GetCartIdAsync();
        if (!string.IsNullOrEmpty(existing))
            return existing;

        var id = await Api.CreateCartAsync();
        await Storage.SetCartIdAsync(id);
        return id;
    }

    private void DoSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchTerm))
            Nav.NavigateTo($"/?search={SearchTerm}", forceLoad: true);
        else
            Nav.NavigateTo("/", forceLoad: true);
    }
}