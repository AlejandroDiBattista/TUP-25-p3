@page "/"
@implements IDisposable

@inject NavigationManager Nav
@inject ApiService Api

<h3>Product Catalog</h3>

@if (Products == null)
{
    <p>Loading...</p>
}
else if (Products.Count == 0)
{
    <p>No products found.</p>
}
else
{
    <div class="row">
        @foreach (var product in Products)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" />
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">@product.Description</p>
                        <p><strong>$@product.Price</strong> | Stock: @product.Stock</p>
                        <button class="btn btn-success" @onclick="() => AddToCart(product.Id)">Add to Cart</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Product> Products = new();

    protected override void OnInitialized()
{
    Nav.LocationChanged += OnLocationChanged;
    _ = LoadProducts();
}

    private async Task LoadProducts()
{
    var uri = Nav.ToAbsoluteUri(Nav.Uri);
    var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
    var search = query["search"];

    Products = await Api.GetProductsAsync(search);
    StateHasChanged();
}

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await LoadProducts();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
    }

    private void AddToCart(int productId)
    {
        Nav.NavigateTo($"/cart?add={productId}");
    }
}
