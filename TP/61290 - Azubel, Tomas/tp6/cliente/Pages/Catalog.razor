@page "/"
@inject ApiService Api
@inject NavigationManager Nav
@inject CartStorage Storage

<div class="container mt-4">
    <h3 class="text-center text-light mb-4">Product Catalog</h3>

    @if (Products == null)
    {
        <p class="text-light">Loading...</p>
    }
    else if (Products.Count == 0)
    {
        <p class="text-light">No products found.</p>
    }
    else
    {
        <div class="row">
            @foreach (var product in Products)
            {
                <div class="col-md-4 mb-4">
                    <div class="card bg-dark text-white h-100 shadow-sm border-secondary" style="border-radius: 10px;">
                        <img src="@product.ImageUrl"
                             class="card-img-top"
                             style="height: 130px; object-fit: cover; border-top-left-radius: 10px; border-top-right-radius: 10px;"
                             alt="@product.Name" />
                        <div class="card-body d-flex flex-column p-3">
                            <h6 class="card-title mb-2">@product.Name</h6>
                            <p class="card-text small">@product.Description</p>

                            <p class="mb-2">
                                <strong>$@product.Price</strong> |
                                Stock: @GetAdjustedStock(product.Id, product.Stock)
                            </p>

                            @if (GetAdjustedStock(product.Id, product.Stock) == 0)
                            {
                                <button class="btn btn-secondary btn-sm mt-auto" disabled>Out of Stock</button>
                            }
                            else
                            {
                                <button class="btn btn-danger btn-sm text-white rounded-pill mt-auto"
                                        @onclick="() => AddToCart(product.Id)">
                                    Add to Cart
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Product> Products = new();
    private Dictionary<int, int> CartItems = new(); // ProductId -> Quantity
    private string CartId = "";

    protected override async Task OnInitializedAsync()
    {
        CartId = await GetOrCreateCartId();

        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        var search = System.Web.HttpUtility.ParseQueryString(uri.Query).Get("search");

        Products = await Api.GetProductsAsync(search);
        CartItems = await Api.GetCartAsync(CartId);
    }

    private async Task<string> GetOrCreateCartId()
    {
        var existing = await Storage.GetCartIdAsync();
        if (!string.IsNullOrEmpty(existing))
            return existing;

        var id = await Api.CreateCartAsync();
        await Storage.SetCartIdAsync(id);
        return id;
    }

    private async Task AddToCart(int productId)
    {
        if (CartItems.ContainsKey(productId))
            CartItems[productId]++;
        else
            CartItems[productId] = 1;

        await Api.UpdateCartItemAsync(CartId, productId, CartItems[productId]);

        // actualiza el cat√°logo localmente sin recargar desde el server
        StateHasChanged();
    }

    private int GetAdjustedStock(int productId, int originalStock)
    {
        if (CartItems.TryGetValue(productId, out int inCart))
        {
            var remaining = originalStock - inCart;
            return remaining < 0 ? 0 : remaining;
        }

        return originalStock;
    }
}