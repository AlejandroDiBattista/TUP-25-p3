@page "/confirm"
@inject ApiService Api
@inject CartStorage Storage
@inject NavigationManager Nav
@using System.ComponentModel.DataAnnotations
@using cliente.Models

<h3 class="text-center text-light mb-4">Confirm Purchase</h3>

@if (CartItems == null || CartItems.Count == 0)
{
    <p class="text-light text-center">Your cart is empty.</p>
}
else
{
    <div class="container d-flex justify-content-center">
        <div class="bg-dark text-white p-4 rounded" style="max-width: 500px; width: 100%;">
            <EditForm Model="Customer" OnValidSubmit="ConfirmPurchase">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">First Name</label>
                    <InputText class="form-control" @bind-Value="Customer.FirstName" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Last Name</label>
                    <InputText class="form-control" @bind-Value="Customer.LastName" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="Customer.Email" />
                    <ValidationMessage For="@(() => Customer.Email)" />
                </div>

                <h5>Total: $@CartItems.Sum(i => i.Product.Price * i.Quantity)</h5>

                <div class="text-center mt-4">
                    <button class="btn btn-primary" type="submit">Confirm Purchase</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<CartItemDisplay> CartItems = new();
    private string CartId = "";
    private CustomerInfo Customer = new();

    protected override async Task OnInitializedAsync()
    {
        CartId = await GetOrCreateCartId();
        await LoadCart();
    }

    private async Task LoadCart()
    {
        var cartData = await Api.GetCartAsync(CartId);
        CartItems.Clear();

        foreach (var entry in cartData)
        {
            var product = await Api.GetProductByIdAsync(entry.Key);
            if (product != null)
            {
                CartItems.Add(new CartItemDisplay
                {
                    Product = product,
                    Quantity = entry.Value
                });
            }
        }
    }

    private async Task ConfirmPurchase()
    {
        var result = await Api.ConfirmPurchaseAsync(CartId, Customer);

        if (result > 0)
        {
            await Storage.SetCartIdAsync(""); // limpia el carrito
            Nav.NavigateTo("/");
        }
    }

    private async Task<string> GetOrCreateCartId()
    {
        var existing = await Storage.GetCartIdAsync();
        if (!string.IsNullOrEmpty(existing))
            return existing;

        var id = await Api.CreateCartAsync();
        await Storage.SetCartIdAsync(id);
        return id;
    }

    public class CartItemDisplay
    {
        public Product Product { get; set; } = default!;
        public int Quantity { get; set; }
    }
}