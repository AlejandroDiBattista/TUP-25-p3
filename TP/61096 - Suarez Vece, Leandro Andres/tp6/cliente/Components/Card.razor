@typeparam T where T : ICardItem
@implements IDisposable
@inject ApiService ApiService
@inject NavigationManager Navigation


@code {
    [Parameter]
    public List<T>? Items { get; set; }

}

@foreach (var p in Items ?? new List<T>())
{
    <div class="carta-home">
        <div class="card h-100">
            @if (!string.IsNullOrEmpty(p.ImagenUrl))
            {
                <img src="@p.ImagenUrl" class="card-img-top" alt="Imagen de @p.Nombre">
            }
            <div class="card-body">
                <h5 class="card-title">@p.Nombre</h5>
                <p class="card-text">@p.Descripcion</p>
                <p class="card-text"><strong>Stock:</strong> @GetStockTemporal(p.Id, p.Stock) unidades</p>

                <p class="card-text text-success"><strong>Precio:</strong> $@p.Precio.ToString()</p>
                @if (p is ItemCompraGtDto item)
                {
                    <p class="card-text text-primary"><strong>Costo:</strong> $@item.subTotal</p>
                }
                <div class="d-grid gap-2">
                    @if (ApiService.Compra != null)
                    {

                        <div class="d-flex justify-content-center align-items-center gap-2">
                            <button type="button" class="btn btn-outline-primary"
                                @onclick="()=>ModificarCantidad(p.Id, -1)">-</button>

                            <input type="number" disabled meta-id="@p.Id" min="0" max="@p.Stock" value="@cantidades[p.Id]"
                                class="form-control text-center w-auto border-bottom border-primary" style="max-width: 80px;">

                            <button type="button" class="btn btn-outline-primary"
                                @onclick="()=>ModificarCantidad(p.Id, 1)">+</button>
                        </div>


                        <button type="button" class="btn btn-primary"
                            @onclick="async () => AgregarCarrito(p.Id, p.Precio, p.Stock, p.Nombre)">
                            Agregar/Modificar Carrito
                        </button>
                        @if (Navigation.Uri.Contains("/carrito"))
                        {

                            <button type="button" class="btn btn-danger"
                                @onclick="async () => EliminarDelCarrito(p.Id)">Eliminar</button>
                        }


                    }
                    else
                    {
                        if (!Navigation.Uri.Contains("/historial"))
                        {
                            <button type="button" class="btn btn-primary" @onclick="InicairCarrito">Iniciar compra</button>
                        }

                    }
                </div>
            </div>
        </div>
    </div>
}


@code {

    private Dictionary<int, int> cantidades = new Dictionary<int, int>();
    private Dictionary<int, int> cantidadesPrevias = new Dictionary<int, int>();

    protected override async Task OnInitializedAsync()
    {
        InicializarListaCantidades();

    }

    public void Dispose()
    {
        @* ApiService.OnChange -= StateHasChanged; *@
    }


    private async Task InicairCarrito()
    {
        try
        {
            await ApiService.IniciarCarrito();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al Iniciar al carrito: {ex.Message}");
        }
    }



    void ModificarCantidad(int productoId, int cambio)
    {

        if (!cantidades.ContainsKey(productoId))
        {
            cantidades[productoId] = 0;
        }
        cantidades[productoId] = Math.Max(0, cantidades[productoId] + cambio);

    }

    private int GetStockTemporal(int productoId, int stockOriginal)
    {

        if (cantidades.ContainsKey(productoId) && cantidadesPrevias.ContainsKey(productoId))
        {
            var diferencia = cantidades[productoId] - cantidadesPrevias[productoId];
            return stockOriginal - diferencia;
        }
        return stockOriginal;
    }



    public void InicializarListaCantidades()
    {
        cantidades.Clear();
        cantidadesPrevias.Clear();
        foreach (var x in ApiService.ListaProductos)
        {
            Console.WriteLine($"{x.Nombre}-{x.Cantidad}");
        }
        foreach (var p in Items ?? new List<T>())
        {
            int cantidad = 0;

            var encontrado = ApiService.ListaProductos.FirstOrDefault(x => x.ProductoId == p.Id);
            if (encontrado != null)
            {
                cantidad = encontrado.Cantidad;

            }

            cantidades[p.Id] = cantidad;
            cantidadesPrevias[p.Id] = cantidad; // Inicializa la cantidad previa igual a la actual
        }
    }

    public async Task EliminarDelCarrito(int idP)
    {
        try
        {
            await ApiService.ElimarDelCarrito(idP);

            var cantidad = cantidades[idP];
            await ApiService.CambiarStockProd(idP, cantidad);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar al carrito: {ex.Message}");
        }
    }


    public async Task AgregarCarrito(int id, decimal precio, int stock, string nombre)
    {
        try
        {
            var cantidadActual = cantidades[id];
            var cantidadAnterior = cantidadesPrevias.ContainsKey(id) ? cantidadesPrevias[id] : 0;
            var diferencia = cantidadActual - cantidadAnterior;
            if (cantidadActual <= stock && cantidadActual > 0 && diferencia != 0)
            {
                var data = new ItemCompraDto
                {
                    ProductoId = id,
                    Cantidad = cantidadActual,
                    PrecioUnitario = precio
                };
                await ApiService.AgregarProductoAlCarrito(data, nombre, stock);
                await ApiService.CambiarStockProd(id, -diferencia); // Solo resta la diferencia
                cantidadesPrevias[id] = cantidadActual; // Actualiza la cantidad previa
                Console.WriteLine($"{cantidadActual}");

            }
            else if (diferencia == 0)
            {
                Console.WriteLine($"No hay cambio en la cantidad, no se actualiza el stock");
            }
            else
            {
                Console.WriteLine($"Sobrepasa el stock disponible");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar al carrito: {ex.Message}");
        }
    }


}
