@page "/carrito"
@using cliente.Services
@using cliente.Models

@implements IDisposable 
@inject ApiService ApiService

<PageTitle>Carrito</PageTitle>


<div class="container">
    <div class="row mb-4">
        <div class="col-12">
            @* crear una clase que tenga esto como propiedad calculada *@
            <h2 class="text-center">Compras pendientes Precio: $@ApiService.ListaProductos.Sum(x=> x.subTotal)</h2>
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <button type="button" class="btn btn-outline-danger"
                @onclick="async () => await ApiService.VaciarCarrito()">
                Vaciar Carrito</button>
                <button type="button" class="btn btn-outline-success" 
                data-bs-toggle="modal" data-bs-target="#confirmarCompraModal">
                    Confirmar Compra
                </button>
            </div>
        </div>
    </div>
@if (ApiService.Count > 0)
{
        <div class="d-flex flex-wrap gap-4 justify-content-start">
           <Card Items="ApiService.ListaProductos"/>
        </div>
        <Form/>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h2 class="alert-heading">No tiene productos en su carrito</h2>
    </div>
}
</div>


@code{


    protected override async Task OnInitializedAsync()
    {
        ApiService.OnChange += ActualizarVista;
    }

    void ActualizarVista()
    {
        StateHasChanged(); // Forzar la actualización del menú
    }

    public void Dispose()
    {
        ApiService.OnChange -= ActualizarVista;
    }


    

}