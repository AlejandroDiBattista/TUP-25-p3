@page "/carrito"
@using Cliente.Services
@using Cliente.Modelos
@using System.ComponentModel.DataAnnotations
@inject CarritoService CarritoService
@inject HttpClient Http

<div class="carrito-container">
    <div class="carrito-card">
        <h3 class="carrito-title text-primary"><i class="bi bi-cart4"></i> Carrito de compras</h3>

        @if (items.Count == 0)
        {
            <div class="alert alert-info text-center">
                <i class="bi bi-emoji-frown"></i> Tu carrito está vacío.
            </div>
        }
        else
        {
        <div class="carrito-lista">
            @foreach (var item in items)
            {
                <div class="carrito-item-card">
                    <img src="@item.Producto.ImagenUrl" alt="@item.Producto.Nombre" class="carrito-item-img" />
                    <div class="carrito-item-info">
                        <div class="carrito-item-nombre">@item.Producto.Nombre</div>
                        <div class="carrito-item-precio">$@item.Producto.Precio</div>
                        <div class="carrito-item-total">
                            <span style="color: #888; font-size: 0.95rem;">
                                Total: $@(item.Producto.Precio * item.Cantidad)
                            </span>
                        </div>
                        <div class="carrito-item-cantidad">
                            <button class="carrito-btn" @onclick="() => RestarCantidad(item.Producto.Id)">-</button>
                            <span>@item.Cantidad</span>
                            <button class="carrito-btn" @onclick="() => SumarCantidad(item.Producto.Id)">+</button>
                        </div>
                    </div>
                    <button class="carrito-eliminar-btn" title="Eliminar producto" @onclick="() => EliminarProducto(item.Producto.Id)">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            }
        </div>
        @if (items.Count > 0)
            {
                <div class="carrito-total">
                    <strong>Total: $@items.Sum(i => i.Producto.Precio * i.Cantidad)</strong>
                </div>
                    <a class="btn-confirmar-compra" href="/carrito/confirmar-compra">
                        <i class="bi bi-bag-check"></i> Confirmar compra
                    </a>
            }
        }

        @if (!string.IsNullOrEmpty(mensaje))
        {
            <div class="alert alert-info mt-3 text-center">
                @mensaje
            </div>
        }
    </div>
</div>
@code {
    private List<CarritoItem> items = new();
    private decimal total;
    @* private FormularioCompra formulario = new(); *@
    private string mensaje = "";
    private string carritoId = "";

   protected override async void OnInitialized()
{
    items = CarritoService.ObtenerItems();
    total = CarritoService.CalcularTotal();

    try
    {
        var response = await Http.PostAsync("carritos", null);
        if (response.IsSuccessStatusCode)
        {   
            carritoId = await response.Content.ReadAsStringAsync();
            carritoId = carritoId.Trim('"');
                foreach (var item in items)
                {
                    var body = new { cantidad = item.Cantidad };

                    await Http.PutAsJsonAsync(
                        $"carritos/{carritoId}/{item.Producto.Id}", 
                        body
                    );
                }
            
        }
        else
        {
            mensaje = "No se pudo crear el carrito.";
        }
    }
    catch (Exception ex)
    {
        mensaje = $"Error al inicializar el carrito: {ex.Message}";
    }
}
    void SumarCantidad(int productoId) => CarritoService.SumarCantidad(productoId);
    void RestarCantidad(int productoId) => CarritoService.RestarCantidad(productoId);
    void EliminarProducto(int productoId) => CarritoService.EliminarProducto(productoId);
    @* private bool EsValido()
    {
        return !string.IsNullOrWhiteSpace(formulario.Nombre)
            && !string.IsNullOrWhiteSpace(formulario.Apellido)
            && !string.IsNullOrWhiteSpace(formulario.Email);
    } *@
    public void Limpiar()
    {
        items.Clear();
    }

    @* private async Task ConfirmarCompra()
    {
        if (string.IsNullOrWhiteSpace(carritoId))
        {
            mensaje = "Carrito no inicializado.";
            return;
        }

        var response = await Http.PutAsJsonAsync($"carritos/{carritoId}/confirmar", formulario);

        if (response.IsSuccessStatusCode)
        {
            mensaje = " Compra confirmada con éxito.";
            items = CarritoService.ObtenerItems();
            total = 0;
            CarritoService.Limpiar();
        }
        else
        {
            mensaje = " Error al confirmar la compra.";
        }
    }
    public class FormularioCompra
    {
        [Required]
        public string Nombre { get; set; } = "";

        [Required]
        public string Apellido { get; set; } = "";

        [Required, EmailAddress]
        public string Email { get; set; } = "";
    } *@
    public class DatosCompra
    {
        public string Nombre { get; set; } = "";
        public string Apellido { get; set; } = "";
        public string Email { get; set; } = "";
    }
}