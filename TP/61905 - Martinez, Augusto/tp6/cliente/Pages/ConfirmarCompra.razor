@page "/confirmar"
@using Cliente.Models
@using Cliente.Services
@using System.ComponentModel.DataAnnotations
@inject CarritoService CarritoService
@inject NavigationManager Navigation
@inject ApiService ApiService

<h2>Confirmar Compra</h2>

@if (CarritoService.Items.Any())
{
    <div class="mb-4">
        <h4>Resumen del Carrito</h4>
        <ul>
            @foreach (var item in CarritoService.Items)
            {
                <li>@item.Cantidad Ã— @item.Nombre - $@(item.Cantidad * item.PrecioUnitario)</li>
            }
        </ul>
        <p><strong>Total:</strong> $@CarritoService.Total</p>
    </div>

    <EditForm Model="@formulario" OnValidSubmit="ProcesarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="formulario.Nombre" />
        </div>
        <div class="mb-3">
            <label>Apellido:</label>
            <InputText class="form-control" @bind-Value="formulario.Apellido" />
        </div>
        <div class="mb-3">
            <label>Email:</label>
            <InputText type="email" class="form-control" @bind-Value="formulario.Email" />
        </div>

        <button type="submit" class="btn btn-success">Confirmar Compra</button>
    </EditForm>
}
else
{
    <div class="alert alert-info">No hay productos en el carrito.</div>
}

@code {
    private FormularioCompra formulario = new();

    private async Task ProcesarCompra()
    {
        try
        {
            // ðŸ”¥ Combinar nombre y apellido en ClienteNombre
            string clienteNombreCompleto = $"{formulario.Nombre} {formulario.Apellido}";

            await CarritoService.ConfirmarCompraAsync(clienteNombreCompleto, formulario.Email);

            // ðŸ”¥ Recargar productos despuÃ©s de la compra para actualizar stock
            await CargarProductos();

            // ðŸ”¥ Redirigir al catÃ¡logo despuÃ©s de confirmar la compra
            Navigation.NavigateTo("/catalogo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al confirmar compra: {ex.Message}");
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            var productos = await ApiService.ObtenerProductosAsync();
            CarritoService.ActualizarProductos(productos); // ðŸ”¥ Nueva funciÃ³n para reflejar stock actualizado
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    public class FormularioCompra
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; }

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "El email no es vÃ¡lido")]
        public string Email { get; set; }
    }
}
