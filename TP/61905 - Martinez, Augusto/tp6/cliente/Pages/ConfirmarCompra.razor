@page "/confirmar"
@using Cliente.Models
@using Cliente.Services
@using System.ComponentModel.DataAnnotations
@inject CarritoService CarritoService
@inject VentaService VentaService
@inject NavigationManager Navigation

<PageTitle>Confirmar Compra</PageTitle>

<h2>Confirmar Compra</h2>

@if (carrito.Any())
{
    <div class="mb-4">
        <h4>Resumen del Carrito</h4>
        <ul>
            @foreach (var item in carrito)
            {
                <li>@item.Cantidad × @item.Producto.Nombre - $@(item.Cantidad * item.Producto.Precio)</li>
            }
        </ul>
        <p><strong>Total:</strong> $@TotalCompra</p>
    </div>

    <EditForm Model="@formulario" OnValidSubmit="ProcesarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="formulario.Nombre" />
        </div>
        <div class="mb-3">
            <label>Email:</label>
            <InputText type="email" class="form-control" @bind-Value="formulario.Email" />
        </div>

        <button type="submit" class="btn btn-success">Confirmar Compra</button>
    </EditForm>
}
else
{
    <div class="alert alert-info">No hay productos en el carrito.</div>
}

@code {
    private List<CarritoItem> carrito = new();
    private FormularioCompra formulario = new();
    private decimal TotalCompra => carrito.Sum(item => item.Cantidad * item.Producto.Precio);

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    private async Task CargarCarrito()
    {
        carrito = await CarritoService.ObtenerCarritoAsync(usuarioId) ?? new List<CarritoItem>();
    }

    private async Task ProcesarCompra()
    {
        try
        {
            var venta = new Venta
            {
                UsuarioId = usuarioId,
                VentaItems = carrito
            };

            var resultado = await VentaService.RegistrarVentaAsync(venta);

            if (resultado)
            {
                await CarritoService.VaciarCarritoAsync(usuarioId);
                Navigation.NavigateTo("/confirmacion");
            }
            else
            {
                Console.WriteLine("Error al procesar la compra.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al confirmar compra: {ex.Message}");
        }
    }

    public class FormularioCompra
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "El email no es válido")]
        public string Email { get; set; }
    }
}
