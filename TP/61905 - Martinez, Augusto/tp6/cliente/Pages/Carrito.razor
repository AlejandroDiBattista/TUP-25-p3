@page "/carrito"
@using Cliente.Models
@using Cliente.Services
@inject CarritoService CarritoService
@inject NavigationManager Navigation
@inject ApiService ApiService
@using System.ComponentModel.DataAnnotations

<PageTitle>Carrito de compras</PageTitle>

<header class="navbar navbar-expand-lg navbar-light bg-light sticky-top shadow p-3">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">üõçÔ∏è Tienda Gamer</a>
        <button class="btn btn-outline-primary" @onclick="IrAInicio">üè† Volver al cat√°logo</button>
    </div>
</header>

<div class="container mt-4">
    <h2>Carrito de compras</h2>

    <p><strong>Cantidad total de productos:</strong> @cantidadProductos</p>
    <button class="btn btn-outline-info" @onclick="ActualizarCantidad">üîÑ Actualizar cantidad</button>

    @if (cargando)
    {
        <div class="alert alert-info">Cargando carrito...</div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">Error: @error</div>
    }
    else if (CarritoService.Items.Any())
    {
<div class="row row-cols-1 row-cols-md-2 g-4">
    @foreach (var item in CarritoService.Items)
                {
        <div class="col">
            <div class="card h-100">
                <div class="card-body">
                    <h5 class="card-title">@item.Nombre</h5>
                    <p><strong>Precio:</strong> $@item.PrecioUnitario</p>

                    <div class="d-flex align-items-center mb-2">
                    <button class="btn btn-outline-secondary btn-sm me-2"
                            @onclick="() => ActualizarCantidad(item.ProductoId, -1)">
                        ‚àí
                    </button>

                    <strong>@item.Cantidad</strong>

                    <button class="btn btn-outline-secondary btn-sm ms-2"
                            @onclick="() => ActualizarCantidad(item.ProductoId, 1)">
                        +
                    </button>
                </div>

                <p><strong>Total:</strong> $@item.Importe</p>
            </div>

            <div class="card-footer text-end">
                <button class="btn btn-danger"
                        @onclick="() => EliminarDelCarrito(item.ProductoId)">
                    Eliminar
                </button>
            </div>
        </div>
    </div>
}

        </div>

        <div class="mt-4">
            <h4>Detalles del Cliente</h4>
            <EditForm Model="@formulario" OnValidSubmit="EnviarFormulario">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label>Nombre:</label>
                    <InputText class="form-control" @bind-Value="formulario.Nombre" />
                </div>
                <div class="mb-3">
                    <label>Email:</label>
                    <InputText type="email" class="form-control" @bind-Value="formulario.Email" />
                </div>

                <div class="d-flex justify-content-between">
                    <button class="btn btn-outline-danger" @onclick="VaciarCarrito">Vaciar carrito</button>
                    <button type="submit" class="btn btn-success">Confirmar compra</button>
                </div>
            </EditForm>
        </div>
    }
    else
    {
        <div class="alert alert-warning">No hay productos en tu carrito.</div>
    }
</div>

@code {
    private bool cargando = true;
    private string error = string.Empty;
    private int cantidadProductos;
    private int usuarioId = 1;
    private FormularioCompra formulario = new();
    private Guid carritoId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await InicializarCarrito();
    }

    private async Task InicializarCarrito()
    {
        try
        {
            var carrito = await CarritoService.ObtenerCarritoAsync(usuarioId);
            if (carrito != null)
            {
                carritoId = carrito.Id;
                CarritoService.CargarItems(carrito.CarritoItems);
                await ActualizarCantidad();
            }
            else
            {
                error = "No se pudo cargar el carrito.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar el carrito: {ex.Message}";
        }
        cargando = false;
        StateHasChanged();
    }

    private async Task EliminarDelCarrito(int productoId)
    {
        try
        {
            await CarritoService.EliminarProductoAsync(productoId);
            await InicializarCarrito();
        }
        catch (Exception ex)
        {
            error = $"Error al eliminar el producto: {ex.Message}";
        }
    }

    private async Task VaciarCarrito()
    {
        try
        {
            await CarritoService.VaciarCarritoAsync(usuarioId);
            await InicializarCarrito();
        }
        catch (Exception ex)
        {
            error = $"Error al vaciar el carrito: {ex.Message}";
        }
    }

    private async Task ActualizarCantidad()
    {
        try
        {
            cantidadProductos = await CarritoService.ObtenerCantidadProductos(carritoId);
        }
        catch (Exception ex)
        {
            error = $"Error al obtener cantidad de productos: {ex.Message}";
        }
    }

    private async Task ActualizarCantidad(int productoId, int cambio)
    {
        var item = CarritoService.Items.FirstOrDefault(p => p.ProductoId == productoId);
        if (item is null) return;

        int nuevaCantidad = item.Cantidad + cambio;
        if (nuevaCantidad < 1) return;

        await CarritoService.ActualizarCantidadAsync(productoId, nuevaCantidad);
        await CarritoService.CargarDesdeApiAsync(usuarioId); // o carritoId si us√°s eso
        await ActualizarCantidad(); // üëâ refresca el total visual tambi√©n, usando tu m√©todo original
    }

    private async Task EnviarFormulario()
    {
        try
        {
            await CarritoService.ConfirmarCompraAsync(usuarioId, formulario.Nombre, formulario.Email);
            Navigation.NavigateTo("/confirmacion");
        }
        catch (Exception ex)
        {
            error = $"Error al confirmar la compra: {ex.Message}";
        }
    }

    private void IrAInicio()
    {
        Navigation.NavigateTo("/");
    }
}
