@page "/carrito"
@using Cliente.Services
@using Cliente.Models
@inject CarritoService CarritoService
@inject VentaService VentaService
@inject NavigationManager Navigation

<PageTitle>Carrito de compras</PageTitle>

<header class="navbar navbar-expand-lg navbar-light bg-light sticky-top shadow p-3">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">üõçÔ∏è Tienda Gamer</a>
        <button class="btn btn-outline-primary" @onclick="IrAInicio">üè† Volver al cat√°logo</button>
    </div>
</header>

<div class="container mt-4">
    <h2>Carrito de compras</h2>

    @if (cargando)
    {
        <div class="alert alert-info">Cargando carrito...</div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">Error: @error</div>
    }
    else if (carrito != null && carrito.Any())
    {
        <div class="row row-cols-1 row-cols-md-2 g-4">
            @foreach (var item in carrito)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@item.Producto.Nombre</h5>
                            <p class="card-text">@item.Producto.Descripcion</p>
                            <p><strong>Precio:</strong> $@item.Producto.Precio</p>
                            <p><strong>Cantidad:</strong> @item.Cantidad</p>
                        </div>
                        <div class="card-footer text-end">
                            <button class="btn btn-danger" @onclick="() => EliminarDelCarrito(item)">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="mt-4 d-flex justify-content-between">
            <button class="btn btn-outline-danger" @onclick="VaciarCarrito">Vaciar carrito</button>
            <button class="btn btn-success" @onclick="ConfirmarCompra">Confirmar compra</button>
        </div>
    }
    else
    {
        <div class="alert alert-warning">No hay productos en tu carrito.</div>
    }
</div>

@code {
    private List<CarritoItem> carrito = new();
    private bool cargando = true;
    private string error;

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    private async Task CargarCarrito()
    {
        try
        {
            cargando = true;
            carrito = await CarritoService.ObtenerCarritoAsync(usuarioId) ?? new List<CarritoItem>();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task EliminarDelCarrito(CarritoItem item)
    {
        await CarritoService.EliminarProductoAsync(item);
        carrito.Remove(item);
        StateHasChanged();
    }

    private async Task VaciarCarrito()
    {
        await CarritoService.VaciarCarritoAsync(usuarioId);
        carrito.Clear();
        StateHasChanged();
    }

    private async Task ConfirmarCompra()
    {
        var venta = new Venta { VentaItems = carrito };
        var resultado = await VentaService.RegistrarVentaAsync(venta);

        if (resultado)
        {
            await VaciarCarrito();
            Navigation.NavigateTo("/confirmacion");
        }
        else
        {
            error = "Hubo un problema al procesar la compra.";
        }
    }

    private void IrAInicio()
    {
        Navigation.NavigateTo("/");
    }
}
