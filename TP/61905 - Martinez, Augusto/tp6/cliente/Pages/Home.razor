@page "/"
@using Cliente.Models
@using Cliente.Services
@inject ApiService ApiService
@inject CarritoService CarritoService
@inject NavigationManager Navigation

<PageTitle>Catálogo de productos</PageTitle>

<nav class="navbar navbar-expand-lg navbar-light bg-light shadow sticky-top">
    <div class="container d-flex flex-column flex-md-row align-items-center justify-content-between gap-2 py-2">
        <a class="navbar-brand text-center text-md-start" href="/">🛍️ <strong>Tienda Gamer</strong></a>

        <input class="form-control w-100 w-md-50" type="search" placeholder="Buscar productos..."
               @bind="busqueda" @bind:event="oninput" />

        <button class="btn btn-outline-primary position-relative" @onclick="IrAlCarrito">
            🛒 Carrito
            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                @contadorCarrito
            </span>
        </button>
    </div>
</nav>


<div class="container mt-4">
    <h2>Catálogo de productos</h2>

    @if (cargando)
    {
        <div class="alert alert-info">Cargando productos...</div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">Error: @error</div>
    }
    else if (productosFiltrados.Any())
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var producto in productosFiltrados)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@producto.Nombre</h5>
                            <p class="card-text">@producto.Descripcion</p>
                            <p><strong>Precio:</strong> $@producto.Precio</p>
                            <p><strong>Stock:</strong> @producto.Stock</p>
                        </div>
                        <div class="card-footer text-end">
                            <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto)">
                                ➕ Añadir al carrito
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="alert alert-warning">No se encontraron productos.</div>
    }
</div>

@code {
    private List<Producto> productos = new();
    private string error = string.Empty;
    private bool cargando = true;
    private int contadorCarrito = 0;
    private string busqueda = "";
    private Guid carritoId = Guid.Empty;
    private int usuarioId = 1;

    protected override async Task OnInitializedAsync()
    {
        await InicializarCarrito();
        await CargarProductos();
        await ActualizarContadorCarrito();
    }

    private async Task InicializarCarrito()
    {
        var carrito = await CarritoService.ObtenerCarritoAsync(usuarioId);
        if (carrito != null)
        {
            carritoId = carrito.Id;
            CarritoService.CargarItems(carrito.CarritoItems);
        }
        else
        {
            error = "No se pudo cargar el carrito. Intenta recargar la página.";
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            cargando = true;
            productos = await ApiService.ObtenerProductosAsync() ?? new List<Producto>();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar productos: {ex.Message}";
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task AgregarAlCarrito(Producto producto)
    {
        try
        {
            if (carritoId == Guid.Empty)
            {
                error = "No se pudo identificar tu carrito. Intenta recargar.";
                return;
            }

            var response = await CarritoService.AgregarProductoAsync(carritoId, producto.Id);

            if (response.IsSuccessStatusCode)
            {
                await ActualizarContadorCarrito();
            }
            else
            {
                error = "Error al agregar producto al carrito.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al agregar producto: {ex.Message}";
        }

        StateHasChanged();
    }

    private async Task ActualizarContadorCarrito()
    {
        if (carritoId == Guid.Empty)
            return;

        contadorCarrito = await CarritoService.ObtenerContadorProductosAsync(carritoId);
    }

    private void IrAlCarrito()
    {
        Navigation.NavigateTo("/carrito");
    }

    private IEnumerable<Producto> productosFiltrados =>
        string.IsNullOrWhiteSpace(busqueda)
            ? productos
            : productos.Where(p => p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase));
}
