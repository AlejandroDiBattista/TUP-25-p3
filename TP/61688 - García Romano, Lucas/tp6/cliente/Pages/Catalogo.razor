@page "/"
@page "/catalogo"
@inject NavigationManager Navigation
@inject cliente.Services.ProductoService ProductoService
@inject cliente.Services.CarritoService CarritoService

<h1>Catálogo</h1>

@if (productos == null)
{
    <p>Cargando productos...</p>
}
else if (error != null)
{
    <div class="alert alert-danger">Error: @error</div>
}
else if (!productos.Any() && !string.IsNullOrWhiteSpace(busqueda))
{
    <div class="alert alert-warning" style="text-align:center; margin-top:2rem;">Producto no encontrado</div>
}
else if (!productos.Any())
{
    <p>No hay productos disponibles.</p>
}
else
{
    <div class="catalogo" style="display:flex; flex-wrap:wrap; gap:2rem; justify-content:flex-start; margin-top:0.5rem; margin-left:0;">
        @foreach (var producto in productos)
        {
            <div class="producto-card" style="border:1px solid #ccc; border-radius:10px; padding:1.5rem; width:350px; text-align:center; background:#fafafa; display:flex; flex-direction:column; align-items:center; justify-content:space-between; min-height:510px; height:510px; box-shadow:0 2px 8px rgba(0,0,0,0.07);">
                <img src="@producto.ImagenUrl" alt="@producto.Nombre" style="max-width:200px;max-height:200px; margin-bottom:16px;" />
                <h3 style="margin-bottom:12px;">@producto.Nombre</h3>
                <p style="margin-bottom:12px;">@producto.Descripcion</p>
                <p style="margin-bottom:10px;"><strong>Precio:</strong> $@producto.Precio</p>
                <p style="margin-bottom:10px;">
                    <strong>Stock:</strong>
                    <span style="color:@(((producto.Stock - CantidadEnCarrito(producto.Id)) <= 0 ? "red" : "inherit"))">
                        @(producto.Stock - CantidadEnCarrito(producto.Id))
                    </span>
                </p>
                @if (CantidadEnCarrito(producto.Id) > 0)
                {
                    <span class="badge bg-info text-dark" style="margin-bottom:12px; display:block;">En carrito: @CantidadEnCarrito(producto.Id)</span>
                }
                <button class="btn btn-success" style="margin-top:12px;" 
                        disabled="@((producto.Stock - CantidadEnCarrito(producto.Id)) <= 0)" 
                        @onclick="() => AgregarAlCarrito(producto.Id)">Agregar al carrito</button>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(mensaje)) //muesta un msj de confirmacion o error
{
    <div style="position:fixed; top:90px; left:50%; transform:translateX(-50%); z-index:9999;">
        <div class="alert alert-info">@mensaje</div>
    </div>
}

@code {
    private List<cliente.Services.Producto> productos; //lista de productos del catalogo
    private string error;//mensaje de error si ocurre
    private string mensaje;//msj de confirmacion al agregar al carrito
    private List<ItemCarritoDto> itemsCarrito = new();//lista de items del carrito
    private string busqueda = string.Empty;
    private string _ultimaBusqueda = string.Empty;

    protected override async Task OnInitializedAsync()//inicializa el componente
    {
        if (!_locationSubscribed)
        {
            Navigation.LocationChanged += OnLocationChanged;
            _locationSubscribed = true;
        }
        LeerBusquedaDeUrl();
        await CargarDatos();//carga productos y items del carrito
        CarritoService.OnCarritoActualizado += ActualizarDesdeServicio;//subscribe al evento de actualización del carrito
    }

    private bool _locationSubscribed = false;

    private void OnLocationChanged(object sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        LeerBusquedaDeUrl();
        _ultimaBusqueda = busqueda;
        InvokeAsync(async () => {
            await CargarDatos();
            await InvokeAsync(StateHasChanged);
        });
    }

    protected override async Task OnParametersSetAsync()//se jecuta cuando se establecen los parametros del componenete
    {
        LeerBusquedaDeUrl();
        await CargarDatos();//recargo los datos
    }

    private void LeerBusquedaDeUrl()
    {
        var uri = new Uri(Navigation.Uri);
        var query = uri.Query.TrimStart('?').Split('&', StringSplitOptions.RemoveEmptyEntries);
        var dict = new Dictionary<string, string>();
        foreach (var part in query)
        {
            var kv = part.Split('=', 2);
            if (kv.Length == 2)
                dict[kv[0]] = Uri.UnescapeDataString(kv[1]);
        }
        busqueda = dict.TryGetValue("buscar", out var valor) ? valor : string.Empty;
    }

    private async void ActualizarDesdeServicio()//metodo que se ejecuta cuando el carrito se actualiza desde el servicio
    {
        await CargarDatos(); //recarga los datos
        await InvokeAsync(StateHasChanged);//actualiza el estado para que se renderice de nuevo
    }

    private async Task CargarDatos()//cargo los productos y items del carrito
    {
        try {
            productos = await ProductoService.ObtenerProductosAsync(busqueda) ?? new List<cliente.Services.Producto>();// obtiene los productos del servicio
            itemsCarrito = await CarritoService.ObtenerItemsDelCarritoAsync() ?? new List<ItemCarritoDto>();// obtiene los items del carrito
            error = null;
        } catch (Exception ex) { //maneja las excepciones
            productos = new List<cliente.Services.Producto>(); //inicializa la lista de productos vacia
            itemsCarrito = new List<ItemCarritoDto>(); //inicializa la lista de items del carrito vacia
            error = ex.Message; //manda el msj de error
        }
    }

    private bool ProductoDisponible(cliente.Services.Producto producto) //verifica si el producto tiene stock disponible
    {
        return producto.Stock > 0; //evita que el producto no tenga stock
    }

    private int CantidadEnCarrito(int productoId)//obitiene la cantidad de un producto en el carrito
    {
        var item = itemsCarrito.FirstOrDefault(i => i.ProductoId == productoId);//busca el item en el carrito por el Id
        return item?.Cantidad ?? 0; //retorna la cantidad del item o 0 si no existe
    }

    private async Task AgregarAlCarrito(int productoId)//agrega un producto al carrito
    {
        try
        {
            var cantidadActual = CantidadEnCarrito(productoId);
            var producto = productos.FirstOrDefault(p => p.Id == productoId);
            if (producto != null && producto.Stock > 0)
            {
                producto.Stock--;
            }
            await CarritoService.ModificarCantidadAsync(productoId, cantidadActual + 1);
            mensaje = "Producto agregado al carrito.";
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            mensaje = "Error al agregar: " + ex.Message;
            await CargarDatos(); // Solo recarga si hay error
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose() //libera recursos y se desuscribe del evento
    {
        CarritoService.OnCarritoActualizado -= ActualizarDesdeServicio; //se desuscribe del evento de actualizacion del carrito
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
