@page "/carrito"                       
@using Cliente.Models                 
@inject HttpClient Http               
@inject IJSRuntime JS                 
@inject CarritoService CarritoSrv     
@inject NavigationManager Nav         


<h3>üõí Carrito de Compras</h3>

@if (items is null)                   // Si la lista de items a√∫n no est√° cargada
{
    <p>Cargando...</p>                // Mostrar mensaje de carga
}
else if (!items.Any())                // Si la lista est√° vac√≠a
{
    <p>Tu carrito est√° vac√≠o.</p>    // Indicar que no hay productos agregados
}
else                                // Si hay productos en el carrito
{
    <table class="table">           

        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Total</th>
                <th></th>           <!-- Columna para bot√≥n eliminar -->
            </tr>
        </thead>

        <tbody>
            @foreach (var item in items)   // Por cada item en el carrito
            {
                <tr>
                    <td>@item.Producto?.Nombre</td>  <!-- Nombre del producto -->
                    <td>@item.PrecioUnitario.ToString("C0", System.Globalization.CultureInfo.CreateSpecificCulture("es-AR"))</td> <!-- Precio unitario con formato moneda argentina -->
                    <td>
                        <!-- Bot√≥n para reducir cantidad -->
                        <button class="btn btn-sm btn-secondary" @onclick="@(() => ActualizarCantidad(item.ProductoId, -1))">-</button>

                        @item.Cantidad  <!-- Cantidad actual -->

                        <!-- Bot√≥n para aumentar cantidad -->
                        <button class="btn btn-sm btn-secondary" @onclick="@(() => ActualizarCantidad(item.ProductoId, 1))">+</button>
                    </td>
                    <td>@((item.Cantidad * item.PrecioUnitario).ToString("C0", System.Globalization.CultureInfo.CreateSpecificCulture("es-AR")))</td> <!-- Total (precio x cantidad) -->
                    <td>
                        <!-- Bot√≥n para eliminar producto -->
                        <button class="btn btn-sm btn-danger" @onclick="@(() => Quitar(item.ProductoId))">üóë</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Total general del carrito -->
    <h5>Total: @items.Sum(i => i.Cantidad * i.PrecioUnitario).ToString("C0", System.Globalization.CultureInfo.CreateSpecificCulture("es-AR"))</h5>

    <!-- Botones para vaciar carrito o confirmar compra -->
    <button class="btn btn-warning me-2" @onclick="Vaciar">Vaciar carrito</button>
    <button class="btn btn-success" @onclick="@(() => Nav.NavigateTo("/confirmacion"))">Confirmar compra</button>
}

@code {
    private List<ItemCarrito>? items; // Lista de productos cargados en el carrito

    // M√©todo que se ejecuta al iniciar la p√°gina/component
    protected override async Task OnInitializedAsync()
    {
        CarritoSrv.OnChange += CarritoActualizado;  // Se suscribe al evento OnChange para actualizar la UI cuando cambia el carrito
        await CargarCarrito();                       // Carga los items desde el backend/localStorage
    }

    // M√©todo que responde al evento OnChange del carrito (cuando se modifica)
    private async void CarritoActualizado()
    {
        await CargarCarrito();  // Recarga la lista
        StateHasChanged();      // Actualiza la interfaz visual (UI)
    }

    // M√©todo que carga los items del carrito consultando el backend seg√∫n el id guardado en localStorage
    private async Task CargarCarrito()
    {
        var id = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");  // Recupera el id del carrito en localStorage

        if (!string.IsNullOrEmpty(id))
        {
            // Si existe id, consulta los items asociados a ese carrito
            items = await Http.GetFromJsonAsync<List<ItemCarrito>>($"api/carritos/{id}");
        }
        else
        {
            // Si no hay carrito creado, la lista queda vac√≠a
            items = new();
        }
    }

    // Se ejecuta cuando se destruye el componente para limpiar la suscripci√≥n
    public void Dispose()
    {
        CarritoSrv.OnChange -= CarritoActualizado;
    }

    // Cambia la cantidad de un producto (delta puede ser +1 o -1)
    private async Task ActualizarCantidad(int productoId, int delta)
    {
        var id = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        var item = items!.FirstOrDefault(i => i.ProductoId == productoId);
        if (item is null) return;

        int nuevaCantidad = item.Cantidad + delta;

        // Si la nueva cantidad es 0 o menos, quita el producto del carrito
        if (nuevaCantidad <= 0)
        {
            await Quitar(productoId);
            return;
        }

        // Llama al backend para actualizar cantidad del producto en carrito
        await Http.PutAsync($"api/carritos/{id}/{productoId}?cantidad={delta}", null);

        // Actualiza la cantidad total (y lanza evento OnChange)
        await CarritoSrv.ActualizarCantidadAsync();
    }

    // Quita un producto del carrito
    private async Task Quitar(int productoId)
    {
        var id = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        await Http.DeleteAsync($"api/carritos/{id}/{productoId}");
        await CarritoSrv.ActualizarCantidadAsync();
    }

    // Vac√≠a todo el carrito
    private async Task Vaciar()
    {
        var id = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        await Http.DeleteAsync($"api/carritos/{id}");
        await CarritoSrv.ActualizarCantidadAsync();
    }
}
