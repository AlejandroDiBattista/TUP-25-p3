// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Servidor.Data;

#nullable disable

namespace Servidor.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250614011042_AgregarProductosCalzado")]
    partial class AgregarProductosCalzado
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Servidor.Models.Carrito", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("Servidor.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("Servidor.Models.ItemCarrito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarritoId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarritoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("Servidor.Models.ItemCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompraId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemsCompra");
                });

            modelBuilder.Entity("Servidor.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagenUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Botas altas de cuero genuino",
                            ImagenUrl = "https://example.com/botas-cuero.jpg",
                            Nombre = "Botas de Cuero",
                            Precio = 21999m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Sandalias con taco de corcho",
                            ImagenUrl = "https://example.com/sandalias-plataforma.jpg",
                            Nombre = "Sandalias Plataforma",
                            Precio = 14999m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Zapatillas casuales para todos los días",
                            ImagenUrl = "https://example.com/zapatillas-urbanas.jpg",
                            Nombre = "Zapatillas Urbanas",
                            Precio = 18999m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Botines elegantes con taco cuadrado",
                            ImagenUrl = "https://example.com/botines-taco.jpg",
                            Nombre = "Botines con Taco",
                            Precio = 25999m,
                            Stock = 12
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Sandalias estilo romano de cuero sintético",
                            ImagenUrl = "https://example.com/sandalias-romanas.jpg",
                            Nombre = "Sandalias Romanas",
                            Precio = 13499m,
                            Stock = 18
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Zuecos altos con diseño moderno",
                            ImagenUrl = "https://example.com/zuecos.jpg",
                            Nombre = "Zuecos de Plataforma",
                            Precio = 16999m,
                            Stock = 10
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Balerinas cómodas y versátiles",
                            ImagenUrl = "https://example.com/balerinas.jpg",
                            Nombre = "Balerinas Clásicas",
                            Precio = 9999m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Botas estilo tejano con bordado",
                            ImagenUrl = "https://example.com/botas-texanas.jpg",
                            Nombre = "Botas Texanas",
                            Precio = 23999m,
                            Stock = 8
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Sandalias de color nude con tiras finas",
                            ImagenUrl = "https://example.com/sandalias-nude.jpg",
                            Nombre = "Sandalias Nude",
                            Precio = 11999m,
                            Stock = 16
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Zapatillas de suela alta, estilo urbano",
                            ImagenUrl = "https://example.com/zapatillas-chunky.jpg",
                            Nombre = "Zapatillas Chunky",
                            Precio = 20999m,
                            Stock = 14
                        });
                });

            modelBuilder.Entity("Servidor.Models.ItemCarrito", b =>
                {
                    b.HasOne("Servidor.Models.Carrito", "Carrito")
                        .WithMany("Items")
                        .HasForeignKey("CarritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Servidor.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrito");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Servidor.Models.ItemCompra", b =>
                {
                    b.HasOne("Servidor.Models.Compra", "Compra")
                        .WithMany("ItemsCompra")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Servidor.Models.Producto", "Producto")
                        .WithMany("ItemsCompra")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Servidor.Models.Carrito", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Servidor.Models.Compra", b =>
                {
                    b.Navigation("ItemsCompra");
                });

            modelBuilder.Entity("Servidor.Models.Producto", b =>
                {
                    b.Navigation("ItemsCompra");
                });
#pragma warning restore 612, 618
        }
    }
}
