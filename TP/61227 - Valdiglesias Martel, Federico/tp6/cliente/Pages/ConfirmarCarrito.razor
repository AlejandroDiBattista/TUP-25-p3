@page "/confirmacion"
@using System.ComponentModel.DataAnnotations
@using cliente.modelos
@using cliente.Services
@inject ApiService Api
@inject EstadoCarrito EstadoCarrito
@inject NavigationManager Navigation

<PageTitle>Confirmar Compra</PageTitle>

<div class="container my-5">
    <h3><i class="bi bi-check2-circle me-2"></i>Confirmar y Pagar</h3>
    <hr />

    @if (compra == null)
    {
        <p><em>Cargando resumen...</em></p>
    }
    else
    {
        <div class="row g-5">
            <div class="col-md-7">
                <h4>Tus Datos</h4>
                <EditForm Model="modelo" OnValidSubmit="ManejarConfirmarCompra">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="modelo.Nombre" />
                        <ValidationMessage For="() => modelo.Nombre" />
                    </div>
                    <div class="mb-3">
                        <label for="apellido" class="form-label">Apellido</label>
                        <InputText id="apellido" class="form-control" @bind-Value="modelo.Apellido" />
                        <ValidationMessage For="() => modelo.Apellido" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="modelo.Email" />
                        <ValidationMessage For="() => modelo.Email" />
                    </div>
                    <hr />
                    <div class="d-grid">
                        <button type="submit" class="btn btn-success btn-lg" disabled="@procesando">
                            @if (procesando)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Procesando...</span>
                            }
                            else
                            {
                                <span>Confirmar y Finalizar Compra</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>

            <div class="col-md-5">
                <div class="card bg-light">
                    <div class="card-body">
                        <h4 class="card-title">Resumen del Pedido</h4>
                        <ul class="list-group list-group-flush">
                            @foreach (var item in compra.Items)
                            {
                                <li class="list-group-item d-flex justify-content-between">

                                    <span>@item.NombreProducto (x @item.Cantidad)</span>
                                    <span>@((item.Cantidad * item.PrecioUnitario).ToString("C"))</span>
                                </li>
                            }
                            <li class="list-group-item d-flex justify-content-between fs-5">
                                <strong>Total</strong>
                                <strong>@compra.Total.ToString("C")</strong>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private CompraRespuestaDto? compra;
    private ModeloConfirmacion modelo = new();
    private bool procesando = false;

    protected override async Task OnInitializedAsync()
    {
        compra = await Api.GetCarritoAsync();
        if (compra == null || !compra.Items.Any())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task ManejarConfirmarCompra()
    {
        procesando = true;

        var clienteDto = new DatosClienteDto(modelo.Nombre, modelo.Apellido, modelo.Email);
        var resultado = await Api.ConfirmarCompraAsync(clienteDto);

        if (resultado != null)
        {
            EstadoCarrito.LimpiarCarrito();
            Navigation.NavigateTo("/compra-exitosa");
        }
        else
        {
            Console.WriteLine("Hubo un error al confirmar la compra.");
            procesando = false;
        }
    }

    public class ModeloConfirmacion
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; } = "";

        [Required(ErrorMessage = "El apellido es obligatorio.")]
        public string Apellido { get; set; } = "";

        [Required(ErrorMessage = "El email es obligatorio.")]
        [EmailAddress(ErrorMessage = "El formato del email no es v√°lido.")]
        public string Email { get; set; } = "";
    }
}