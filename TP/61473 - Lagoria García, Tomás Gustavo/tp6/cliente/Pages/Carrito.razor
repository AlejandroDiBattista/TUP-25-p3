@page "/carrito/{carritoId:guid}"
@using cliente.Services
@inject CarritoService CarritoService
@inject IJSRuntime JS
@inject NavigationManager Nav
<h3>Carrito de Compra</h3>

@if (ItemsCarrito is null)
{
    <p>Cargando...</p>
}
else if (!ItemsCarrito.Any())
{
    <p>El carrito está vacío.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Cantidad</th>
                <th>Precio</th>
                <th>Subtotal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in ItemsCarrito)
            {
                <tr>
                    <td>@item.Nombre</td>
                    <td>
                        <button @onclick="() => Disminuir(item)">-</button>
                        @item.Cantidad
                        <button @onclick="() => Aumentar(item)">+</button>
                    </td>
                    <td>@item.PrecioUnitario.ToString("C")</td>
                    <td>@(item.PrecioUnitario * item.Cantidad).ToString("C")</td>
                    <td>
                        <button @onclick="() => EliminarItem(item)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <p><strong>Total:</strong> @Total.ToString("C")</p>

    <button @onclick="VaciarCarrito">Vaciar carrito</button>
    <button @onclick="()=>NavegarCompra()">Confirmar compra</button>
}

@code {
    [Parameter]
    public Guid carritoId { get; set; } = Guid.Empty;

    private List<ItemCarrito>? ItemsCarrito;
    private decimal Total = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    private void NavegarCompra()
    {
        Nav.NavigateTo($"/confirmacion");
        
    }
    private async Task CargarCarrito()
    {
        ItemsCarrito = await CarritoService.ObtenerCarritoAsync(carritoId);
        CalcularTotal();
    }

    private void CalcularTotal()
    {
        Total = ItemsCarrito.Sum(i => i.PrecioUnitario * i.Cantidad);
    }

private async Task Aumentar(ItemCarrito item)
{
    await CarritoService.AumentarItemAsync(carritoId, item.ProductoId);
    await CargarCarrito();
}


private async Task Disminuir(ItemCarrito item)
{
    await CarritoService.DisminuirItemAsync(carritoId, item.ProductoId);
    await CargarCarrito();
}


    private async Task EliminarItem(ItemCarrito item)
    {
        await CarritoService.EliminarItemAsync(carritoId, item.ProductoId);
        await CargarCarrito();
    }

    private async Task VaciarCarrito()
    {
        await CarritoService.VaciarCarritoAsync(carritoId);
        await CargarCarrito();
    }

