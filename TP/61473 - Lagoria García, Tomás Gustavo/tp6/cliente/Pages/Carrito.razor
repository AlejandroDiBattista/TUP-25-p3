@page "/carrito/{carritoId:guid}"
@using cliente.Services
@inject CarritoService CarritoService
@inject IJSRuntime JS
@inject NavigationManager Nav

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-outline-primary fs-3 fw-bold" @onclick="() => NavegarRegreso()">
            üè¨ Tienda Online
        </button>
        <h2 class="m-0">üõí Carrito de Compras</h2>
    </div>

    @if (ItemsCarrito is null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3">Cargando carrito...</p>
        </div>
    }
    else if (!ItemsCarrito.Any())
    {
        <div class="alert alert-info text-center">
            <strong>El carrito est√° vac√≠o.</strong>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table align-middle table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Producto</th>
                        <th class="text-center">Cantidad</th>
                        <th>Precio</th>
                        <th>Subtotal</th>
                        <th class="text-center">Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ItemsCarrito)
                    {
                        <tr>
                            <td>@item.Nombre</td>
                            <td class="text-center">
                                <div class="btn-group" role="group">
                                    <button class="btn btn-outline-secondary btn-sm" title="Disminuir" @onclick="() => Disminuir(item)">-</button>
                                    <span class="px-2">@item.Cantidad</span>
                                    <button class="btn btn-outline-secondary btn-sm" title="Aumentar" @onclick="() => Aumentar(item)">+</button>
                                </div>
                            </td>
                            <td>@item.PrecioUnitario.ToString("C")</td>
                            <td>@(item.PrecioUnitario * item.Cantidad).ToString("C")</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-danger" title="Eliminar" @onclick="() => EliminarItem(item)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <h4>Total: <span class="text-success">@Total.ToString("C")</span></h4>
            <div>
                <button class="btn btn-outline-danger me-2" @onclick="()=>VaciarCarrito()">
                    Vaciar carrito
                </button>
                <button class="btn btn-success" @onclick="()=>NavegarCompra()">
                    Confirmar compra
                </button>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public Guid carritoId { get; set; } = Guid.Empty;

    private List<ItemCarrito>? ItemsCarrito;
    private decimal Total = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarCarrito();
    }

    private void NavegarCompra()
    {
        Nav.NavigateTo($"/confirmacion");
        
    }
    private void NavegarRegreso()
    {
     Nav.NavigateTo($"/catalogo");
    }

    private async Task CargarCarrito()
    {
        ItemsCarrito = await CarritoService.ObtenerCarritoAsync(carritoId);
        CalcularTotal();
    }

    private void CalcularTotal()
    {
        Total = ItemsCarrito.Sum(i => i.PrecioUnitario * i.Cantidad);
    }

private async Task Aumentar(ItemCarrito item)
{
    await CarritoService.AumentarItemAsync(carritoId, item.ProductoId);
    await CargarCarrito();
}


private async Task Disminuir(ItemCarrito item)
{
    await CarritoService.DisminuirItemAsync(carritoId, item.ProductoId);
    await CargarCarrito();
}


    private async Task EliminarItem(ItemCarrito item)
    {
        await CarritoService.EliminarItemAsync(carritoId, item.ProductoId);
        await CargarCarrito();
    }

    private async Task VaciarCarrito()
    {
        await CarritoService.VaciarCarritoAsync(carritoId);
        await CargarCarrito();
    }

    private async Task ConfirmarCompra()
    {
        var confirmacion = new ConfirmacionRequest
        {
            Nombre = "Cliente",
            Apellido = "Demo",
            Email = "cliente@demo.com"
        };

        await CarritoService.ConfirmarCompraAsync(carritoId, confirmacion);
        await CargarCarrito();
    }
}
