@page "/"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Nav
@inject CartState CartState

@using Microsoft.JSInterop

@inject IJSRuntime JS

<h1 class="mb-4">CatÃ¡logo de Productos</h1>

<!-- Buscador -->
<div class="mb-3">
    <input 
        type="text"
        @bind="search"
        @bind:event="oninput"
        placeholder="Buscar productos..."
        class="form-control"
        style="max-width: 300px; display: inline-block;" />
    <button class="btn ms-2" @onclick="LoadProducts">Buscar</button>
</div>

<div class="products-container">
    @foreach (var p in productos)
    {
        <div class="product-card">
            <img src="@p.ImagenUrl" alt="@p.Nombre" />
            <h5 class="text-center">@p.Nombre</h5>
            <p class="text-center">@p.Descripcion</p>
            <p><strong>Precio:</strong> $@p.Precio</p>
            <p><strong>Stock:</strong> @p.Stock</p>

        <button class="btn-agregar" @onclick="() => MostrarConfirmacion(p)">
    ðŸ›’ Agregar al carrito
        </button>
        </div>
    }
</div>

@if (mostrarModal && productoSeleccionado != null)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Â¿Agregar <b>@productoSeleccionado.Nombre</b> al carrito?</h3>
            <button class="btn-confirmar" @onclick="ConfirmarAgregar">SÃ­, agregar</button>
            <button class="btn-cancelar" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
}
@if (mostrarModal && productoSeleccionado != null)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Â¿Agregar <b>@productoSeleccionado.Nombre</b> al carrito?</h3>
            <button class="btn-confirmar" @onclick="ConfirmarAgregar">SÃ­, agregar</button>
            <button class="btn-cancelar" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
}


@code {
    private List<Producto> productos = new();
    private string search = string.Empty;
    private int cartId = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var url = string.IsNullOrWhiteSpace(search)
            ? "/productos"
            : $"/productos?search={Uri.EscapeDataString(search)}";

        productos = await Http.GetFromJsonAsync<List<Producto>>(url) ?? new List<Producto>();
    }

    private async Task AddToCart(int id)
    {
        var res = await Http.PutAsync($"/carritos/{cartId}/{id}", null);
        if (res.IsSuccessStatusCode)
        {
            CartState.Items++;
            Nav.NavigateTo("/");
        }
    }

    private Producto? productoSeleccionado;
private bool mostrarModal = false;

private void MostrarConfirmacion(Producto producto)
{
    productoSeleccionado = producto;
    mostrarModal = true;
}

private async Task ConfirmarAgregar()
{
    if (productoSeleccionado is not null)
    {
        await AddToCart(productoSeleccionado.Id);
    }
    productoSeleccionado = null;
    mostrarModal = false;
}

private void Cancelar()
{
    productoSeleccionado = null;
    mostrarModal = false;
}
}
