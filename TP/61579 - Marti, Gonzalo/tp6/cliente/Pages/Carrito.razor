@page "/carrito"
@inject HttpClient Http
@inject NavigationManager Nav


<h1>Carrito de Compra</h1>

@if (items.Count == 0)
{
    <p>Carrito vac√≠o.</p>
}
else
{
    <table>
        <thead>
            <tr><th>Producto</th><th>Cantidad</th><th>Precio unitario</th></tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.ProductoId</td>
                    <td>@item.Cantidad</td>
                    <td>@item.PrecioUnitario</td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="EmptyCart">Vaciar carrito</button>
    <button @onclick="ConfirmPurchase">Confirmar compra</button>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public int? add { get; set; }

    private int carritoId = 1;
    private List<ItemCompra> items = new();

    protected override async Task OnInitializedAsync()
    {
        if (add.HasValue)
        {
            await Http.PutAsync($"/carritos/{carritoId}/{add}", null);
            Nav.NavigateTo("/carrito", forceLoad: true);
            items = await Http.GetFromJsonAsync<List<ItemCompra>>($"/carritos/{carritoId}")
            ?? new();
            return;
            
        }
        await LoadCart();
    }

    private async Task LoadCart()
    {
        items = await Http.GetFromJsonAsync<List<ItemCompra>>($"/carritos/{carritoId}") ?? new();
    }

    void EmptyCart() => Http.DeleteAsync($"/carritos/{carritoId}")
        .ContinueWith(_ => Nav.NavigateTo("/", forceLoad: true));

    void ConfirmPurchase() => Nav.NavigateTo($"/confirmacion?carritoId={carritoId}");
}

