@page "/confirmacion"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Net.Http.Json

<h2>Confirmar Compra</h2>

@if (!string.IsNullOrEmpty(mensajeExito))
{
    <div class="alert alert-success text-center" role="alert">
        @mensajeExito
    </div>
}

@if (items == null)
{
    <p>Cargando resumen...</p>
}
else if (!items.Any())
{
    <div class="alert alert-info">El carrito estÃ¡ vacÃ­o.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Importe</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Producto.Nombre</td>
                    <td>$@item.Producto.Precio</td>
                    <td>@item.Cantidad</td>
                    <td>$@item.Importe</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="text-end">
        <b>Total: $@items.Sum(i => i.Importe)</b>
    </div>
    <EditForm Model="cliente" OnValidSubmit="ConfirmarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Nombre</label>
            <InputText class="form-control" @bind-Value="cliente.NombreCliente" required />
        </div>
        <div class="mb-2">
            <label>Apellido</label>
            <InputText class="form-control" @bind-Value="cliente.ApellidoCliente" required />
        </div>
        <div class="mb-2">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="cliente.EmailCliente" required />
        </div>
        <button class="btn btn-success mt-2" type="submit">Confirmar compra</button>
    </EditForm>
}

@code {
    private Guid? carritoId;
    private List<ItemCarrito>? items;
    private ClienteCompra cliente = new();
    private string? mensajeExito;

    protected override async Task OnInitializedAsync()
    {
        var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (Guid.TryParse(idStr, out var id))
            carritoId = id;

        if (carritoId != null)
            items = await Http.GetFromJsonAsync<List<ItemCarrito>>($"/carritos/{carritoId}");
    }

    private async Task ConfirmarCompra()
    {
        if (carritoId == null)
            return;

        var response = await Http.PutAsJsonAsync($"/carritos/{carritoId}/confirmar", cliente);
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "carritoId");
            mensajeExito = "Â¡Compra confirmada! Gracias por tu compra ðŸ˜Š";
            items = new();
            cliente = new();
            StateHasChanged();
            await Task.Delay(1800); // Espera 1.8 segundos para mostrar el mensaje
            Nav.NavigateTo("/");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            mensajeExito = $"<span class='text-danger'>No se pudo confirmar la compra: {error}</span>";
        }
    }

    public class ItemCarrito
    {
        public Producto Producto { get; set; }
        public int Cantidad { get; set; }
        public decimal Importe { get; set; }
    }
    public class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public decimal Precio { get; set; }
        public int Stock { get; set; }
        public string ImagenUrl { get; set; }
    }
    public class ClienteCompra
    {
        public string NombreCliente { get; set; }
        public string ApellidoCliente { get; set; }
        public string EmailCliente { get; set; }
    }
}