@page "/carrito"
@inject HttpClient Http
@inject IJSRuntime JS
@using System.Net.Http.Json

<h2>Carrito de Compras</h2>

@if (items == null)
{
    <p>Cargando carrito...</p>
}
else if (!items.Any())
{
    <div class="alert alert-info">El carrito está vacío.</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Importe</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>
                        <img src="@item.Producto.ImagenUrl" style="height:40px;width:40px;object-fit:contain;" />
                        @item.Producto.Nombre
                    </td>
                    <td>$@item.Producto.Precio</td>
                    <td>
                        <button class="btn btn-sm btn-secondary" @onclick="() => CambiarCantidad(item.Producto.Id, item.Cantidad - 1)" disabled="@(item.Cantidad <= 1)">-</button>
                        <span class="mx-2">@item.Cantidad</span>
                        <button class="btn btn-sm btn-secondary" @onclick="() => CambiarCantidad(item.Producto.Id, item.Cantidad + 1)" disabled="@(item.Cantidad >= item.Producto.Stock)">+</button>
                    </td>
                    <td>$@(item.Importe)</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarItem(item.Producto.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="text-end">
        <b>Total: $@items.Sum(i => i.Importe)</b>
    </div>
    <div class="mt-3">
        <button class="btn btn-warning" @onclick="VaciarCarrito">Vaciar carrito</button>
        <a class="btn btn-success ms-2" href="/confirmacion">Confirmar compra</a>
    </div>
}

@code {
    private Guid? carritoId;
    private List<ItemCarrito>? items;

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCarritoId();
        await CargarCarrito();
    }

    private async Task ObtenerCarritoId()
    {
        var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (Guid.TryParse(idStr, out var id))
            carritoId = id;
    }

    private async Task CargarCarrito()
    {
        if (carritoId == null)
        {
            items = new();
            return;
        }
        items = await Http.GetFromJsonAsync<List<ItemCarrito>>($"/carritos/{carritoId}");
    }

    private async Task CambiarCantidad(int productoId, int nuevaCantidad)
    {
        if (carritoId == null || nuevaCantidad < 1)
            return;

        var response = await Http.PutAsync($"/carritos/{carritoId}/{productoId}?cantidad={nuevaCantidad}", null);
        if (response.IsSuccessStatusCode)
            await CargarCarrito();
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("alert", $"No se pudo actualizar: {error}");
        }
    }

    private async Task EliminarItem(int productoId)
    {
        if (carritoId == null)
            return;

        await Http.DeleteAsync($"/carritos/{carritoId}/{productoId}");
        await CargarCarrito();
    }

    private async Task VaciarCarrito()
    {
        if (carritoId == null)
            return;

        await Http.DeleteAsync($"/carritos/{carritoId}");
        await CargarCarrito();
    }

    public class ItemCarrito
    {
        public Producto Producto { get; set; }
        public int Cantidad { get; set; }
        public decimal Importe { get; set; }
    }
    public class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public decimal Precio { get; set; }
        public int Stock { get; set; }
        public string ImagenUrl { get; set; }
    }
}