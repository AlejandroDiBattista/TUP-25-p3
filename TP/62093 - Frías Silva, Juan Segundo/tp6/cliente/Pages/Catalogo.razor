@page "/"
@using cliente.Models
@inject HttpClient Http
@inject CartService CartService

<h2 class="text-center mt-4 mb-4">Catálogo de Perfumes de Diseñador</h2>

<div class="d-flex justify-content-center mb-4">
    <input type="text" class="form-control w-50" placeholder="Buscar por nombre..."
           @oninput="FiltrarPorNombre" value="@Busqueda" />
</div>

@if (productos is null)
{
    <p class="text-center">Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p class="text-center">No se encontraron productos.</p>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
            @foreach (var producto in productos)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <img src="@producto.ImagenUrl" alt="@producto.Nombre"
                             class="card-img-top mx-auto d-block"
                             style="height: 180px; width: auto; object-fit: contain; padding: 10px;" />
                        <div class="card-body">
                            <h5 class="card-title">@producto.Nombre</h5>
                            <p class="card-text">@producto.Descripcion</p>
                            <p><strong>Precio:</strong> $@producto.Precio</p>
                            <p><strong>Stock:</strong> @producto.Stock</p>
                            <button class="btn btn-primary w-100"
                                    @onclick="() => AgregarAlCarrito(producto)"
                                    disabled="@(!PuedeAgregar(producto))">
                                Agregar al carrito
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Producto>? productos;
    private string Busqueda = "";

    private async Task FiltrarPorNombre(ChangeEventArgs e)
    {
        Busqueda = e.Value?.ToString() ?? "";
        await CargarProductos();
    }

    private async Task CargarProductos()
    {
        string url = string.IsNullOrWhiteSpace(Busqueda)
            ? "/productos"
            : $"/productos?nombre={Uri.EscapeDataString(Busqueda)}";

        productos = await Http.GetFromJsonAsync<List<Producto>>(url);
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();
    }

    private void AgregarAlCarrito(Producto producto)
    {
        CartService.AgregarProducto(producto);
        producto.Stock--;
    }

    private bool PuedeAgregar(Producto producto)
    {
        return producto.Stock > 0;
    }
}