// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using servidor.Data;

#nullable disable

namespace servidor.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250614020529_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("servidor.Models.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApellidoCliente")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailCliente")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreCliente")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("servidor.Models.ItemCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompraId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompraId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ItemsCompra");
                });

            modelBuilder.Entity("servidor.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagenUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Precio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Clásico e icónico, floral-aldehídico.",
                            ImagenUrl = "https://ejemplo.com/chanel_no5.jpg",
                            Nombre = "Chanel N°5",
                            Precio = 150.00m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Fresco y amaderado, para hombres.",
                            ImagenUrl = "https://ejemplo.com/dior_sauvage.jpg",
                            Nombre = "Dior Sauvage",
                            Precio = 120.00m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Oscuro, opulento y especiado.",
                            ImagenUrl = "https://ejemplo.com/tom_ford_black_orchid.jpg",
                            Nombre = "Tom Ford Black Orchid",
                            Precio = 200.00m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 4,
                            Descripcion = "Fresco y mineral, unisex.",
                            ImagenUrl = "https://ejemplo.com/jo_malone_woodsage.jpg",
                            Nombre = "Jo Malone Wood Sage & Sea Salt",
                            Precio = 90.00m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            Descripcion = "Floral blanco, empolvado.",
                            ImagenUrl = "https://ejemplo.com/gucci_bloom.jpg",
                            Nombre = "Gucci Bloom",
                            Precio = 110.00m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 6,
                            Descripcion = "Amaderado especiado, para hombres.",
                            ImagenUrl = "https://ejemplo.com/paco_rabanne_1million.jpg",
                            Nombre = "Paco Rabanne 1 Million",
                            Precio = 95.00m,
                            Stock = 35
                        },
                        new
                        {
                            Id = 7,
                            Descripcion = "Gourmand floral, dulce.",
                            ImagenUrl = "https://ejemplo.com/lancome_lavie.jpg",
                            Nombre = "Lancôme La Vie Est Belle",
                            Precio = 105.00m,
                            Stock = 28
                        },
                        new
                        {
                            Id = 8,
                            Descripcion = "Aromático fougère, para hombres.",
                            ImagenUrl = "https://ejemplo.com/versace_eros.jpg",
                            Nombre = "Versace Eros",
                            Precio = 85.00m,
                            Stock = 45
                        },
                        new
                        {
                            Id = 9,
                            Descripcion = "Oriental especiado, café, vainilla.",
                            ImagenUrl = "https://ejemplo.com/ysl_black_opium.jpg",
                            Nombre = "YSL Black Opium",
                            Precio = 115.00m,
                            Stock = 22
                        },
                        new
                        {
                            Id = 10,
                            Descripcion = "Floral oriental, dulce.",
                            ImagenUrl = "https://ejemplo.com/ch_good_girl.jpg",
                            Nombre = "Carolina Herrera Good Girl",
                            Precio = 130.00m,
                            Stock = 18
                        });
                });

            modelBuilder.Entity("servidor.Models.ItemCompra", b =>
                {
                    b.HasOne("servidor.Models.Compra", "Compra")
                        .WithMany("Items")
                        .HasForeignKey("CompraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("servidor.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("servidor.Models.Compra", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
