@page "/confirmacion"
@inject HttpClient Http
@inject CarritoService CarritoService
@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations

<PageTitle>Confirmar Compra</PageTitle>

<h3><i class="bi bi-check-square-fill"></i> Confirmar Compra</h3>

@if (mensaje != null)
{
    <div class="alert @(esError ? "alert-danger" : "alert-success")">@mensaje</div>
    @if (!esError)
    {
        <button class="btn btn-primary" @onclick='() => NavManager.NavigateTo("/")'>Volver al Catálogo</button>
    }
}
else
{
    <EditForm Model="@cliente" OnValidSubmit="RealizarConfirmacion">
        <DataAnnotationsValidator />
        
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="cliente.Nombre" />
            <ValidationMessage For="@(() => cliente.Nombre)" />
        </div>

        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido</label>
            <InputText id="apellido" class="form-control" @bind-Value="cliente.Apellido" />
            <ValidationMessage For="@(() => cliente.Apellido)" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="cliente.Email" />
            <ValidationMessage For="@(() => cliente.Email)" />
        </div>

        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-secondary me-2" @onclick='() => NavManager.NavigateTo("/carrito")'>Volver al Carrito</button>
            <button type="submit" class="btn btn-success" disabled="@estaProcesando">
                 @if(estaProcesando)
                 {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Procesando...</span>
                 }
                 else
                 {
                    <span>Confirmar y Pagar</span>
                 }
            </button>
        </div>
    </EditForm>
}

@code {
    private FormularioCliente cliente = new();
    private string? mensaje;
    private bool esError = false;
    private bool estaProcesando = false;

    private async Task RealizarConfirmacion()
    {
        estaProcesando = true;
        var clienteDto = new ClienteDto { Nombre = cliente.Nombre, Apellido = cliente.Apellido, Email = cliente.Email };
        
        var response = await Http.PutAsJsonAsync($"/api/carritos/{CarritoService.CarritoId}/confirmar", clienteDto);

        if (response.IsSuccessStatusCode)
        {
            mensaje = "¡Compra confirmada con éxito! Gracias por elegirnos.";
            esError = false;
            await CarritoService.LimpiarCarrito(); // Limpia el carrito y actualiza el contador
        }
        else
        {
            mensaje = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrWhiteSpace(mensaje))
            {
                mensaje = "Ocurrió un error al confirmar la compra. Por favor, intenta de nuevo.";
            }
            esError = true;
        }
        estaProcesando = false;
    }

    // Clase interna para el manejo del formulario con validaciones
    public class FormularioCliente
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; }
        
        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido")]
        public string Email { get; set; }
    }
}