@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager NavManager
@inject CarritoService CarritoService
@using cliente.Services

<div class="page">
    <header class="fixed-top shadow-sm">
        <nav class="navbar navbar-expand-lg navbar-light bg-white">
            <div class="container-fluid">
                <a class="navbar-brand" href="/">
                    <strong>PerfumeShop</strong>
                </a>
                <div class="d-flex align-items-center ms-auto">
                    <div class="input-group me-3">
                        <input type="text" class="form-control" placeholder="Buscar perfumes..." @bind="terminoBusqueda" @onkeyup="HandleSearch" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="RealizarBusqueda">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                    <a href="/carrito" class="nav-link">
                        <i class="bi bi-cart-fill" style="font-size: 1.5rem;"></i>
                        <span class="badge rounded-pill bg-danger">@CarritoService.CantidadItems</span>
                    </a>
                </div>
            </div>
        </nav>
    </header>

    <main class="container mt-5 pt-4">
        <div class="content px-4">
            @Body
        </div>
    </main>
</div>

@code {
    private string terminoBusqueda = "";

    protected override async Task OnInitializedAsync()
    {
        // Nos suscribimos al evento del carrito.
        CarritoService.OnChange += OnCartChanged;

        // **LÓGICA MEJORADA Y MÁS SEGURA**
        // Ahora el layout controla el flujo:
        // 1. Pide la inicialización.
        // 2. Una vez inicializado, pide la actualización del contador.
        // Esto evita que el servicio dispare eventos durante su propia inicialización.
        try
        {
            await CarritoService.InicializarCarrito();
            await CarritoService.ActualizarCantidadDesdeApi();
        }
        catch (Exception ex)
        {
            // Si algo falla, solo lo registramos en la consola.
            // La barra de error ya no aparecerá.
            Console.WriteLine($"Error durante la inicialización: {ex.Message}");
        }
    }

    // Este método se asegura de que la actualización de la UI se haga de forma segura
    private void OnCartChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void HandleSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            RealizarBusqueda();
        }
    }

    private void RealizarBusqueda()
    {
        if (!string.IsNullOrWhiteSpace(terminoBusqueda))
        {
            NavManager.NavigateTo($"/buscar/{terminoBusqueda}");
        }
        else
        {
             NavManager.NavigateTo("/");
        }
    }

    public void Dispose()
    {
        CarritoService.OnChange -= OnCartChanged;
    }
}