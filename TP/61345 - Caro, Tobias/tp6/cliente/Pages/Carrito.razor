@page "/carrito"
@using cliente.Services
@using cliente.Shared
@inject ApiService ApiService
@inject IJSRuntime JS

<PageTitle>Carrito de Compras</PageTitle>

<div class="cart-container">
    <header class="cart-header">
        <div class="cart-title-container">
            <h1 class="cart-title">
                Mi Carrito de Compras
            </h1>
        </div>
        <button class="btn btn-outline-primary ms-3" @onclick="RegresarAlMenu">
            <span class="me-1">‚Üê</span> Volver al Men√∫
        </button>
    </header>

    <div class="cart-content">
        @if (!string.IsNullOrEmpty(errorMsg))
        {
            <div class="error-alert">
                <strong>‚ö†Ô∏è Error:</strong> @errorMsg
            </div>
        }

        @if (items == null)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p class="text-muted mb-0">Cargando productos del carrito...</p>
            </div>
        }
        else if (items.Count == 0)
        {
            <div class="empty-cart">
                <div class="empty-cart-icon">üõçÔ∏è</div>
                <p class="empty-cart-text mb-0">Tu carrito est√° vac√≠o</p>
                <small class="text-muted">¬°Agrega algunos productos para comenzar!</small>
            </div>
        }
        else
        {
            <div class="cart-items">
                @foreach (var item in items)
                {
                    <div class="cart-item d-flex align-items-center">
                        <img src="@item.Producto?.ImagenUrl" 
                             alt="@item.Producto?.Nombre" 
                             class="product-image" />
                        
                        <div class="product-info">
                            <div class="product-name">@item.Producto?.Nombre</div>
                            <div class="product-price">Precio unitario: $@item.PrecioUnitario</div>
                        </div>
                        
                        <div class="quantity-controls">
                            <button class="quantity-btn-less" 
                                    @onclick="() => CambiarCantidad(item, -1)"
                                    title="Reducir cantidad">
                                ‚àí
                            </button>
                            <span class="quantity-display">@item.Cantidad</span>
                            <button class="quantity-btn" 
                                    @onclick="() => CambiarCantidad(item, 1)" 
                                    disabled="@(item.Cantidad >= (item.Producto?.Stock ?? int.MaxValue))"
                                    title="Aumentar cantidad">
                                +
                            </button>
                        </div>
                        
                        <div class="subtotal-section">
                            <div class="text-muted small">Subtotal</div>
                            <div class="subtotal-amount">$@(item.PrecioUnitario * item.Cantidad)</div>
                        </div>
                    </div>
                }
            </div>
            
            <div class="total-section">
                <div class="text-light opacity-75 mb-1">Total del carrito</div>
                <h2 class="total-amount">$@items.Sum(i => i.PrecioUnitario * i.Cantidad)</h2>
            </div>
        }
    </div>
</div>

@code {
    private List<ItemCompra> items;
    private int carritoId;
    private string errorMsg;

    protected override async Task OnInitializedAsync()
    {
        var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (!int.TryParse(idStr, out carritoId) || carritoId == 0)
        {
            items = new List<ItemCompra>();
            return;
        }
        await CargarItems();
    }

    private async Task CargarItems()
    {
        try
        {
            items = await ApiService.ObtenerItemsCarritoAsync(carritoId);
        }
        catch
        {
            items = new List<ItemCompra>();
        }
        StateHasChanged();
    }

    private async Task CambiarCantidad(ItemCompra item, int delta)
    {
        errorMsg = string.Empty;
        if (delta == 0) return;
        int nuevaCantidad = item.Cantidad + delta;
        if (nuevaCantidad < 1)
        {
            await ApiService.EliminarDelCarrito(carritoId, item.Producto.Id);
        }
        else
        {
            try
            {
                await ApiService.AgregarAlCarrito(carritoId, item.Producto.Id, nuevaCantidad);
            }
            catch (HttpRequestException ex)
            {
                errorMsg = "No hay stock suficiente para este producto.";
            }
        }
        await CargarItems();
    }

    private void RegresarAlMenu()
    {
        // Redirige a la p√°gina principal (Home)
        NavigationManager.NavigateTo("/");
    }
    [Inject] private NavigationManager NavigationManager { get; set; }
}