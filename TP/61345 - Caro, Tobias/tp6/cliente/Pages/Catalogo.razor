@using cliente.Services
@using cliente.Shared
@using Microsoft.AspNetCore.Components
@inject ApiService ApiService
@inject NavigationManager NavigationManager

<div class="container my-4">
    <div class="d-flex flex-column align-items-center mb-3">
        <div class="catalogo-titulo-container">
            <h2>Cat√°logo de Productos</h2>
        </div>
    </div>
    <div class="d-flex flex-column align-items-center mb-4">
        <div class="search-input-container">            <input
                id="input-buscador-productos"
                class="input-buscador-productos"
                type="text"
                placeholder="Buscar producto..."
                @bind="busqueda"
                @bind:event="oninput" />
            </div>
    </div>

    @if (productos is null)
    {
        <p>Cargando productos...</p>
    }
    else if (productos.Count == 0)
    {
        <p>No hay productos disponibles.</p>
    }
    else
    {
        var productosFiltrados = string.IsNullOrWhiteSpace(busqueda)
            ? productos
            : productos.Where(p => p.Nombre.Contains(busqueda, StringComparison.OrdinalIgnoreCase) || (p.Descripcion?.Contains(busqueda, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();
        if (productosFiltrados.Count == 0 && !string.IsNullOrWhiteSpace(busqueda))
        {
            <div class="d-flex justify-content-center align-items-center my-5" style="min-height: 70vh; height: 70vh;">
                <div class="card card-warning-notfound" style="min-width: 380px; max-width: 500px; width: 100%; border: 2px solid #ff9800; background: #fffbe6;">
                    <div class="card-body d-flex flex-column align-items-center justify-content-center">
                        <span class="mb-3" style="font-size:2.5rem; color:#ff9800;">&#9888;</span>
                        <h5 class="card-title mb-2" style="color:#b26a00;">No se encuentra este producto</h5>
                        <p class="card-text text-center">No hay resultados para: <strong>@busqueda</strong></p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row row-cols-1 row-cols-sm-2 row-cols-md-5 row-cols-lg-5 g-4">
                @foreach (var producto in productosFiltrados)
                {
                    <div class="col">
                        <div class="card h-100 shadow-sm">
                            <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" />
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@producto.Nombre</h5>
                                <p class="card-text text-muted">@producto.Descripcion</p>
                                <div class="mt-auto">
                                    <p class="fw-bold">$@producto.Precio</p>
                                    @if (producto.GetType().GetProperty("Stock") != null)
                                    {
                                        <p class="text-secondary">Stock: @(producto.GetType().GetProperty("Stock")?.GetValue(producto, null) ?? "-")</p>
                                    }
                                    <button class="btn-card" @onclick="() => AgregarAlCarrito(producto.Id)">Agregar al carrito</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter] public int CarritoId { get; set; }
    [Parameter] public EventCallback OnProductoAgregado { get; set; }
    private List<Producto> productos;
    private string errorMsg;
    private string busqueda = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productos = await ApiService.ObtenerProductosAsync();
        }
        catch (Exception ex)
        {
            errorMsg = $"Error al cargar productos: {ex.Message}";
        }
    }    private async Task AgregarAlCarrito(int productoId)
    {
        try
        {
            await ApiService.AgregarAlCarrito(CarritoId, productoId, 1);
            if (OnProductoAgregado.HasDelegate)
                await OnProductoAgregado.InvokeAsync();
            NavigationManager.NavigateTo("/carrito");
        }
        catch (Exception ex)
        {
            errorMsg = $"Error al agregar al carrito: {ex.Message}";
        }
    }
}