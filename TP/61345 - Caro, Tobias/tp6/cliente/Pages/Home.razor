@page "/"
@using cliente.Services
@using cliente.Pages
@inject ApiService ApiService
@inject IJSRuntime JS

<PageTitle>Black Store //</PageTitle>

<header class="custom-header">
    <div class="header-content">
        <h1 class="store-title">&#128206 Black Store //</h1>
    </div>

<a class="alert-container" href="/carrito">
    @if (cartCount == 0)
    {
        <div class="alert alert-info">No hay productos en el carrito.</div>
    }
    else if (cartCount == 1)
    {
        <div class="alert alert-warning">Hay 1 producto en el carrito.</div>
    }
    else
    {
        <div class="alert alert-success">Hay @cartCount productos en el carrito</div>
    }
</a>
</header>



<Catalogo CarritoId="carritoId" OnProductoAgregado="ActualizarCartCount" />

@code {
    private int cartCount = 0;
    private int carritoId;

    protected override async Task OnInitializedAsync()
    {
        // Intentar obtener el carritoId de localStorage
        var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (!int.TryParse(idStr, out carritoId) || carritoId <= 0)
        {
            // Si no existe o es inválido, inicializar uno nuevo
            carritoId = await ApiService.InicializarCarritoAsync();
            await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
        }
        if (carritoId > 0)
        {
            var cantidad = await ApiService.ObtenerCantidadCarritoAsync(carritoId);
            if (cantidad == -1) // Carrito no existe en backend
            {
                await JS.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                carritoId = await ApiService.InicializarCarritoAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
                cantidad = await ApiService.ObtenerCantidadCarritoAsync(carritoId);
            }
            cartCount = cantidad > 0 ? cantidad : 0;
        }
        else
            cartCount = 0;
    }

    private async void ActualizarCartCount()
    {
        if (carritoId > 0)
        {
            var cantidad = await ApiService.ObtenerCantidadCarritoAsync(carritoId);
            if (cantidad == -1)
            {
                await JS.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                carritoId = await ApiService.InicializarCarritoAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
                cantidad = await ApiService.ObtenerCantidadCarritoAsync(carritoId);
            }
            cartCount = cantidad > 0 ? cantidad : 0;
        }
        else
            cartCount = 0;
        StateHasChanged();
    }
}


