@page "/carrito"
@using cliente.Services
@using System.Globalization
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="carrito-main-center carrito-card-separada">
    <div class="container py-4">
        <div class="row mb-4">
            <div class="col-12 col-md-8">
                <h2 class="carrito-titulo mb-0">Carrito de Compras</h2>
            </div>
        </div>
        @if (carrito == null)
        {
            <div class="text-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Cargando carrito...</span>
                </div>
            </div>
        }
        else if (carrito.Count == 0)
        {
            <div class="carrito-vacio text-center p-5 rounded-4 shadow-lg bg-white border border-2 border-primary-subtle mx-auto" style="max-width: 480px;">
                <i class="bi bi-cart-x display-2 text-primary mb-3"></i>
                <div class="fw-bold fs-2 mb-2" style="color:#1b6ec2;">¡Tu carrito está vacío!</div>
                <div class="text-secondary mb-4 carrito-vacio-mensaje">Agrega productos para comenzar tu compra.</div>
                <button class="btn btn-volver-catalogo mt-2" @onclick="VolverAlCatalogo">
                    <i class="bi bi-arrow-left"></i> Volver al catálogo
                </button>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table align-middle table-bordered shadow-sm bg-white">
                    <thead class="table-light">
                        <tr>
                            <th>Producto</th>
                            <th>Precio</th>
                            <th>Cantidad</th>
                            <th>Subtotal</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in carrito)
                        {
                            <tr>
                                <td class="carrito-producto-nombre">@item.Nombre</td>
                                <td class="carrito-precio">@item.Precio.ToString("C", CultureInfo.GetCultureInfo("es-AR"))</td>
                                <td style="width:120px;">
                                    <div class="input-group input-group-sm justify-content-center gap-2">
                                        <button class="btn btn-outline-danger fw-bold rounded-circle shadow-sm" style="min-width:2.5rem; font-size:1.3rem;" @onclick="async () => await CambiarCantidad(item, -1)" disabled="@(item.Cantidad <= 1)">
                                            -
                                        </button>
                                        <span class="input-group-text bg-white border-0 fw-bold" style="min-width:2.5rem; font-size:1.2rem;">@item.Cantidad</span>
                                        <button class="btn btn-outline-success fw-bold rounded-circle shadow-sm" style="min-width:2.5rem; font-size:1.3rem;" @onclick="async () => await CambiarCantidad(item, 1)" disabled="@(item.Cantidad >= ObtenerStockDisponible(item))">
                                            +
                                        </button>
                                    </div>
                                </td>
                                <td class="carrito-subtotal fw-bold">@string.Format(new System.Globalization.CultureInfo("es-AR"), "{0:C}", item.Precio * item.Cantidad)</td>
                                <td>
                                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarItem(item)">
                                        <i class="bi bi-trash"></i> Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="row justify-content-end">
                <div class="col-md-4">
                    <div class="carrito-total-box text-center mb-3">
                        <span class="carrito-total-label">TOTAL:</span>
                        <span class="carrito-total-valor ms-2">@TotalCarrito.ToString("C", CultureInfo.GetCultureInfo("es-AR"))</span>
                    </div>
                    <button class="btn btn-volver-catalogo w-100 mb-2" @onclick="VolverAlCatalogo">
                        <i class="bi bi-arrow-left"></i> Volver al catálogo
                    </button>
                    <button class="btn btn-confirmar-compra w-100 mt-3 fs-5 py-3 shadow-sm" @onclick="ConfirmarCompra">
                        <i class="bi bi-bag-check"></i> Confirmar compra
                    </button>
                </div>
            </div>
        }
        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger mt-4">@error</div>
        }
    </div>
</div>

@code {
    private List<CarritoItemDto> carrito;
    private List<Producto> productos;
    private Guid carritoId;
    private string error = null;

    protected override async Task OnInitializedAsync()
    {
        try {
            await CargarCarritoId();
            await CargarCarrito();
            productos = await ApiService.ObtenerProductosAsync();
        } catch (Exception ex) {
            error = ex.Message;
        }
    }

    private async Task CargarCarritoId()
    {
        try {
            var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
            if (!Guid.TryParse(idStr, out carritoId))
            {
                carritoId = await ApiService.CrearCarritoAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
            }
            error = null;
        } catch (Exception ex) {
            error = "Error al obtener carrito: " + ex.Message;
        }
    }

    private async Task CargarCarrito()
    {
        try {
            carrito = await ApiService.ObtenerCarritoAsync(carritoId);
            error = null;
        } catch (HttpRequestException ex) {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound) {
                await JS.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                carritoId = await ApiService.CrearCarritoAsync();
                await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
                carrito = await ApiService.ObtenerCarritoAsync(carritoId);
                error = null;
            } else {
                error = "Error al cargar el carrito: " + ex.Message;
            }
        } catch (Exception ex) {
            error = "Error al cargar el carrito: " + ex.Message;
        }
        StateHasChanged();
    }

    private decimal TotalCarrito => carrito?.Sum(i => i.Precio * i.Cantidad) ?? 0;

    private async Task CambiarCantidad(CarritoItemDto item, int delta)
    {
        if (delta == 1 && item.Cantidad < ObtenerStockDisponible(item))
        {
            await ApiService.AgregarProductoAsync(carritoId, item.ProductoId, 1);
        }
        else if (delta == -1 && item.Cantidad > 1)
        {
            await ApiService.DisminuirCantidadAsync(carritoId, item.ProductoId, 1);
        }
        await CargarCarrito();
    }

    private async Task EliminarItem(CarritoItemDto item)
    {
        await ApiService.QuitarProductoAsync(carritoId, item.ProductoId);
        await CargarCarrito();
    }

    private void ConfirmarCompra()
    {
        Navigation.NavigateTo($"/confirmar-compra/{carritoId}");
    }

    private void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/");
    }

    private int ObtenerStockDisponible(CarritoItemDto item)
    {
        var prod = productos?.FirstOrDefault(p => p.Id == item.ProductoId);
        return prod?.Stock ?? 1;
    }
}
