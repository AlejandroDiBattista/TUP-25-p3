@page "/confirmar"
@using cliente.Services
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Confirmar compra</h3>

@if (carrito == null)
{
    <p>Cargando carrito...</p>
}
else if (!carrito.Any())
{
    <div class="alert alert-warning">El carrito está vacío.</div>
    <button class="btn btn-primary" @onclick="VolverAlCatalogo">Volver al catálogo</button>
}
else if (compraExitosa)
{
    <div class="alert alert-success">¡Compra realizada con éxito!</div>
    <button class="btn btn-primary" @onclick="VolverAlCatalogo">Volver al catálogo</button>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in carrito)
            {
                <tr>
                    <td>@item.Nombre</td>
                    <td>@item.Precio.ToString("C")</td>
                    <td>@item.Cantidad</td>
                    <td>@(item.Precio * item.Cantidad).ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="text-end mb-3">
        <h5>Total: @TotalCarrito.ToString("C")</h5>
    </div>
    <EditForm Model="datos" OnValidSubmit="ConfirmarCompra">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-2">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="datos.Nombre" required />
        </div>
        <div class="mb-2">
            <label>Apellido:</label>
            <InputText class="form-control" @bind-Value="datos.Apellido" required />
        </div>
        <div class="mb-2">
            <label>Email:</label>
            <InputText class="form-control" @bind-Value="datos.Email" type="email" required />
        </div>
        <button class="btn btn-success" type="submit">Confirmar compra</button>
        <button class="btn btn-secondary ms-2" type="button" @onclick="VolverAlCatalogo">Cancelar</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger mt-2">@error</div>
    }
}

@code {
    private List<CarritoItemDto> carrito;
    private Guid carritoId;
    private ConfirmacionDto datos = new();
    private string error;
    private bool compraExitosa = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarCarritoId();
        await CargarCarrito();
    }

    private async Task CargarCarritoId()
    {
        var idStr = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (!Guid.TryParse(idStr, out carritoId))
        {
            carritoId = await ApiService.CrearCarritoAsync();
            await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", carritoId.ToString());
        }
    }

    private async Task CargarCarrito()
    {
        carrito = await ApiService.ObtenerCarritoAsync(carritoId);
    }

    private decimal TotalCarrito => carrito?.Sum(i => i.Precio * i.Cantidad) ?? 0;

    private async Task ConfirmarCompra()
    {
        try
        {
            await ApiService.ConfirmarCompraAsync(carritoId, datos);
            compraExitosa = true;
            error = null;
        }
        catch (Exception ex)
        {
            error = "Error al confirmar la compra: " + ex.Message;
        }
    }

    private void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/");
    }
}
