@page "/"
@using cliente.Models
@inject cliente.Services.ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Catálogo de Productos</h3>

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p>No hay productos para mostrar.</p>
}
else
{
    <div class="row">
        @foreach (var producto in productos)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100">
                    @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                    {
                        <img src="@producto.ImagenUrl" class="card-img-top img-fluid" alt="@producto.Nombre" style="max-height: 150px; object-fit: contain;" />
                    }
                    <div class="card-body">
                        <h5 class="card-title">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                        <p>Precio: $@producto.Precio</p>
                        <p>Stock: @producto.Stock</p>
                        <button class="btn btn-primary" @onclick="() => AgregarAlCarrito(producto.Id, producto.Stock)" disabled="@((producto.Stock == 0))">
                            Agregar al carrito
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success mt-3">@mensaje</div>
}

@code {
    List<Producto> productos;
    string carritoId;
    string mensaje;

    protected override async Task OnInitializedAsync()
    {
        productos = await ApiService.ObtenerProductosAsync();
    }

    async Task<string> ObtenerOCrearCarritoId()
    {
        var id = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (!string.IsNullOrEmpty(id))
            id = id.Trim('"'); 

        if (string.IsNullOrEmpty(id))
        {
            id = await ApiService.CrearCarritoAsync();
            id = id.Trim('"'); 
            await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", id);
        }
        return id;
    }

    async Task AgregarAlCarrito(int productoId, int stock)
    {
        carritoId = await ObtenerOCrearCarritoId();
        if (stock > 0)
        {
            await ApiService.AgregarOActualizarProductoEnCarritoAsync(carritoId, productoId, 1);
            Navigation.NavigateTo("/carrito"); 
        }
        else
        {
            mensaje = "No hay stock disponible.";
        }
        StateHasChanged();
    }
}
