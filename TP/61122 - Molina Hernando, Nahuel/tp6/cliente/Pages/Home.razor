@page "/"
@using cliente.Models
@inject cliente.Services.ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AppState AppState
@inject IToastService ToastService

<style>
    .card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        background-color: #fff !important;
        color: #000 !important;
    }

    .card:hover {
        transform: scale(1.04);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    }
</style>

<h2 class="fw-bold text-center text-dark mb-4">Catálogo de Iphones</h2>

<div class="mb-4">
    <form class="d-flex" style="max-width: 400px;" @onsubmit="BuscarProductos">
        <input class="form-control me-2" type="search" placeholder="Buscar productos..." @bind="busqueda" />
        <button class="btn btn-outline-success" type="submit">Buscar</button>
    </form>
</div>

@if (productos is null)
{
    <p>Cargando productos...</p>
}
else if (productos.Count == 0)
{
    <p>No hay productos para mostrar.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var producto in productos)
        {
            <div class="col" @key="producto">
                <div class="card h-100 shadow-sm border-0 rounded-4">
                    @if (!string.IsNullOrEmpty(producto.ImagenUrl))
                    {
                        <img src="@producto.ImagenUrl" class="card-img-top p-3" alt="@producto.Nombre"
                            style="max-height: 180px; object-fit: contain; border-radius: 1rem;" />
                    }
                    <div class="card-body">
                        <h5 class="card-title fw-bold">@producto.Nombre</h5>
                        <p class="card-text">@producto.Descripcion</p>
                    </div>
                    <div class="card-footer bg-white border-0 d-flex justify-content-between align-items-center">
                        <div>
                            <span class="fw-bold text-success fs-5">$@producto.Precio</span>
                            <span class="text-secondary small ms-2">Stock: @producto.Stock</span>
                        </div>
                        <button class="btn btn-outline-primary rounded-pill d-flex align-items-center"
                            @onclick="() => AgregarAlCarrito(producto.Id, producto.Stock)" disabled="@((producto.Stock == 0))">
                            <i class="bi bi-cart-plus me-2"></i> Agregar
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-success mt-3">@mensaje</div>
}

@code {
    string busqueda = "";
    string carritoId;
    string mensaje;
    List<Producto> productos;

    protected override async Task OnInitializedAsync()
    {
        busqueda = "";
        await BuscarProductos();
    }

    async Task BuscarProductos()
    {
        try
        {
            productos = await ApiService.ObtenerProductosAsync(busqueda);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Ocurrió un error {ex.Message}");
        }
    }

    async Task<string> ObtenerCarrito()
    {
        var id = await JS.InvokeAsync<string>("localStorage.getItem", "carritoId");
        if (string.IsNullOrEmpty(id))
        {
            return await CrearCarrito();
        }

        try
        {
            var items = await ApiService.ObtenerCarritoAsync(id);
            return id;
        }
        catch (Exception ex)
        {
            return await CrearCarrito();
        }
    }

    async Task<string> CrearCarrito()
    {
        string id = await ApiService.CrearCarritoAsync();
        id = id.Trim('"');
        await JS.InvokeVoidAsync("localStorage.setItem", "carritoId", id);
        return id;
    }

    async Task AgregarAlCarrito(int productoId, int stock)
    {
        try
        {
            carritoId = await ObtenerCarrito();

            await ApiService.AgregarOActualizarProductoEnCarritoAsync(carritoId, productoId, 1);
            mensaje = "Producto agregado al carrito.";
            var items = await ApiService.ObtenerCarritoAsync(carritoId);
            AppState.ContadorCarrito = items?.Sum(p => p.Cantidad) ?? 0;

            ToastService.ShowInfo("Producto agregado al carrito");

            await BuscarProductos();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Ocurrió un error {ex.Message}");
        }
    }
}
