@page "/carrito"
@using cliente.Modelos
@using cliente.Services
@inject CarritoService CarritoService

<h2>Carrito de compras</h2>

@if (CarritoService.Items.Count == 0)
{
    <p>El carrito está vacío.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Producto</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Importe</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in CarritoService.Items)
            {
                <tr>
                    <td>@item.Producto.Nombre</td>
                    <td>$@item.Producto.Precio</td>
                    <td>
                  <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="async () => await Quitar(item.Producto.Id)">–</button>

                        @item.Cantidad
                       <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="async () => await Agregar(item.Producto)">+</button>

                    </td>
                    <td>$@item.Importe</td>
                    <td>
                        <button class="btn btn-sm btn-danger" @onclick="async () => await Eliminar(item.Producto.Id)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Total: $@CarritoService.Total</h4>

    <button class="btn btn-secondary me-2" @onclick="async () => await Vaciar()">Vaciar carrito</button>
    <button class="btn btn-primary" @onclick="IrAConfirmacion">Confirmar compra</button>
}

@code {
        protected override async Task OnInitializedAsync()
        {
            await CarritoService.Inicializar();
        }

            private async Task Agregar(Producto producto)
        {
            await CarritoService.AgregarProductoAsync(producto);
            StateHasChanged();
        }

        private Task Quitar(int productoId)
        {
            CarritoService.QuitarProducto(productoId);
            StateHasChanged();
            return Task.CompletedTask;
        }


        private Task Eliminar(int productoId)
        {
            CarritoService.EliminarProducto(productoId);
            StateHasChanged();
            return Task.CompletedTask;
        }

      private async Task Vaciar()
    {
        await CarritoService.Vaciar();
        StateHasChanged();
    }


    private void IrAConfirmacion()
    {
        NavigationManager.NavigateTo("/Confirmar");
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;
}
