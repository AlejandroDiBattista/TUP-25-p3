@page "/"
@using cliente.Services
@using cliente.Modelos
@inject CarritoService CarritoService
@inject ApiService ApiService
@inject NavigationManager Nav
@inject Buscador Buscador

@if (cargando)
{
    <p>Cargando productos...</p>
}
else if (productos == null)
{
    <p class="text-danger">Error al cargar los productos.</p>
}
else if (productosFiltrados.Count == 0)
{
    <p>No se encontraron productos para "@q"</p>
}
else
{
    <div class="container mt-3">
        <div class="row">
            @foreach (var producto in productosFiltrados)
            {
                <div class="col-md-4 mb-4">
                    <div class="card h-100">
                        <img src="@producto.ImagenUrl" class="card-img-top" style="object-fit: cover; height: 200px;" alt="Imagen de @producto.Nombre" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@producto.Nombre</h5>
                            <p class="card-text">@producto.Descripcion</p>
                            <p><strong>Precio:</strong> $@producto.Precio</p>
                            <p><strong>Stock:</strong> @producto.Stock</p>
                            <button class="btn btn-success" @onclick="() => AgregarAlCarrito(producto)" disabled="@(producto.Stock == 0)">
                                Agregar al carrito
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Producto>? productos;
    private List<Producto> productosFiltrados = new();
    private bool cargando = true;
    private string q = ""; // Este es el término que mostrás cuando no hay resultados

    protected override async Task OnInitializedAsync()
    {
        Buscador.NotifyTerminoChanged += FiltrarProductos;
        await CarritoService.Inicializar();

        try
        {
            productos = await ApiService.ObtenerProductosAsync();
            productosFiltrados = new List<Producto>(productos ?? Enumerable.Empty<Producto>());
        }
        catch
        {
            productos = null;
        }
        finally
        {
            cargando = false;
        }
    }

    private async void FiltrarProductos(string termino)
    {
        q = termino;

        if (string.IsNullOrWhiteSpace(termino))
        {
            productosFiltrados = new List<Producto>(productos ?? Enumerable.Empty<Producto>());
        }
        else
        {
            productosFiltrados = (productos ?? new List<Producto>())
                .Where(p => p.Nombre.Contains(termino, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Buscador.NotifyTerminoChanged -= FiltrarProductos;
    }

  private async Task AgregarAlCarrito(Producto producto)
{
    if (producto.Stock > 0)
    {
        await CarritoService.AgregarProductoAsync(producto); // LLAMA AL SERVIDOR
        StateHasChanged();
    }
}


}
