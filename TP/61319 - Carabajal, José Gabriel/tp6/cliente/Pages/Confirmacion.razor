@page "/confirmacion"
@using System.ComponentModel.DataAnnotations
@inject CarritoService CarritoService
@inject NavigationManager Navigation

<h3>Confirmar Compra</h3>

@if (!CarritoService.Items.Any())
{
    <p>No hay productos en el carrito.</p>
}
else
{
    <p>Total ítems: <strong>@CarritoService.Items.Sum(i => i.Cantidad)</strong></p>
    <p>Total a pagar: <strong>@(CarritoService.Items.Sum(i => i.Cantidad * i.PrecioUnitario).ToString("C", new System.Globalization.CultureInfo("es-AR")))</strong></p>


    <EditForm Model="form" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="form.Nombre" />
        </div>
        <div class="mb-3">
            <label class="form-label">Apellido</label>
            <InputText class="form-control" @bind-Value="form.Apellido" />
        </div>
        <div class="mb-3">
            <label class="form-label">Email</label>
            <InputText type="email" class="form-control" @bind-Value="form.Email" />
        </div>

        <button type="submit" class="btn btn-success">
            Confirmar
        </button>
    </EditForm>
}

@code {
    private FormularioCompra form = new();

    private async Task OnSubmit()
    {
        try
        {
            var dto = new cliente.Models.CheckoutDto
            {
                NombreCliente   = form.Nombre,
                ApellidoCliente = form.Apellido,
                EmailCliente    = form.Email
            };
            await CarritoService.ConfirmPurchaseAsync(dto);
            Navigation.NavigateTo("/");
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error al confirmar compra: {ex.Message}");
            // Opcional: mostrar un mensaje al usuario
            // mensajeError = "Hubo un problema al procesar tu compra. Intenta nuevamente.";
        }
    }
    class FormularioCompra
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string Apellido { get; set; } = string.Empty;

        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Debe ser un email válido")]
        public string Email { get; set; } = string.Empty;
    }
}
