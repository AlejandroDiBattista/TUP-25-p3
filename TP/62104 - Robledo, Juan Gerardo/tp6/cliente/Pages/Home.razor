@page "/"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<HeadContent>
    <link rel="stylesheet" href="css/home.css" />
</HeadContent>

<PageTitle>Tienda Online</PageTitle>

<!-- Header fijo -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top shadow">
    <div class="container">
        <a class="navbar-brand fw-bold" href="#" @onclick="() => VolverAlCatalogo()">
            <i class="fas fa-store me-2"></i>Tienda Online
        </a>
        
        <div class="d-flex align-items-center">
            <!-- Buscador -->
            <div class="input-group me-3" style="width: 300px;">
                <input type="text" class="form-control" placeholder="Buscar productos..." 
                       @bind="terminoBusqueda" @bind:event="oninput" @onkeypress="OnBuscarKeyPress" />
                <button class="btn btn-outline-light" type="button" @onclick="BuscarProductos">
                    <i class="fas fa-search me-2"></i>Buscar
                </button>
            </div>
            
            <!-- Carrito -->
            <button class="btn btn-outline-light position-relative" @onclick="MostrarCarrito" disabled="@cargando">
                <i class="fas fa-shopping-cart me-2"></i>🛒Carrito
                @if (itemsCarrito > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @itemsCarrito
                    </span>
                }
            </button>
        </div>
    </div>
</nav>

<!-- Contenido principal -->
<div class="container mt-5 pt-4">
    
    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
            <p class="mt-3">Cargando...</p>
        </div>
    }
    else if (vistaActual == Vista.Catalogo)
    {
        <!-- CATÁLOGO DE PRODUCTOS -->
        <div class="row mb-4">
            <div class="col">
                <h2 class="text-center mb-4">Catálogo de Productos</h2>
                @if (!string.IsNullOrWhiteSpace(terminoBusqueda))
                {
                    <div class="alert alert-info">
                        <i class="fas fa-search me-2"></i>
                        Resultados para: <strong>@terminoBusqueda</strong>
                        <button class="btn btn-sm btn-outline-primary ms-2" @onclick="LimpiarBusqueda">
                            Limpiar búsqueda
                        </button>
                    </div>
                }
            </div>
        </div>
        
        <div class="row">
            @if (productos != null && productos.Any())
            {
                @foreach (var producto in productos)
                {
                    <div class="col-md-4 col-lg-3 mb-4">
                        <div class="card h-100 shadow-sm producto-card">
                            <img src="@producto.ImagenUrl" class="card-img-top" alt="@producto.Nombre" 
                                 style="height: 200px; object-fit: cover;" />
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">@producto.Nombre</h5>
                                <p class="card-text text-muted small flex-grow-1">@producto.Descripcion</p>
                                <div class="mt-auto">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <span class="h5 text-success mb-0">$@producto.Precio.ToString("N2")</span>
                                        <small class="text-muted">Stock: @producto.Stock</small>
                                    </div>
                                    <button class="btn btn-primary w-100" 
                                            @onclick="() => AgregarAlCarrito(producto.Id)"
                                            disabled="@(producto.Stock <= 0)">
                                        @if (producto.Stock <= 0)
                                        {
                                            <i class="fas fa-times me-2"></i>
                                            <span>Sin Stock</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-cart-plus me-2"></i>
                                            <span>Agregar al Carrito</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h4>No se encontraron productos</h4>
                    <p class="text-muted">Intenta con otros términos de búsqueda</p>
                </div>
            }
        </div>
    }
    else if (vistaActual == Vista.Carrito)
    {
        <!-- CARRITO DE COMPRA -->
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="text-white"><i class="fas fa-shopping-cart me-2"></i>Carrito de Compra</h2>
                    <button class="btn btn-outline-primary text-dark" @onclick="VolverAlCatalogo">
                        <i class="fas fa-arrow-left me-2 text-dark"></i>Volver al Catálogo
                    </button>
                </div>
                
                @if (carrito != null && carrito.Any())
                {
                    <div class="row">
                        <div class="col-lg-8">
                            @foreach (var item in carrito)
                            {
                                <div class="card mb-3">
                                    <div class="row g-0">
                                        <div class="col-md-3">
                                            <img src="@item.ImagenUrl" class="img-fluid rounded-start h-100" 
                                                 alt="@item.Nombre" style="object-fit: cover;" />
                                        </div>
                                        <div class="col-md-9">
                                            <div class="card-body mt-3">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <h5 class="card-title">@item.Nombre</h5>
                                                        <p class="text-muted">Precio unitario: $@item.Precio.ToString("N2")</p>
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">Cantidad</label>
                                                        <div class="input-group">
                                                            <button class="btn btn-outline-secondary" type="button"
                                                                    @onclick="() => DisminuirCantidad(item.ProductoId)">
                                                                <i class="fas fa-minus"></i>-
                                                            </button>
                                                            <input type="text" class="form-control text-center" 
                                                                   value="@item.Cantidad" readonly />
                                                            <button class="btn btn-outline-secondary" type="button"
                                                                    @onclick="() => AumentarCantidad(item.ProductoId)">
                                                                <i class="fas fa-plus"></i>+
                                                            </button>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-3 text-end">
                                                        <p class="h5 text-success">$@item.Subtotal.ToString("N2")</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <div class="col-lg-4">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Resumen del Pedido</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Total de ítems:</span>
                                        <strong>@itemsCarrito</strong>
                                    </div>
                                    <div class="d-flex justify-content-between mb-3">
                                        <span>Total:</span>
                                        <strong class="h5 text-success">$@totalCarrito.ToString("N2")</strong>
                                    </div>
                                    <hr />
                                    <div class="d-grid gap-2">
                                        <button class="btn btn-success btn-lg" @onclick="IrAConfirmacion">
                                            <i class="fas fa-check me-2"></i>Confirmar Compra
                                        </button>
                                        <button class="btn btn-outline-danger" @onclick="VaciarCarrito">
                                            <i class="fas fa-trash me-2"></i>Vaciar Carrito
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                        <h4>Tu carrito está vacío</h4>
                        <p class="text-muted">Agrega productos para comenzar tu compra</p>
                        <button class="btn btn-primary" @onclick="VolverAlCatalogo">
                            <i class="fas fa-shopping-bag me-2"></i>Ir de Compras
                        </button>
                    </div>
                }
            </div>
        </div>
    }
    else if (vistaActual == Vista.Confirmacion)
    {
        <!-- CONFIRMACIÓN DE COMPRA -->
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header text-center">
                        <h3><i class="fas fa-check-circle text-success me-2"></i>Confirmar Compra</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h5>Resumen del Pedido</h5>
                                <div class="bg-light p-3 rounded mb-3">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Total de ítems:</span>
                                        <strong>@itemsCarrito</strong>
                                    </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Total a pagar:</span>
                                        <strong class="h5 text-success">$@totalCarrito.ToString("N2")</strong>
                                    </div>
                                </div>
                                
                                @if (carrito != null)
                                {
                                    <div class="mb-3">
                                        <h6>Productos:</h6>
                                        @foreach (var item in carrito)
                                        {
                                            <div class="d-flex justify-content-between small">
                                                <span>@item.Nombre x@item.Cantidad</span>
                                                <span>$@item.Subtotal.ToString("N2")</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                            
                            <div class="col-md-6">
                                <h5>Datos del Cliente</h5>
                                <EditForm Model="datosCliente" OnValidSubmit="ConfirmarCompra">
                                    <DataAnnotationsValidator />
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Nombre *</label>
                                        <InputText class="form-control" @bind-Value="datosCliente.NombreCliente" />
                                        <ValidationMessage For="@(() => datosCliente.NombreCliente)" class="text-danger" />
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Apellido *</label>
                                        <InputText class="form-control" @bind-Value="datosCliente.ApellidoCliente" />
                                        <ValidationMessage For="@(() => datosCliente.ApellidoCliente)" class="text-danger" />
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label class="form-label">Email *</label>
                                        <InputText type="email" class="form-control" @bind-Value="datosCliente.EmailCliente" />
                                        <ValidationMessage For="@(() => datosCliente.EmailCliente)" class="text-danger" />
                                    </div>
                                    
                                    <div class="d-grid gap-2">
                                        <button type="submit" class="btn btn-success btn-lg" disabled="@procesandoCompra">
                                            @if (procesandoCompra)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                <span>Procesando...</span>
                                            }
                                            else
                                            {
                                                <i class="fas fa-credit-card me-2"></i>
                                                <span>Confirmar Compra</span>
                                            }
                                        </button>
                                        <button type="button" class="btn btn-outline-secondary" @onclick="VolverAlCarrito">
                                            <i class="fas fa-arrow-left me-2"></i>Volver al Carrito
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (vistaActual == Vista.CompraConfirmada)
    {
        <!-- COMPRA CONFIRMADA -->
        <div class="row justify-content-center">
            <div class="col-lg-6 text-center">
                <div class="card border-success">
                    <div class="card-body py-5">
                        <i class="fas fa-check-circle text-success" style="font-size: 4rem;"></i>
                        <h2 class="text-success mt-3">¡Compra Confirmada!</h2>
                        <p class="text-muted mb-4">Tu pedido ha sido procesado exitosamente</p>
                        
                        @if (ultimaCompraId > 0)
                        {
                            <div class="alert alert-success">
                                <strong>Número de pedido:</strong> #@ultimaCompraId
                            </div>
                        }
                        
                        <div class="d-grid gap-2 col-6 mx-auto">
                            <button class="btn btn-primary btn-lg" @onclick="VolverAlCatalogo">
                                <i class="fas fa-shopping-bag me-2"></i>Seguir Comprando
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Alertas -->
@if (!string.IsNullOrWhiteSpace(mensajeAlerta))
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert">
            <div class="toast-header">
                <i class="fas fa-info-circle text-primary me-2"></i>
                <strong class="me-auto">Tienda Online</strong>
                <button type="button" class="btn-close" @onclick="CerrarAlerta"></button>
            </div>
            <div class="toast-body">
                @mensajeAlerta
            </div>
        </div>
    </div>
}


@code {
    // Modelos 
    public class Producto
    {
        public int Id { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public string Descripcion { get; set; } = string.Empty;
        public decimal Precio { get; set; }
        public int Stock { get; set; }
        public string ImagenUrl { get; set; } = string.Empty;
    }

    public class CarritoItem
    {
        public int ProductoId { get; set; }
        public string Nombre { get; set; } = string.Empty;
        public decimal Precio { get; set; }
        public int Cantidad { get; set; }
        public string ImagenUrl { get; set; } = string.Empty;
        public decimal Subtotal => Precio * Cantidad;
    }

    public class ConfirmarCompraRequest
    {
        [Required(ErrorMessage = "El nombre es obligatorio")]
        public string NombreCliente { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "El apellido es obligatorio")]
        public string ApellidoCliente { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "El email es obligatorio")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string EmailCliente { get; set; } = string.Empty;
    }

    public enum Vista
    {
        Catalogo,
        Carrito,
        Confirmacion,
        CompraConfirmada
    }

    // Variables de estado
    private Vista vistaActual = Vista.Catalogo;
    private List<Producto> productos = new();
    private List<CarritoItem> carrito = new();
    private ConfirmarCompraRequest datosCliente = new();
    private string terminoBusqueda = string.Empty;
    private string carritoId = string.Empty;
    private string mensajeAlerta = string.Empty;
    private bool cargando = true;
    private bool procesandoCompra = false;
    private int ultimaCompraId = 0;

    // Propiedades calculadas
    private int itemsCarrito => carrito?.Sum(c => c.Cantidad) ?? 0;
    private decimal totalCarrito => carrito?.Sum(c => c.Subtotal) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        await InicializarCarrito();
        await CargarProductos();
        cargando = false;
    }

    private async Task InicializarCarrito()
    {
        try
        {
            var response = await Http.PostAsync("/carritos", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                carritoId = result?.GetProperty("carritoId").GetString() ?? string.Empty;
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al inicializar carrito: {ex.Message}");
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            // Usar el endpoint correcto según si hay término de búsqueda o no
            if (string.IsNullOrWhiteSpace(terminoBusqueda))
            {
                // Cargar todos los productos
                productos = await Http.GetFromJsonAsync<List<Producto>>("/productos") ?? new();
            }
            else
            {
                // Buscar productos con el término específico
                var url = $"/productos/buscar?termino={Uri.EscapeDataString(terminoBusqueda)}";
                productos = await Http.GetFromJsonAsync<List<Producto>>(url) ?? new();
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al cargar productos: {ex.Message}");
            productos = new(); // Asegurar que la lista esté inicializada
        }
    }

    private async Task CargarCarrito()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(carritoId)) return;
            
            carrito = await Http.GetFromJsonAsync<List<CarritoItem>>($"/carritos/{carritoId}") ?? new();
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al cargar carrito: {ex.Message}");
        }
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        try
        {
            var response = await Http.PutAsync($"/carritos/{carritoId}/{productoId}", null);
            if (response.IsSuccessStatusCode)
            {
                await CargarCarrito();
                await CargarProductos(); // Actualizar stock
                MostrarAlerta("Producto agregado al carrito");
                vistaActual = Vista.Carrito;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta($"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al agregar producto: {ex.Message}");
        }
    }

    private async Task AumentarCantidad(int productoId)
    {
        try
        {
            var response = await Http.PutAsync($"/carritos/{carritoId}/{productoId}", null);
            if (response.IsSuccessStatusCode)
            {
                await CargarCarrito();
                await CargarProductos();
                MostrarAlerta("Cantidad actualizada");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta($"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al actualizar cantidad: {ex.Message}");
        }
    }

    private async Task DisminuirCantidad(int productoId)
    {
        try
        {
            var response = await Http.DeleteAsync($"/carritos/{carritoId}/{productoId}");
            if (response.IsSuccessStatusCode)
            {
                await CargarCarrito();
                await CargarProductos();
                MostrarAlerta("Cantidad actualizada");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta($"Error: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al actualizar cantidad: {ex.Message}");
        }
    }

    private async Task VaciarCarrito()
    {
        try
        {
            var response = await Http.DeleteAsync($"/carritos/{carritoId}");
            if (response.IsSuccessStatusCode)
            {
                await CargarCarrito();
                await CargarProductos();
                MostrarAlerta("Carrito vaciado");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al vaciar carrito: {ex.Message}");
        }
    }

    private async Task ConfirmarCompra()
    {
        try
        {
            procesandoCompra = true;
            var response = await Http.PutAsJsonAsync($"/carritos/{carritoId}/confirmar", datosCliente);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                ultimaCompraId = result?.GetProperty("compraId").GetInt32() ?? 0;
                
                carrito.Clear();
                datosCliente = new ConfirmarCompraRequest();
                vistaActual = Vista.CompraConfirmada;
                
                // Reinicializar carrito para próxima compra
                await InicializarCarrito();
                await CargarProductos(); // Recargar productos para actualizar stock
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                MostrarAlerta($"Error al confirmar compra: {error}");
            }
        }
        catch (Exception ex)
        {
            MostrarAlerta($"Error al procesar compra: {ex.Message}");
        }
        finally
        {
            procesandoCompra = false;
        }
    }

    private async Task BuscarProductos()
    {
        if (cargando) return; // Evitar múltiples búsquedas simultáneas
        
        cargando = true;
        StateHasChanged(); // Actualizar UI inmediatamente
        
        try
        {
            await CargarProductos();
            vistaActual = Vista.Catalogo;
        }
        finally
        {
            cargando = false;
            StateHasChanged(); // Actualizar UI cuando termine
        }
    }

    private async Task OnBuscarKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarProductos();
        }
    }

    private async Task LimpiarBusqueda()
    {
        terminoBusqueda = string.Empty;
        await BuscarProductos();
    }

    private async Task MostrarCarrito()
    {
        await CargarCarrito();
        vistaActual = Vista.Carrito;
    }

    private void VolverAlCatalogo()
    {
        vistaActual = Vista.Catalogo;
    }

    private void VolverAlCarrito()
    {
        vistaActual = Vista.Carrito;
    }

    private void IrAConfirmacion()
    {
        vistaActual = Vista.Confirmacion;
    }

    private void MostrarAlerta(string mensaje)
    {
        mensajeAlerta = mensaje;
        _ = Task.Delay(3000).ContinueWith(_ => 
        {
            mensajeAlerta = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }

    private void CerrarAlerta()
    {
        mensajeAlerta = string.Empty;
    }
}



