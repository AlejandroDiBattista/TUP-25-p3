@using cliente.Services
@using Microsoft.AspNetCore.Components

@inherits LayoutComponentBase
@implements IDisposable
@inject CarritoStateService CarritoStateService
@inject NavigationManager NavigationManager

<header class="bg-dark border-bottom fixed-top">
  <div class="container d-flex align-items-center py-2">
    <a class="navbar-brand me-4" href="/" @onclick:preventDefault="true" @onclick="GoHome" style="cursor:pointer;">
      <!-- Logo enlarged to 80px height -->
      <img src="/miLogo.png" alt="Mi Logo" style="height:80px;" />
    </a>
    <input type="text" class="form-control me-2" placeholder="Buscar productos..." @bind="searchTerm" @bind:event="oninput" @onkeypress="OnKeyPress" />
    <button class="btn btn-primary" @onclick="SearchManual">Buscar</button>
    <a class="nav-link text-white ms-3" href="/carrito">
      <i class="bi bi-cart-fill fs-4"></i>
      <span class="badge bg-danger">@CarritoStateService.CantidadItems</span>
    </a>
  </div>
</header>

<div class="page" style="padding-top: 80px;">
    @Body
</div>

@code {
    private string? searchTerm;
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        CarritoStateService.OnChange += StateHasChanged;
        await CarritoStateService.InicializarAsync();
        
        // Sincronizar el término de búsqueda con la URL actual
        var uri = new Uri(NavigationManager.Uri);
        var query = uri.Query;
        if (!string.IsNullOrEmpty(query))
        {
            var qs = query.TrimStart('?');
            var param = qs.Split('&').FirstOrDefault(p => p.StartsWith("search=", StringComparison.OrdinalIgnoreCase));
            searchTerm = param != null ? Uri.UnescapeDataString(param.Split('=', 2)[1]) : null;
        }
    }

    public void Dispose()
    {
        CarritoStateService.OnChange -= StateHasChanged;
        searchTimer?.Dispose();
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformSearchImmediate();
        }
        else
        {
            // Usar debounce para búsqueda automática
            searchTimer?.Dispose();
            searchTimer = new Timer((_) => InvokeAsync(PerformSearchImmediate), null, 500, Timeout.Infinite);
        }
    }

    private void PerformSearchImmediate()
    {
        var url = string.IsNullOrWhiteSpace(searchTerm) ? "/" : $"/?search={Uri.EscapeDataString(searchTerm)}";
        NavigationManager.NavigateTo(url);
    }

    private void GoHome()
    {
        searchTerm = null;
        NavigationManager.NavigateTo("/");
    }

    private void SearchManual()
    {
        PerformSearchImmediate();
    }
}
