@page "/"
@using Compartido
@using cliente.Services
@using System.Linq
@using System.Collections.Generic
@inject ApiService ApiService
@inject CarritoStateService CarritoStateService
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@implements IDisposable

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(searchTerm))
    {
        <div class="alert alert-info">
            <i class="fas fa-search"></i> Mostrando resultados para: <strong>@searchTerm</strong>
            <button type="button" class="btn-close float-end" @onclick="LimpiarBusqueda"></button>
        </div>
    }
    
    @if (productos == null && !cargando && string.IsNullOrEmpty(error))
    {
        <p><em>Cargando productos...</em></p>
    }
    else if (cargando)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status"><span class="visually-hidden">Cargando...</span></div>
        </div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }
    else if (productos?.Any() == true)
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var producto in productos)
            {
                <div class="col">
                    <div class="card h-100">
                        <img src="@GetImageUrl(producto.ImagenUrl)" class="card-img-top" alt="@producto.Nombre" style="max-height:200px;object-fit:contain;padding-top:10px;" />
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@producto.Nombre</h5>
                            <p class="card-text flex-grow-1">@producto.Descripcion</p>
                            <p class="card-text"><strong>Precio:</strong> @producto.Precio.ToString("C")</p>
                            <p class="card-text"><strong>Stock:</strong> @(producto.Stock>0?producto.Stock.ToString():"Agotado")</p>
                            <button class="btn btn-success mt-auto" @onclick="() => AgregarAlCarrito(producto.Id)" disabled="@(producto.Stock<=0)">
                                <i class="fas fa-cart-plus"></i> @(producto.Stock<=0?"Agotado":"Agregar al carrito")
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center">
            <i class="fas fa-search fa-3x text-muted mb-3"></i>
            <p class="lead">No se encontraron productos@(string.IsNullOrEmpty(searchTerm) ? "" : $" para \"{searchTerm}\"")</p>
            @if (!string.IsNullOrEmpty(searchTerm))
            {
                <button class="btn btn-primary" @onclick="LimpiarBusqueda">Ver todos los productos</button>
            }
        </div>
    }
</div>

@code {
    private string? searchTerm;
    private Producto[]? productos;
    private string? error;
    private bool cargando;
    private Dictionary<int,int> cantidadesEnCarrito = new Dictionary<int,int>();    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        await HandleLocationAsync(NavigationManager.Uri);
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        await InvokeAsync(async () => 
        {
            await HandleLocationAsync(args.Location);
            StateHasChanged();
        });
    }    private async Task HandleLocationAsync(string uri)
    {
        // Parsear query string correctamente
        var uriObj = new Uri(uri);
        var query = uriObj.Query; // Ej. "?search=mouse"
        if (!string.IsNullOrEmpty(query))
        {
            var qs = query.TrimStart('?'); // "search=mouse"
            var param = qs.Split('&').FirstOrDefault(p => p.StartsWith("search=", StringComparison.OrdinalIgnoreCase));
            searchTerm = param != null ? Uri.UnescapeDataString(param.Split('=', 2)[1]) : null;
        }
        else
        {
            searchTerm = null;
        }
        await CargarProductosAsync(searchTerm);
    }

    private async Task CargarProductosAsync(string? busqueda)
    {
        cargando = true;
        error = null;
        StateHasChanged(); // Forzar actualización para mostrar el spinner
        
        try
        {
            productos = await ApiService.GetProductosAsync(busqueda);
            // Cargar estado actual del carrito
            var carritoId = await CarritoStateService.GetCarritoIdAsync();
            var itemsCarrito = await ApiService.GetCarritoAsync(carritoId);
            cantidadesEnCarrito = itemsCarrito?.ToDictionary(i => i.ProductoId, i => i.Cantidad)
                                   ?? new Dictionary<int,int>();
        }
        catch (Exception ex)
        {
            error = $"Error al cargar productos: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally 
        { 
            cargando = false; 
            StateHasChanged(); // Forzar actualización cuando termine
        }
    }

    private async Task BuscarProductos(ChangeEventArgs _) => await CargarProductosAsync(searchTerm);

    private void BuscarProductosManual()
    {
        var query = string.IsNullOrEmpty(searchTerm) ? string.Empty : $"?search={Uri.EscapeDataString(searchTerm)}";
        NavigationManager.NavigateTo($"/{query}");
    }

    private void LimpiarBusqueda()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task AgregarAlCarrito(int productoId)
    {
        error = null;
        try
        {
            var seleccionado = productos?.FirstOrDefault(p=>p.Id==productoId);
            if (seleccionado==null||seleccionado.Stock<=0)
            {
                error="Producto no disponible.";
                return;
            }
            var carritoId = await CarritoStateService.GetCarritoIdAsync();
            // Calcular nueva cantidad acumulada
            cantidadesEnCarrito.TryGetValue(productoId, out int cantidadActual);
            var nuevaCantidad = cantidadActual + 1;
            var res = await ApiService.AgregarOActualizarItemCarritoAsync(carritoId, productoId, nuevaCantidad);

            if (res!=null)
            {
                // Actualizar stock y conteo localmente
                cantidadesEnCarrito[productoId] = nuevaCantidad;
                if (seleccionado != null)
                {
                    seleccionado.Stock = Math.Max(0, seleccionado.Stock - 1);
                }
                await CarritoStateService.ActualizarCantidadItems();
                StateHasChanged();

            }
            else error="Error al agregar el producto.";
        }        catch(Exception ex){ error=$"Error: {ex.Message}"; Console.WriteLine(ex); }
    }

    private string GetImageUrl(string? url)
    {
        if (string.IsNullOrWhiteSpace(url))
        {
            return "https://via.placeholder.com/300x200.png?text=Sin+Imagen";
        }
        // Si es URL absoluta, devolver tal cual
        if (Uri.TryCreate(url, UriKind.Absolute, out _))
        {
            return url;
        }
        // Construir URL absoluta usando BaseAddress
        var baseAddress = HttpClient.BaseAddress?.ToString().TrimEnd('/') ?? string.Empty;
        var path = url.StartsWith("/") ? url : "/" + url;
        return baseAddress + path;
    }

    public void Dispose() 
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
