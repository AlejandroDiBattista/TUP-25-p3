@page "/carrito"
@using cliente.Services
@using cliente.Models
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Mi Carrito - TechStore</PageTitle>

<!-- Content Header -->
<div class="content-header">
    <div class="row align-items-center">
        <div class="col-lg-6">
            <h1 class="page-title">Mi Carrito de Compras</h1>
            <p class="page-subtitle">Revisa y confirma tus productos seleccionados</p>
        </div>
        <div class="col-lg-6 text-end">
            <button class="btn btn-outline-modern" @onclick="VolverAlCatalogo">
                ‚Üê Seguir Comprando
            </button>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="container-fluid px-4">
    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="loading-spinner mx-auto mb-3"></div>
            <h4>Cargando tu carrito...</h4>
            <p class="text-muted">Un momento por favor</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger shadow-modern fade-in" role="alert">
            <h4 class="alert-heading">‚ùå Oops! Algo sali√≥ mal</h4>
            <p>@error</p>
            <div class="d-flex gap-2">
                <button class="btn btn-outline-modern" @onclick="CargarCarrito">
                    üîÑ Reintentar
                </button>
                <button class="btn btn-primary-modern" @onclick="VolverAlCatalogo">
                    ‚Üê Volver al Cat√°logo
                </button>
            </div>
        </div>
    }
    else if (carrito == null || !carrito.Items.Any())
    {
        <div class="text-center py-5 fade-in">
            <div class="mb-4">
                <div style="font-size: 6rem; opacity: 0.3;">üõí</div>
            </div>
            <h2 class="text-gradient">Tu carrito est√° vac√≠o</h2>
            <p class="text-muted mb-4">Agrega algunos productos incre√≠bles para comenzar tu experiencia de compra</p>
            <button class="btn btn-primary-modern btn-lg" @onclick="VolverAlCatalogo">
                üõçÔ∏è Explorar Productos
            </button>
        </div>
    }    else
    {
        <div class="row g-4">
            <!-- Lista de productos -->
            <div class="col-lg-8">
                <div class="product-card">
                    <div class="product-card-body">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="product-title mb-0">üì¶ Productos Seleccionados</h5>
                            <span class="badge-modern stock-available">
                                @carrito.TotalItems elementos
                            </span>
                        </div>
                        
                        @foreach (var item in carrito.Items)
                        {
                            <div class="cart-item-modern fade-in">
                                <div class="row align-items-center">
                                    <div class="col-md-2">
                                        <div class="cart-image-container">
                                            <img src="@item.ImagenUrl" alt="@item.NombreProducto" 
                                                 class="cart-product-image">
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <h6 class="cart-product-title">@item.NombreProducto</h6>
                                        <small class="text-muted">Precio unitario: $@item.PrecioUnitario.ToString("N0")</small>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="quantity-selector">
                                            <button class="quantity-btn" 
                                                    @onclick="() => DecrementarCantidad(item.ProductoId)"
                                                    disabled="@(actualizandoItem == item.ProductoId)">-</button>
                                            <input type="number" class="quantity-input" 
                                                   value="@item.Cantidad" 
                                                   @onchange="@(async (e) => await ActualizarCantidad(item.ProductoId, int.Parse(e.Value?.ToString() ?? "1")))"
                                                   min="1" max="99"
                                                   disabled="@(actualizandoItem == item.ProductoId)">
                                            <button class="quantity-btn" 
                                                    @onclick="() => IncrementarCantidad(item.ProductoId)"
                                                    disabled="@(actualizandoItem == item.ProductoId)">+</button>
                                        </div>
                                        @if (actualizandoItem == item.ProductoId)
                                        {
                                            <small class="text-muted d-flex align-items-center gap-1">
                                                <div class="loading-spinner" style="width: 12px; height: 12px; border-width: 1px;"></div>
                                                Actualizando...
                                            </small>
                                        }
                                    </div>
                                    <div class="col-md-2 text-end">
                                        <div class="cart-price">$@item.Subtotal.ToString("N0")</div>
                                    </div>
                                    <div class="col-md-1 text-end">
                                        <button class="btn-delete-modern" 
                                                @onclick="() => EliminarProducto(item.ProductoId)"
                                                disabled="@(eliminandoItem == item.ProductoId)"
                                                title="Eliminar producto">
                                            @if (eliminandoItem == item.ProductoId)
                                            {
                                                <div class="loading-spinner" style="width: 16px; height: 16px; border-width: 2px;"></div>
                                            }
                                            else
                                            {
                                                <span>üóëÔ∏è</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Acciones del carrito -->
                <div class="mt-3">
                    <button class="btn btn-outline-modern" @onclick="VaciarCarrito" disabled="@vaciandoCarrito">
                        @if (vaciandoCarrito)
                        {
                            <div class="loading-spinner me-2" style="width: 16px; height: 16px; border-width: 2px;"></div>
                        }
                        üóëÔ∏è Vaciar Carrito
                    </button>
                </div>
            </div>

            <!-- Resumen y checkout -->
            <div class="col-lg-4">
                <div class="cart-summary">
                    <div class="cart-summary-header">
                        <h5 class="mb-0">üí∞ Resumen de Compra</h5>
                    </div>
                    
                    <div class="d-flex justify-content-between mb-2">
                        <span>Productos:</span>
                        <span class="badge-modern stock-available">@carrito.TotalItems</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Subtotal:</span>
                        <span>$@carrito.Total.ToString("N0")</span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-4">
                        <strong>Total:</strong>
                        <strong class="cart-total">$@carrito.Total.ToString("N0")</strong>
                    </div>

                    <!-- Formulario de datos del cliente -->
                    <div class="form-modern">
                        <h6 class="mb-3">üìã Datos del Cliente</h6>
                        <input type="text" class="form-control mb-3" 
                               placeholder="Nombre" @bind="datosCliente.NombreCliente">
                        <input type="text" class="form-control mb-3" 
                               placeholder="Apellido" @bind="datosCliente.ApellidoCliente">
                        <input type="email" class="form-control mb-3" 
                               placeholder="Email" @bind="datosCliente.EmailCliente">
                    </div>

                    <button class="btn btn-success-modern w-100 btn-lg" 
                            @onclick="ConfirmarCompra" 
                            disabled="@(confirmandoCompra || !DatosClienteValidos())">
                        @if (confirmandoCompra)
                        {
                            <div class="loading-spinner me-2" style="width: 20px; height: 20px; border-width: 2px;"></div>
                            <text>Procesando...</text>
                        }
                        else
                        {
                            <text>‚úÖ Confirmar Compra</text>
                        }
                    </button>

                    @if (!DatosClienteValidos())
                    {
                        <small class="text-muted d-block mt-2 text-center">
                            Por favor completa todos los campos
                        </small>
                    }
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal de confirmaci√≥n de compra -->
@if (compraConfirmada != null)
{
    <div class="modal-modern d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">‚úÖ ¬°Compra Confirmada!</h5>
                </div>
                <div class="modal-body">
                    <div class="success-icon">üéâ</div>
                    <h4 class="text-gradient">¬°Gracias por tu compra!</h4>
                    <div class="purchase-details">
                        <p><strong>N√∫mero de compra:</strong> #@compraConfirmada.CompraId</p>
                        <p><strong>Total:</strong> <span class="cart-total">$@compraConfirmada.Total.ToString("N0")</span></p>
                        <p><strong>Fecha:</strong> @compraConfirmada.Fecha.ToString("dd/MM/yyyy HH:mm")</p>
                        <p class="text-muted">@compraConfirmada.Mensaje</p>
                    </div>
                </div>
                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-primary-modern" @onclick="VolverAlCatalogo">
                        üõçÔ∏è Seguir Comprando
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .cart-item-modern {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        transition: var(--transition);
        border: 1px solid #e2e8f0;
    }
    
    .cart-item-modern:hover {
        box-shadow: var(--card-shadow);
        transform: translateY(-1px);
    }
    
    .cart-image-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .cart-product-image {
        width: 100%;
        height: 80px;
        object-fit: cover;
        transition: var(--transition);
    }
    
    .cart-product-image:hover {
        transform: scale(1.05);
    }
    
    .cart-product-title {
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 0.25rem;
    }
    
    .cart-price {
        font-size: 1.25rem;
        font-weight: 800;
        background: var(--success-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .btn-delete-modern {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        border: none;
        background: #fee2e2;
        color: #dc2626;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: var(--transition);
        cursor: pointer;
    }
    
    .btn-delete-modern:hover:not(:disabled) {
        background: #fecaca;
        transform: scale(1.1);
    }
    
    .btn-delete-modern:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .purchase-details {
        background: #f8fafc;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        border: 1px solid #e2e8f0;
    }
    
    .purchase-details p {
        margin-bottom: 0.75rem;
    }
    
    .purchase-details p:last-child {
        margin-bottom: 0;
    }
</style>

@code {
    private CarritoDto? carrito;
    private string? carritoId;
    private string? error;
    private bool cargando = false;
    
    // Estados de operaciones
    private int? actualizandoItem;
    private int? eliminandoItem;
    private bool vaciandoCarrito = false;
    private bool confirmandoCompra = false;
    
    // Datos del cliente
    private ConfirmarCompraDto datosCliente = new();
    private CompraConfirmadaDto? compraConfirmada;

    protected override async Task OnInitializedAsync()
    {
        await InicializarCarrito();
        await CargarCarrito();
    }    private async Task InicializarCarrito()
    {
        try
        {
            carritoId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "carritoId");
            
            if (string.IsNullOrEmpty(carritoId))
            {
                error = "No se encontr√≥ un carrito activo. Redirigiendo al cat√°logo...";
                await Task.Delay(2000);
                VolverAlCatalogo();
                return;
            }

            // Verificar que el carrito existe en el servidor
            var carritoExiste = await ApiService.CarritoExisteAsync(carritoId);
            if (!carritoExiste)
            {
                Console.WriteLine($"‚ö†Ô∏è Carrito {carritoId} no existe en el servidor");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                error = "El carrito ha expirado. Redirigiendo al cat√°logo para crear uno nuevo...";
                await Task.Delay(3000);
                VolverAlCatalogo();
            }
        }
        catch (Exception ex)
        {
            error = $"Error al inicializar carrito: {ex.Message}";
        }
    }

    private async Task CargarCarrito()
    {
        if (string.IsNullOrEmpty(carritoId)) return;

        try
        {
            cargando = true;
            error = null;
            
            carrito = await ApiService.ObtenerCarritoAsync(carritoId);
            
            if (carrito == null)
            {
                error = "No se pudo cargar el carrito. Puede que haya expirado.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar carrito: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task IncrementarCantidad(int productoId)
    {
        if (carrito == null) return;
        
        var item = carrito.Items.FirstOrDefault(i => i.ProductoId == productoId);
        if (item != null)
        {
            await ActualizarCantidad(productoId, item.Cantidad + 1);
        }
    }

    private async Task DecrementarCantidad(int productoId)
    {
        if (carrito == null) return;
        
        var item = carrito.Items.FirstOrDefault(i => i.ProductoId == productoId);
        if (item != null && item.Cantidad > 1)
        {
            await ActualizarCantidad(productoId, item.Cantidad - 1);
        }
    }

    private async Task ActualizarCantidad(int productoId, int nuevaCantidad)
    {
        if (string.IsNullOrEmpty(carritoId) || nuevaCantidad < 1) return;

        try
        {
            actualizandoItem = productoId;
            
            var exito = await ApiService.AgregarProductoAlCarritoAsync(carritoId, productoId, nuevaCantidad);
            
            if (exito)
            {
                await CargarCarrito(); // Recargar para obtener datos actualizados
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al actualizar la cantidad");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            actualizandoItem = null;
        }
    }

    private async Task EliminarProducto(int productoId)
    {
        if (string.IsNullOrEmpty(carritoId)) return;

        var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
            "¬øEst√°s seguro de que quieres eliminar este producto del carrito?");
        
        if (!confirmar) return;

        try
        {
            eliminandoItem = productoId;
            
            var exito = await ApiService.EliminarProductoDelCarritoAsync(carritoId, productoId);
            
            if (exito)
            {
                await CargarCarrito(); // Recargar carrito
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al eliminar el producto");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            eliminandoItem = null;
        }
    }

    private async Task VaciarCarrito()
    {
        if (string.IsNullOrEmpty(carritoId)) return;

        var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
            "¬øEst√°s seguro de que quieres vaciar todo el carrito?");
        
        if (!confirmar) return;

        try
        {
            vaciandoCarrito = true;
            
            var exito = await ApiService.VaciarCarritoAsync(carritoId);
            
            if (exito)
            {
                await CargarCarrito(); // Recargar carrito
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al vaciar el carrito");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            vaciandoCarrito = false;
        }
    }

    private bool DatosClienteValidos()
    {
        return !string.IsNullOrWhiteSpace(datosCliente.NombreCliente) &&
               !string.IsNullOrWhiteSpace(datosCliente.ApellidoCliente) &&
               !string.IsNullOrWhiteSpace(datosCliente.EmailCliente) &&
               datosCliente.EmailCliente.Contains("@");
    }

    private async Task ConfirmarCompra()
    {
        if (string.IsNullOrEmpty(carritoId) || !DatosClienteValidos()) return;

        try
        {
            confirmandoCompra = true;
            
            compraConfirmada = await ApiService.ConfirmarCompraAsync(carritoId, datosCliente);
            
            if (compraConfirmada != null)
            {
                // Limpiar carrito del localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                
                // Crear nuevo carrito para futuras compras
                var nuevoCarritoId = await ApiService.CrearCarritoAsync();
                if (!string.IsNullOrEmpty(nuevoCarritoId))
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "carritoId", nuevoCarritoId);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al confirmar la compra");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            confirmandoCompra = false;
        }
    }

    private void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/");
    }
}
