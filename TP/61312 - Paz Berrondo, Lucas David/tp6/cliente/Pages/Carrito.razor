@page "/carrito"
@using cliente.Services
@using cliente.Models
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Mi Carrito - Tienda Online</PageTitle>

<!-- Header -->
<div class="bg-success text-white py-3 mb-4">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h1 class="mb-0">üõí Mi Carrito</h1>
                <small>Revisa tus productos antes de comprar</small>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-light" @onclick="VolverAlCatalogo">
                    ‚Üê Seguir Comprando
                </button>
            </div>
        </div>
    </div>
</div>

<div class="container">
    @if (cargando)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Cargando carrito...</span>
            </div>
            <p class="mt-2">Cargando tu carrito...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">‚ùå Error</h4>
            <p>@error</p>
            <button class="btn btn-outline-danger me-2" @onclick="CargarCarrito">
                üîÑ Reintentar
            </button>
            <button class="btn btn-secondary" @onclick="VolverAlCatalogo">
                ‚Üê Volver al Cat√°logo
            </button>
        </div>
    }
    else if (carrito == null || !carrito.Items.Any())
    {
        <div class="text-center py-5">
            <div class="text-muted">
                <h2>üõí Tu carrito est√° vac√≠o</h2>
                <p>Agrega algunos productos incre√≠bles para comenzar</p>
                <button class="btn btn-primary btn-lg" @onclick="VolverAlCatalogo">
                    üõçÔ∏è Explorar Productos
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Lista de productos -->
            <div class="col-lg-8">
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <h5 class="mb-0">üì¶ Productos en tu carrito (@carrito.TotalItems elementos)</h5>
                    </div>
                    <div class="card-body p-0">
                        @foreach (var item in carrito.Items)
                        {
                            <div class="border-bottom p-3 item-carrito">
                                <div class="row align-items-center">
                                    <div class="col-md-2">
                                        <img src="@item.ImagenUrl" alt="@item.NombreProducto" 
                                             class="img-fluid rounded producto-imagen-carrito">
                                    </div>
                                    <div class="col-md-4">
                                        <h6 class="mb-1">@item.NombreProducto</h6>
                                        <small class="text-muted">Precio unitario: $@item.PrecioUnitario.ToString("N2")</small>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="input-group input-group-sm">
                                            <button class="btn btn-outline-secondary" 
                                                    @onclick="() => DecrementarCantidad(item.ProductoId)"
                                                    disabled="@(actualizandoItem == item.ProductoId)">-</button>                                            <input type="number" class="form-control text-center" 
                                                   value="@item.Cantidad" 
                                                   @onchange="@(async (e) => await ActualizarCantidad(item.ProductoId, int.Parse(e.Value?.ToString() ?? "1")))"
                                                   min="1" max="99"
                                                   disabled="@(actualizandoItem == item.ProductoId)">
                                            <button class="btn btn-outline-secondary" 
                                                    @onclick="() => IncrementarCantidad(item.ProductoId)"
                                                    disabled="@(actualizandoItem == item.ProductoId)">+</button>
                                        </div>
                                        @if (actualizandoItem == item.ProductoId)
                                        {
                                            <small class="text-muted">Actualizando...</small>
                                        }
                                    </div>
                                    <div class="col-md-2 text-end">
                                        <strong class="text-success">$@item.Subtotal.ToString("N2")</strong>
                                    </div>
                                    <div class="col-md-1 text-end">
                                        <button class="btn btn-outline-danger btn-sm" 
                                                @onclick="() => EliminarProducto(item.ProductoId)"
                                                disabled="@(eliminandoItem == item.ProductoId)"
                                                title="Eliminar producto">
                                            @if (eliminandoItem == item.ProductoId)
                                            {
                                                <span class="spinner-border spinner-border-sm"></span>
                                            }
                                            else
                                            {
                                                <span>üóëÔ∏è</span>
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Acciones del carrito -->
                <div class="mt-3">
                    <button class="btn btn-outline-warning" @onclick="VaciarCarrito" disabled="@vaciandoCarrito">
                        @if (vaciandoCarrito)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        üóëÔ∏è Vaciar Carrito
                    </button>
                </div>
            </div>

            <!-- Resumen y checkout -->
            <div class="col-lg-4">
                <div class="card shadow-sm sticky-top" style="top: 20px;">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">üí∞ Resumen de Compra</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Productos:</span>
                            <span>@carrito.TotalItems</span>
                        </div>
                        <div class="d-flex justify-content-between mb-3">
                            <span>Subtotal:</span>
                            <span>$@carrito.Total.ToString("N2")</span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total:</strong>
                            <strong class="text-success h5">$@carrito.Total.ToString("N2")</strong>
                        </div>

                        <!-- Formulario de datos del cliente -->
                        <div class="mb-3">
                            <h6>üìã Datos del Cliente</h6>
                            <div class="mb-2">
                                <input type="text" class="form-control form-control-sm" 
                                       placeholder="Nombre" @bind="datosCliente.NombreCliente">
                            </div>
                            <div class="mb-2">
                                <input type="text" class="form-control form-control-sm" 
                                       placeholder="Apellido" @bind="datosCliente.ApellidoCliente">
                            </div>
                            <div class="mb-2">
                                <input type="email" class="form-control form-control-sm" 
                                       placeholder="Email" @bind="datosCliente.EmailCliente">
                            </div>
                        </div>                        <button class="btn btn-success w-100 btn-lg" 
                                @onclick="ConfirmarCompra" 
                                disabled="@(confirmandoCompra || !DatosClienteValidos())">
                            @if (confirmandoCompra)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                <text>Procesando...</text>
                            }
                            else
                            {
                                <text>‚úÖ Confirmar Compra</text>
                            }
                        </button>

                        @if (!DatosClienteValidos())
                        {
                            <small class="text-muted d-block mt-2">
                                Por favor completa todos los campos
                            </small>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal de confirmaci√≥n de compra -->
@if (compraConfirmada != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">‚úÖ ¬°Compra Confirmada!</h5>
                </div>
                <div class="modal-body text-center">
                    <div class="mb-3">
                        <div class="display-1">üéâ</div>
                    </div>
                    <h4 class="text-success">¬°Gracias por tu compra!</h4>
                    <p><strong>N√∫mero de compra:</strong> #@compraConfirmada.CompraId</p>
                    <p><strong>Total:</strong> $@compraConfirmada.Total.ToString("N2")</p>
                    <p><strong>Fecha:</strong> @compraConfirmada.Fecha.ToString("dd/MM/yyyy HH:mm")</p>
                    <p class="text-muted">@compraConfirmada.Mensaje</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="VolverAlCatalogo">
                        üõçÔ∏è Seguir Comprando
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .producto-imagen-carrito {
        height: 80px;
        object-fit: cover;
    }
    
    .item-carrito:hover {
        background-color: #f8f9fa;
    }
    
    .input-group input[type="number"] {
        -moz-appearance: textfield;
    }
    
    .input-group input[type="number"]::-webkit-outer-spin-button,
    .input-group input[type="number"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
</style>

@code {
    private CarritoDto? carrito;
    private string? carritoId;
    private string? error;
    private bool cargando = false;
    
    // Estados de operaciones
    private int? actualizandoItem;
    private int? eliminandoItem;
    private bool vaciandoCarrito = false;
    private bool confirmandoCompra = false;
    
    // Datos del cliente
    private ConfirmarCompraDto datosCliente = new();
    private CompraConfirmadaDto? compraConfirmada;

    protected override async Task OnInitializedAsync()
    {
        await InicializarCarrito();
        await CargarCarrito();
    }    private async Task InicializarCarrito()
    {
        try
        {
            carritoId = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "carritoId");
            
            if (string.IsNullOrEmpty(carritoId))
            {
                error = "No se encontr√≥ un carrito activo. Redirigiendo al cat√°logo...";
                await Task.Delay(2000);
                VolverAlCatalogo();
                return;
            }

            // Verificar que el carrito existe en el servidor
            var carritoExiste = await ApiService.CarritoExisteAsync(carritoId);
            if (!carritoExiste)
            {
                Console.WriteLine($"‚ö†Ô∏è Carrito {carritoId} no existe en el servidor");
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                error = "El carrito ha expirado. Redirigiendo al cat√°logo para crear uno nuevo...";
                await Task.Delay(3000);
                VolverAlCatalogo();
            }
        }
        catch (Exception ex)
        {
            error = $"Error al inicializar carrito: {ex.Message}";
        }
    }

    private async Task CargarCarrito()
    {
        if (string.IsNullOrEmpty(carritoId)) return;

        try
        {
            cargando = true;
            error = null;
            
            carrito = await ApiService.ObtenerCarritoAsync(carritoId);
            
            if (carrito == null)
            {
                error = "No se pudo cargar el carrito. Puede que haya expirado.";
            }
        }
        catch (Exception ex)
        {
            error = $"Error al cargar carrito: {ex.Message}";
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task IncrementarCantidad(int productoId)
    {
        if (carrito == null) return;
        
        var item = carrito.Items.FirstOrDefault(i => i.ProductoId == productoId);
        if (item != null)
        {
            await ActualizarCantidad(productoId, item.Cantidad + 1);
        }
    }

    private async Task DecrementarCantidad(int productoId)
    {
        if (carrito == null) return;
        
        var item = carrito.Items.FirstOrDefault(i => i.ProductoId == productoId);
        if (item != null && item.Cantidad > 1)
        {
            await ActualizarCantidad(productoId, item.Cantidad - 1);
        }
    }

    private async Task ActualizarCantidad(int productoId, int nuevaCantidad)
    {
        if (string.IsNullOrEmpty(carritoId) || nuevaCantidad < 1) return;

        try
        {
            actualizandoItem = productoId;
            
            var exito = await ApiService.AgregarProductoAlCarritoAsync(carritoId, productoId, nuevaCantidad);
            
            if (exito)
            {
                await CargarCarrito(); // Recargar para obtener datos actualizados
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al actualizar la cantidad");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            actualizandoItem = null;
        }
    }

    private async Task EliminarProducto(int productoId)
    {
        if (string.IsNullOrEmpty(carritoId)) return;

        var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
            "¬øEst√°s seguro de que quieres eliminar este producto del carrito?");
        
        if (!confirmar) return;

        try
        {
            eliminandoItem = productoId;
            
            var exito = await ApiService.EliminarProductoDelCarritoAsync(carritoId, productoId);
            
            if (exito)
            {
                await CargarCarrito(); // Recargar carrito
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al eliminar el producto");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            eliminandoItem = null;
        }
    }

    private async Task VaciarCarrito()
    {
        if (string.IsNullOrEmpty(carritoId)) return;

        var confirmar = await JSRuntime.InvokeAsync<bool>("confirm", 
            "¬øEst√°s seguro de que quieres vaciar todo el carrito?");
        
        if (!confirmar) return;

        try
        {
            vaciandoCarrito = true;
            
            var exito = await ApiService.VaciarCarritoAsync(carritoId);
            
            if (exito)
            {
                await CargarCarrito(); // Recargar carrito
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al vaciar el carrito");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            vaciandoCarrito = false;
        }
    }

    private bool DatosClienteValidos()
    {
        return !string.IsNullOrWhiteSpace(datosCliente.NombreCliente) &&
               !string.IsNullOrWhiteSpace(datosCliente.ApellidoCliente) &&
               !string.IsNullOrWhiteSpace(datosCliente.EmailCliente) &&
               datosCliente.EmailCliente.Contains("@");
    }

    private async Task ConfirmarCompra()
    {
        if (string.IsNullOrEmpty(carritoId) || !DatosClienteValidos()) return;

        try
        {
            confirmandoCompra = true;
            
            compraConfirmada = await ApiService.ConfirmarCompraAsync(carritoId, datosCliente);
            
            if (compraConfirmada != null)
            {
                // Limpiar carrito del localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "carritoId");
                
                // Crear nuevo carrito para futuras compras
                var nuevoCarritoId = await ApiService.CrearCarritoAsync();
                if (!string.IsNullOrEmpty(nuevoCarritoId))
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "carritoId", nuevoCarritoId);
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "‚ùå Error al confirmar la compra");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"‚ùå Error: {ex.Message}");
        }
        finally
        {
            confirmandoCompra = false;
        }
    }

    private void VolverAlCatalogo()
    {
        Navigation.NavigateTo("/");
    }
}
