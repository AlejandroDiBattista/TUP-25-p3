@page "/confirmar"
@inject ApiClient Api
@inject CartState Cart
@inject NavigationManager NavManager
@using System.ComponentModel.DataAnnotations
@using TiendaOnline.Frontend.Models
@using TiendaOnline.Frontend.Services

<PageTitle>Confirmar Compra</PageTitle>

@if (compraRealizada is not null)
{
    <h3>¡Gracias por tu compra!</h3>
    <p>Tu orden N.º <strong>@compraRealizada.Id</strong> ha sido registrada.</p>
    <button class="btn btn-primary" @onclick="VolverAlCatalogo">Volver al Catálogo</button>
}
else if (_carrito is not null && _carrito.Items.Any())
{
    <div class="card mb-4">
        <div class="card-header">
            <h4>Resumen de la Compra</h4>
        </div>
        <div class="card-body">
            <p><strong>Total de ítems:</strong> @_carrito.Items.Sum(i => i.Cantidad)</p>
            <p class="fs-5"><strong>Importe total:</strong> <span class="fw-bold">@(_carrito.Items.Sum(i => i.Cantidad * (i.Producto?.Precio ?? 0)))</span></p>
        </div>
    </div>
    <h4>Datos del Cliente</h4>
    <EditForm Model="form" OnValidSubmit="Enviar">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="form.Nombre" />
            <ValidationMessage For="@(() => form.Nombre)" />
        </div>
        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido</label>
            <InputText id="apellido" class="form-control" @bind-Value="form.Apellido" />
            <ValidationMessage For="@(() => form.Apellido)" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="form.Email" />
            <ValidationMessage For="@(() => form.Email)" />
        </div>
        
        <button type="submit" class="btn btn-success">Confirmar y Pagar</button>
    </EditForm>
}
else
{
    <p>No tienes productos en el carrito para confirmar.</p>
}

@code {
    private class FormModel
    {
        [Required(ErrorMessage = "El nombre es obligatorio.")]
        public string Nombre { get; set; } = "";
        [Required(ErrorMessage = "El apellido es obligatorio.")]
        public string Apellido { get; set; } = "";
        [Required(ErrorMessage = "El email es obligatorio.")]
        [EmailAddress(ErrorMessage = "El formato del email no es válido.")]
        public string Email { get; set; } = "";
    }

    private FormModel form = new();
    private Compra? compraRealizada;
    private TiendaOnline.Frontend.Models.Carrito? _carrito;

    protected override async Task OnInitializedAsync()
    {
        if (Cart.CarritoId is not null)
        {
            _carrito = await Api.GetCarrito(Cart.CarritoId.Value);
        }
    }

    private async Task Enviar()
    {
        if (_carrito is null || !_carrito.Items.Any()) return;

        compraRealizada = await Api.Confirmar(Cart.CarritoId!.Value,
            form.Nombre, form.Apellido, form.Email);
        
        Cart.Reset();
    }

    // Método para manejar la navegación
    private void VolverAlCatalogo()
    {
        NavManager.NavigateTo("/");
    }
}